{
    "resources": [
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/access_requests",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a list of access requests for a group.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AccessRequester"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.11.",
            "tags": [
                "access_requests"
            ],
            "operationId": "getApiV4GroupsIdAccessRequests"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/epics/{epic_iid}/award_emoji",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "epic_iid",
                    "description": "ID (`iid` for merge requests/issues/epics, `id` for snippets) of an awardable.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List an awardable's emoji reactions for groups",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_AwardEmoji"
                        }
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4GroupsIdEpicsEpicIidAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/epics/{epic_iid}/award_emoji/{award_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of the emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "epic_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4GroupsIdEpicsEpicIidAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/epics/{epic_iid}/notes/{note_id}/award_emoji",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "epic_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "List an awardable's emoji reactions for groups",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_AwardEmoji"
                        }
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/epics/{epic_iid}/notes/{note_id}/award_emoji/{award_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of the emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "epic_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/badges",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "name",
                    "description": "Name for the badge",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a list of group badges viewable by the authenticated user.",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Badge"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "badges"
            ],
            "operationId": "getApiV4GroupsIdBadges"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/badges/render",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "link_url",
                    "description": "URL of the badge link",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "image_url",
                    "description": "URL of the badge image",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Preview a badge from a group.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_BasicBadgeDetails"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "badges"
            ],
            "operationId": "getApiV4GroupsIdBadgesRender"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/badges/{badge_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "badge_id",
                    "description": "The badge ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a badge of a group.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Badge"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "badges"
            ],
            "operationId": "getApiV4GroupsIdBadgesBadgeId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/custom_attributes",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get all custom attributes on a group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_CustomAttribute"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get all custom attributes on a group",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdCustomAttributes"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/custom_attributes/{key}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the custom attribute",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a custom attribute on a group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_CustomAttribute"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a custom attribute on a group",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdCustomAttributesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "statistics",
                    "description": "Include project statistics",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "archived",
                    "description": "Limit by archived status",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "skip_groups",
                    "description": "Array of group ids to exclude from list",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "all_available",
                    "description": "When `true`, returns all accessible groups. When `false`, returns only groups where the user is a member.",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "visibility",
                    "description": "Limit by visibility",
                    "type": "string",
                    "enum": [
                        "private",
                        "internal",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Search for a specific group",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "owned",
                    "description": "Limit by owned by authenticated user",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Order by name, path, id or similarity if searching",
                    "type": "string",
                    "default": "name",
                    "enum": [
                        "name",
                        "path",
                        "id",
                        "similarity"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Sort by asc (ascending) or desc (descending)",
                    "type": "string",
                    "default": "asc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "min_access_level",
                    "description": "Minimum access level of authenticated user",
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        10,
                        15,
                        20,
                        30,
                        40,
                        50
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "top_level_only",
                    "description": "Only include top-level groups",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "marked_for_deletion_on",
                    "description": "Return groups that are marked for deletion on this date",
                    "type": "string",
                    "format": "date",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "active",
                    "description": "Limit by groups that are not archived and not marked for deletion",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "repository_storage",
                    "description": "Filter by repository storage used by the group",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "with_custom_attributes",
                    "description": "Include custom attributes in the response",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a groups list",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Group"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a groups list",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4Groups"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "with_custom_attributes",
                    "description": "Include custom attributes in the response",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_projects",
                    "description": "Omit project details",
                    "type": "boolean",
                    "default": true,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single group, with containing projects.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_GroupDetail"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a single group, with containing projects.",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/groups/shared",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "skip_groups",
                    "description": "Array of group ids to exclude from list",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "visibility",
                    "description": "Limit by visibility",
                    "type": "string",
                    "enum": [
                        "private",
                        "internal",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Search for a specific group",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "min_access_level",
                    "description": "Minimum access level of authenticated user",
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        10,
                        15,
                        20,
                        30,
                        40,
                        50
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Order by name, path, id or similarity if searching",
                    "type": "string",
                    "default": "name",
                    "enum": [
                        "name",
                        "path",
                        "id",
                        "similarity"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Sort by asc (ascending) or desc (descending)",
                    "type": "string",
                    "default": "asc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "with_custom_attributes",
                    "description": "Include custom attributes in the response",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of shared groups this group was invited to",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Group"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of shared groups this group was invited to",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdGroupsShared"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/invited_groups",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "relation",
                    "description": "Include group relations",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "direct",
                            "inherited"
                        ]
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Search for a specific group",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "min_access_level",
                    "description": "Minimum access level of authenticated user",
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        10,
                        15,
                        20,
                        30,
                        40,
                        50
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "with_custom_attributes",
                    "description": "Include custom attributes in the response",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of invited groups in this group",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Group"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of invited groups in this group",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdInvitedGroups"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/projects",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "archived",
                    "description": "Limit by archived status",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "visibility",
                    "description": "Limit by visibility",
                    "type": "string",
                    "enum": [
                        "private",
                        "internal",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of authorized projects matching the search criteria",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Return projects ordered by field",
                    "type": "string",
                    "default": "created_at",
                    "enum": [
                        "id",
                        "name",
                        "path",
                        "created_at",
                        "updated_at",
                        "last_activity_at",
                        "similarity",
                        "star_count"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return projects sorted in ascending and descending order",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "simple",
                    "description": "Return only the ID, URL, name, and path of each project",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "owned",
                    "description": "Limit by owned by authenticated user",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "starred",
                    "description": "Limit by starred status",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_issues_enabled",
                    "description": "Limit by enabled issues feature",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_merge_requests_enabled",
                    "description": "Limit by enabled merge requests feature",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_shared",
                    "description": "Include projects shared to this group",
                    "type": "boolean",
                    "default": true,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_subgroups",
                    "description": "Includes projects in subgroups of this group",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_ancestor_groups",
                    "description": "Includes projects in ancestors of this group",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "min_access_level",
                    "description": "Limit by minimum access level of authenticated user on projects",
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        10,
                        15,
                        20,
                        30,
                        40,
                        50
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "with_custom_attributes",
                    "description": "Include custom attributes in the response",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_security_reports",
                    "description": "Return only projects having security report artifacts present",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of projects in this group.",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Project"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of projects in this group.",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdProjects"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/projects/shared",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "archived",
                    "description": "Limit by archived status",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "visibility",
                    "description": "Limit by visibility",
                    "type": "string",
                    "enum": [
                        "private",
                        "internal",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of authorized projects matching the search criteria",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Return projects ordered by field",
                    "type": "string",
                    "default": "created_at",
                    "enum": [
                        "id",
                        "name",
                        "path",
                        "created_at",
                        "updated_at",
                        "last_activity_at",
                        "star_count"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return projects sorted in ascending and descending order",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "simple",
                    "description": "Return only the ID, URL, name, and path of each project",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "starred",
                    "description": "Limit by starred status",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_issues_enabled",
                    "description": "Limit by enabled issues feature",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_merge_requests_enabled",
                    "description": "Limit by enabled merge requests feature",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "min_access_level",
                    "description": "Limit by minimum access level of authenticated user on projects",
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        10,
                        15,
                        20,
                        30,
                        40,
                        50
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "with_custom_attributes",
                    "description": "Include custom attributes in the response",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of shared projects in this group",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Project"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of shared projects in this group",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdProjectsShared"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/subgroups",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "statistics",
                    "description": "Include project statistics",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "archived",
                    "description": "Limit by archived status",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "skip_groups",
                    "description": "Array of group ids to exclude from list",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "all_available",
                    "description": "When `true`, returns all accessible groups. When `false`, returns only groups where the user is a member.",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "visibility",
                    "description": "Limit by visibility",
                    "type": "string",
                    "enum": [
                        "private",
                        "internal",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Search for a specific group",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "owned",
                    "description": "Limit by owned by authenticated user",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Order by name, path, id or similarity if searching",
                    "type": "string",
                    "default": "name",
                    "enum": [
                        "name",
                        "path",
                        "id",
                        "similarity"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Sort by asc (ascending) or desc (descending)",
                    "type": "string",
                    "default": "asc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "min_access_level",
                    "description": "Minimum access level of authenticated user",
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        10,
                        15,
                        20,
                        30,
                        40,
                        50
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "top_level_only",
                    "description": "Only include top-level groups",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "marked_for_deletion_on",
                    "description": "Return groups that are marked for deletion on this date",
                    "type": "string",
                    "format": "date",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "active",
                    "description": "Limit by groups that are not archived and not marked for deletion",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "repository_storage",
                    "description": "Filter by repository storage used by the group",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "with_custom_attributes",
                    "description": "Include custom attributes in the response",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of subgroups in this group.",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Group"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of subgroups in this group.",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdSubgroups"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/descendant_groups",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "statistics",
                    "description": "Include project statistics",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "archived",
                    "description": "Limit by archived status",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "skip_groups",
                    "description": "Array of group ids to exclude from list",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "all_available",
                    "description": "When `true`, returns all accessible groups. When `false`, returns only groups where the user is a member.",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "visibility",
                    "description": "Limit by visibility",
                    "type": "string",
                    "enum": [
                        "private",
                        "internal",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Search for a specific group",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "owned",
                    "description": "Limit by owned by authenticated user",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Order by name, path, id or similarity if searching",
                    "type": "string",
                    "default": "name",
                    "enum": [
                        "name",
                        "path",
                        "id",
                        "similarity"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Sort by asc (ascending) or desc (descending)",
                    "type": "string",
                    "default": "asc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "min_access_level",
                    "description": "Minimum access level of authenticated user",
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        10,
                        15,
                        20,
                        30,
                        40,
                        50
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "top_level_only",
                    "description": "Only include top-level groups",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "marked_for_deletion_on",
                    "description": "Return groups that are marked for deletion on this date",
                    "type": "string",
                    "format": "date",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "active",
                    "description": "Limit by groups that are not archived and not marked for deletion",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "repository_storage",
                    "description": "Filter by repository storage used by the group",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "with_custom_attributes",
                    "description": "Include custom attributes in the response",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of descendant groups of this group.",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Group"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of descendant groups of this group.",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdDescendantGroups"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/transfer_locations",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of namespaces matching the search criteria",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the groups to where the current group can be transferred to",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Group"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get the groups to where the current group can be transferred to",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdTransferLocations"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/audit_events",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "created_after",
                    "description": "Return audit events created after the specified time",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2016-01-19T09:05:50.355Z"
                },
                {
                    "in": "query",
                    "name": "created_before",
                    "description": "Return audit events created before the specified time",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2016-01-19T09:05:50.355Z"
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of audit events in this group.",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/EE_API_Entities_AuditEvent"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of audit events in this group.",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdAuditEvents"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/audit_events/{audit_event_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "audit_event_id",
                    "description": "The ID of the audit event",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a specific audit event in this group.",
                    "schema": {
                        "$ref": "#/definitions/EE_API_Entities_AuditEvent"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a specific audit event in this group.",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdAuditEventsAuditEventId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/provisioned_users",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "username",
                    "description": "Return a single user with a specific username",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Search users by name, email or username",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "active",
                    "description": "Return only active users",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "blocked",
                    "description": "Return only blocked users",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "created_after",
                    "description": "Return users created after the specified time",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "created_before",
                    "description": "Return users created before the specified time",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of users provisioned by the group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_UserPublic"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of users provisioned by the group",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdProvisionedUsers"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/users",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "search",
                    "description": "Search users by name, email or username",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "active",
                    "description": "Filters only active users",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_saml_users",
                    "description": "Return users with a SAML identity in this group",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_service_accounts",
                    "description": "Return service accounts owned by this group",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of users for the group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_UserPublic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "404 Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of users for the group",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdUsers"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/ssh_certificates",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of ssh certificates created for a group.",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/EE_API_Entities_SshCertificate"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "404 Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of ssh certificates created for a group.",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdSshCertificates"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/runners",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "type",
                    "description": "The type of runners to return",
                    "type": "string",
                    "enum": [
                        "instance_type",
                        "group_type",
                        "project_type"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "paused",
                    "description": "Whether to include only runners that are accepting or ignoring new jobs",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "status",
                    "description": "The status of runners to return",
                    "type": "string",
                    "enum": [
                        "active",
                        "paused",
                        "online",
                        "offline",
                        "never_contacted",
                        "stale"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "tag_list",
                    "description": "A list of runner tags",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false,
                    "example": "['macos', 'shell']"
                },
                {
                    "in": "query",
                    "name": "version_prefix",
                    "description": "The version prefix of runners to return",
                    "type": "string",
                    "required": false,
                    "example": "'15.1.' or '16.'"
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get runners available for group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Runner"
                    }
                },
                "400": {
                    "description": "Scope contains invalid value"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "List all runners available in the group as well as its ancestor groups, including any allowed shared runners.",
            "tags": [
                "runners",
                "groups"
            ],
            "operationId": "getApiV4GroupsIdRunners"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/Release.gpg",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                }
            ],
            "responses": {
                "200": {
                    "description": "The Release file signature"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.5",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesDebianDists*distributionReleaseGpg"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/Release",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                }
            ],
            "responses": {
                "200": {
                    "description": "The unsigned Release file"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.5",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesDebianDists*distributionRelease"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/InRelease",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                }
            ],
            "responses": {
                "200": {
                    "description": "The signed Release file"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.5",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesDebianDists*distributionInrelease"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/{component}/debian-installer/binary-{architecture}/Packages",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                },
                {
                    "in": "path",
                    "name": "component",
                    "description": "The Debian Component",
                    "type": "string",
                    "required": true,
                    "example": "main"
                },
                {
                    "in": "path",
                    "name": "architecture",
                    "description": "The Debian Architecture",
                    "type": "string",
                    "required": true,
                    "example": "binary-amd64"
                }
            ],
            "responses": {
                "200": {
                    "description": "The installer (udeb) binary files index"
                },
                "202": {
                    "description": "The installer (udeb) binary files index"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.4",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesDebianDists*distributionComponentDebianInstallerBinaryArchitecturePackages"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/{component}/debian-installer/binary-{architecture}/by-hash/SHA256/{file_sha256}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                },
                {
                    "in": "path",
                    "name": "component",
                    "description": "The Debian Component",
                    "type": "string",
                    "required": true,
                    "example": "main"
                },
                {
                    "in": "path",
                    "name": "architecture",
                    "description": "The Debian Architecture",
                    "type": "string",
                    "required": true,
                    "example": "binary-amd64"
                },
                {
                    "in": "path",
                    "name": "file_sha256",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The installer (udeb) binary files index by hash"
                },
                "202": {
                    "description": "The installer (udeb) binary files index by hash"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.4",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesDebianDists*distributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/{component}/source/Sources",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                },
                {
                    "in": "path",
                    "name": "component",
                    "description": "The Debian Component",
                    "type": "string",
                    "required": true,
                    "example": "main"
                }
            ],
            "responses": {
                "200": {
                    "description": "The source files index"
                },
                "202": {
                    "description": "The source files index"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.4",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesDebianDists*distributionComponentSourceSources"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/{component}/source/by-hash/SHA256/{file_sha256}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                },
                {
                    "in": "path",
                    "name": "component",
                    "description": "The Debian Component",
                    "type": "string",
                    "required": true,
                    "example": "main"
                },
                {
                    "in": "path",
                    "name": "file_sha256",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The source files index by hash"
                },
                "202": {
                    "description": "The source files index by hash"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.4",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesDebianDists*distributionComponentSourceByHashSha256FileSha256"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/{component}/binary-{architecture}/Packages",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                },
                {
                    "in": "path",
                    "name": "component",
                    "description": "The Debian Component",
                    "type": "string",
                    "required": true,
                    "example": "main"
                },
                {
                    "in": "path",
                    "name": "architecture",
                    "description": "The Debian Architecture",
                    "type": "string",
                    "required": true,
                    "example": "binary-amd64"
                }
            ],
            "responses": {
                "200": {
                    "description": "The binary files index"
                },
                "202": {
                    "description": "The binary files index"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.5",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesDebianDists*distributionComponentBinaryArchitecturePackages"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/{component}/binary-{architecture}/by-hash/SHA256/{file_sha256}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                },
                {
                    "in": "path",
                    "name": "component",
                    "description": "The Debian Component",
                    "type": "string",
                    "required": true,
                    "example": "main"
                },
                {
                    "in": "path",
                    "name": "architecture",
                    "description": "The Debian Architecture",
                    "type": "string",
                    "required": true,
                    "example": "binary-amd64"
                },
                {
                    "in": "path",
                    "name": "file_sha256",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The binary files index by hash"
                },
                "202": {
                    "description": "The binary files index by hash"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.4",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesDebianDists*distributionComponentBinaryArchitectureByHashSha256FileSha256"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/debian/pool/{distribution}/{project_id}/{letter}/{package_name}/{package_version}/{file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "project_id",
                    "description": "The Project Id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                },
                {
                    "in": "path",
                    "name": "letter",
                    "description": "The Debian Classification (first-letter or lib-first-letter)",
                    "type": "string",
                    "required": true,
                    "example": "a"
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "The Debian Source Package Name",
                    "type": "string",
                    "required": true,
                    "example": "my-pkg"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "The Debian Source Package Version",
                    "type": "string",
                    "required": true,
                    "example": "1.0.0"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "The Debian File Name",
                    "type": "string",
                    "required": true,
                    "example": "example_1.0.0~alpha2_amd64.deb"
                }
            ],
            "responses": {
                "200": {
                    "description": "Download Debian package"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.2",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesDebianPoolDistributionProjectIdLetterPackageNamePackageVersionFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/deploy_tokens",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "active",
                    "description": "Limit by active status",
                    "type": "boolean",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List group deploy tokens",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_DeployToken"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of a group's deploy tokens. This feature was introduced in GitLab 12.9.",
            "tags": [
                "deploy_tokens"
            ],
            "operationId": "getApiV4GroupsIdDeployTokens"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/deploy_tokens/{token_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "token_id",
                    "description": "The ID of the deploy token",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a group deploy token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DeployToken"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single group's deploy token by ID. This feature was introduced in GitLab 14.9. ",
            "tags": [
                "deploy_tokens"
            ],
            "operationId": "getApiV4GroupsIdDeployTokensTokenId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/avatar",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of the group",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download the group avatar"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.0",
            "tags": [
                "group_avatar"
            ],
            "operationId": "getApiV4GroupsIdAvatar"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/clusters",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List group clusters",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Cluster"
                        }
                    }
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.1. Returns a list of group clusters.",
            "tags": [
                "clusters"
            ],
            "operationId": "getApiV4GroupsIdClusters"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/clusters/{cluster_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "cluster_id",
                    "description": "The cluster ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single group cluster",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ClusterGroup"
                    }
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.1. Gets a single group cluster.",
            "tags": [
                "clusters"
            ],
            "operationId": "getApiV4GroupsIdClustersClusterId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/registry/repositories",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group accessible by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List registry repositories within a group",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_ContainerRegistry_Repository"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Group Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of registry repositories in a group. This feature was introduced in GitLab 12.2.",
            "tags": [
                "container_registry"
            ],
            "operationId": "getApiV4GroupsIdRegistryRepositories"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/debian_distributions",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "codename",
                    "description": "The Debian Codename",
                    "type": "string",
                    "required": false,
                    "example": "sid"
                },
                {
                    "in": "query",
                    "name": "suite",
                    "description": "The Debian Suite",
                    "type": "string",
                    "required": false,
                    "example": "unstable"
                },
                {
                    "in": "query",
                    "name": "origin",
                    "description": "The Debian Origin",
                    "type": "string",
                    "required": false,
                    "example": "Grep"
                },
                {
                    "in": "query",
                    "name": "label",
                    "description": "The Debian Label",
                    "type": "string",
                    "required": false,
                    "example": "grep.be"
                },
                {
                    "in": "query",
                    "name": "version",
                    "description": "The Debian Version",
                    "type": "string",
                    "required": false,
                    "example": "12"
                },
                {
                    "in": "query",
                    "name": "description",
                    "description": "The Debian Description",
                    "type": "string",
                    "required": false,
                    "example": "My description"
                },
                {
                    "in": "query",
                    "name": "valid_time_duration_seconds",
                    "description": "The duration before the Release file should be considered expired by the client",
                    "type": "integer",
                    "format": "int32",
                    "required": false,
                    "example": 604800
                },
                {
                    "in": "query",
                    "name": "components",
                    "description": "The list of Components",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false,
                    "example": "main"
                },
                {
                    "in": "query",
                    "name": "architectures",
                    "description": "The list of Architectures",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false,
                    "example": "amd64"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of Debian Distributions",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Debian_Distribution"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in 14.0",
            "tags": [
                "debian_distribution"
            ],
            "operationId": "getApiV4GroupsIdDebianDistributions"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/debian_distributions/{codename}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "codename",
                    "description": "The Debian Codename",
                    "type": "string",
                    "required": true,
                    "example": "sid"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a Debian Distribution",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Debian_Distribution"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in 14.0",
            "tags": [
                "debian_distribution"
            ],
            "operationId": "getApiV4GroupsIdDebianDistributionsCodename"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/debian_distributions/{codename}/key.asc",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "codename",
                    "description": "The Debian Codename",
                    "type": "string",
                    "required": true,
                    "example": "sid"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a Debian Distribution Key",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Debian_Distribution"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in 14.4",
            "tags": [
                "debian_distribution"
            ],
            "operationId": "getApiV4GroupsIdDebianDistributionsCodenameKeyAsc"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/export/download",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download export"
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5.",
            "tags": [
                "group_export"
            ],
            "operationId": "getApiV4GroupsIdExportDownload"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/export_relations/download",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "relation",
                    "description": "Group relation name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "batched",
                    "description": "Whether to download in batches",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "batch_number",
                    "description": "Batch number to download",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Download relations export"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.12",
            "tags": [
                "group_export"
            ],
            "operationId": "getApiV4GroupsIdExportRelationsDownload"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/export_relations/status",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "relation",
                    "description": "Group relation name",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Relations export status",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_BulkImports_ExportStatus"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.12",
            "tags": [
                "group_export"
            ],
            "operationId": "getApiV4GroupsIdExportRelationsStatus"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/packages",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "ID or URL-encoded path of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "exclude_subgroups",
                    "description": "Determines if subgroups should be excluded",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Return packages ordered by `created_at`, `name`, `version` or `type` fields.",
                    "type": "string",
                    "default": "created_at",
                    "enum": [
                        "created_at",
                        "name",
                        "version",
                        "type",
                        "project_path"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return packages sorted in `asc` or `desc` order.",
                    "type": "string",
                    "default": "asc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "package_type",
                    "description": "Return packages of a certain type",
                    "type": "string",
                    "enum": [
                        "maven",
                        "npm",
                        "conan",
                        "nuget",
                        "pypi",
                        "composer",
                        "generic",
                        "golang",
                        "debian",
                        "rubygems",
                        "helm",
                        "terraform_module",
                        "rpm",
                        "ml_model"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "Return packages with this name",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "package_version",
                    "description": "Return packages with this version",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_versionless",
                    "description": "Returns packages without a version",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "status",
                    "description": "Return packages with specified status",
                    "type": "string",
                    "enum": [
                        "default",
                        "hidden",
                        "processing",
                        "error",
                        "pending_destruction",
                        "deprecated"
                    ],
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List packages within a group",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Package"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Group Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of project packages at the group level. This feature was introduced in GitLab 12.5",
            "tags": [
                "group_packages"
            ],
            "operationId": "getApiV4GroupsIdPackages"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/placeholder_reassignments",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download the list of pending placeholder assignments for a group"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was added in GitLab 17.10",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdPlaceholderReassignments"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/variables",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group or URL-encoded path of the group owned by the authenticated\n      user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of group-level variables",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of group-level variables",
            "tags": [
                "ci_variables"
            ],
            "operationId": "getApiV4GroupsIdVariables"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/variables/{key}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group or URL-encoded path of the group owned by the authenticated\n      user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the variable",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the details of a group\u2019s specific variable",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                },
                "404": {
                    "description": "Group Variable Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the details of a group\u2019s specific variable",
            "tags": [
                "ci_variables"
            ],
            "operationId": "getApiV4GroupsIdVariablesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "List all active integrations",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_IntegrationBasic"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all active integrations.",
            "tags": [
                "integrations"
            ],
            "operationId": "getApiV4GroupsIdIntegrations"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/{slug}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "slug",
                    "description": "The name of the integration",
                    "type": "string",
                    "enum": [
                        "apple-app-store",
                        "asana",
                        "assembla",
                        "bamboo",
                        "bugzilla",
                        "buildkite",
                        "campfire",
                        "confluence",
                        "custom-issue-tracker",
                        "datadog",
                        "diffblue-cover",
                        "discord",
                        "drone-ci",
                        "emails-on-push",
                        "external-wiki",
                        "gitlab-slack-application",
                        "google-play",
                        "hangouts-chat",
                        "harbor",
                        "irker",
                        "jenkins",
                        "jira",
                        "jira-cloud-app",
                        "matrix",
                        "mattermost-slash-commands",
                        "slack-slash-commands",
                        "packagist",
                        "phorge",
                        "pipelines-email",
                        "pivotaltracker",
                        "pumble",
                        "pushover",
                        "redmine",
                        "ewm",
                        "youtrack",
                        "clickup",
                        "slack",
                        "microsoft-teams",
                        "mattermost",
                        "teamcity",
                        "telegram",
                        "unify-circuit",
                        "webex-teams",
                        "zentao",
                        "squash-tm",
                        "github",
                        "git-guardian",
                        "google-cloud-platform-artifact-registry",
                        "google-cloud-platform-workload-identity-federation",
                        "mock-ci",
                        "mock-monitoring"
                    ],
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get an integration settings",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Integration"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the integration settings.",
            "tags": [
                "integrations"
            ],
            "operationId": "getApiV4GroupsIdIntegrationsSlug"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/invitations",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "query",
                    "description": "A query string to search for members",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of group or project invitations viewable by the authenticated user",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Invitation"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.6",
            "tags": [
                "invitations"
            ],
            "operationId": "getApiV4GroupsIdInvitations"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/uploads",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the list of uploads of a group",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_MarkdownUploadAdmin"
                        }
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the list of uploads of a group",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdUploads"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/uploads/{upload_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "upload_id",
                    "description": "The ID of a group upload",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download a single group upload by ID",
                    "schema": {
                        "type": "file"
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Download a single group upload by ID",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdUploadsUploadId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/uploads/{secret}/{filename}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "secret",
                    "description": "The 32-character secret of a group upload",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "filename",
                    "description": "The filename of a group upload",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download a single project upload by secret and filename",
                    "schema": {
                        "type": "file"
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Download a single project upload by secret and filename",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdUploadsSecretFilename"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/maven/*path/{file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "path",
                    "description": "Package path",
                    "type": "string",
                    "required": true,
                    "example": "foo/bar/mypkg/1.0-SNAPSHOT"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "required": true,
                    "example": "mypkg-1.0-SNAPSHOT.jar"
                }
            ],
            "responses": {
                "200": {
                    "description": "Download the maven package file at a group level"
                },
                "302": {
                    "description": "Download the maven package file at a group level"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.7",
            "tags": [
                "maven_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesMaven*pathFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/members",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "query",
                    "description": "A query string to search for members",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "user_ids",
                    "description": "Array of user ids to look up for membership",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "skip_users",
                    "description": "Array of user ids to be skipped for membership",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "show_seat_info",
                    "description": "Show seat information for members",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_saml_identity",
                    "description": "List only members with linked SAML identity",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a list of group or project members viewable by the authenticated user.",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Member"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Gets a list of group or project members viewable by the authenticated user.",
            "tags": [
                "members"
            ],
            "operationId": "getApiV4GroupsIdMembers"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/members/all",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "query",
                    "description": "A query string to search for members",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "user_ids",
                    "description": "Array of user ids to look up for membership",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "show_seat_info",
                    "description": "Show seat information for members",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "state",
                    "description": "Filter results by member state",
                    "type": "string",
                    "enum": [
                        "awaiting",
                        "active"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a list of group or project members viewable by the authenticated user, including those who gained membership through ancestor group.",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Member"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Gets a list of group or project members viewable by the authenticated user, including those who gained membership through ancestor group.",
            "tags": [
                "members"
            ],
            "operationId": "getApiV4GroupsIdMembersAll"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/members/{user_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the member",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a member of a group or project.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Member"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Gets a member of a group or project.",
            "tags": [
                "members"
            ],
            "operationId": "getApiV4GroupsIdMembersUserId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/members/all/{user_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the member",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a member of a group or project, including those who gained membership through ancestor group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Member"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Gets a member of a group or project, including those who gained membership through ancestor group",
            "tags": [
                "members"
            ],
            "operationId": "getApiV4GroupsIdMembersAllUserId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/pending_members",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Lists all pending members for a group including invited users"
                }
            },
            "request_body_parameters": {},
            "description": "Lists all pending members for a group including invited users",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdPendingMembers"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/billable_members",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "The exact name of the subscribed member",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "The sorting option",
                    "type": "string",
                    "enum": [
                        "access_level_asc",
                        "access_level_desc",
                        "last_joined",
                        "name_asc",
                        "name_desc",
                        "oldest_joined",
                        "oldest_sign_in",
                        "recent_sign_in",
                        "last_activity_on_asc",
                        "last_activity_on_desc"
                    ],
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a list of billable users of top-level group.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Member"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Gets a list of billable users of top-level group.",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdBillableMembers"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/billable_members/{user_id}/memberships",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the member",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the direct memberships of a billable user of a top-level group.",
                    "schema": {
                        "$ref": "#/definitions/EE_API_Entities_BillableMembership"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get the direct memberships of a billable user of a top-level group.",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdBillableMembersUserIdMemberships"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/billable_members/{user_id}/indirect",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the member",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the indirect memberships of a billable user of a top-level group.",
                    "schema": {
                        "$ref": "#/definitions/EE_API_Entities_BillableMembership"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get the indirect memberships of a billable user of a top-level group.",
            "tags": [
                "groups"
            ],
            "operationId": "getApiV4GroupsIdBillableMembersUserIdIndirect"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/merge_requests",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "author_id",
                    "description": "Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "author_username",
                    "description": "Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "assignee_id",
                    "description": "Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "assignee_username",
                    "description": "Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "reviewer_username",
                    "description": "Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "labels",
                    "description": "Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "milestone",
                    "description": "Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "my_reaction_emoji",
                    "description": "Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "reviewer_id",
                    "description": "Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "state",
                    "description": "Returns `all` merge requests or just those that are `opened`, `closed`, `locked`, or `merged`.",
                    "type": "string",
                    "default": "all",
                    "enum": [
                        "opened",
                        "closed",
                        "locked",
                        "merged",
                        "all"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Returns merge requests ordered by `created_at`, `label_priority`, `milestone_due`, `popularity`, `priority`, `title`, `updated_at` or `merged_at` fields. Introduced in GitLab 14.8.",
                    "type": "string",
                    "default": "created_at",
                    "enum": [
                        "created_at",
                        "label_priority",
                        "milestone_due",
                        "popularity",
                        "priority",
                        "title",
                        "updated_at",
                        "merged_at"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Returns merge requests sorted in `asc` or `desc` order.",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_labels_details",
                    "description": "If `true`, response returns more details for each label in labels field: `:name`,`:color`, `:description`, `:description_html`, `:text_color`",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_merge_status_recheck",
                    "description": "If `true`, this projection requests (but does not guarantee) that the `merge_status` field be recalculated asynchronously. Introduced in GitLab 13.0.",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "created_after",
                    "description": "Returns merge requests created on or after the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "created_before",
                    "description": "Returns merge requests created on or before the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "updated_after",
                    "description": "Returns merge requests updated on or after the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "updated_before",
                    "description": "Returns merge requests updated on or before the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "view",
                    "description": "If simple, returns the `iid`, URL, title, description, and basic state of merge request",
                    "type": "string",
                    "enum": [
                        "simple"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "scope",
                    "description": "Returns merge requests for the given scope: `created_by_me`, `assigned_to_me` or `all`",
                    "type": "string",
                    "enum": [
                        "created-by-me",
                        "assigned-to-me",
                        "created_by_me",
                        "assigned_to_me",
                        "all"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "source_branch",
                    "description": "Returns merge requests with the given source branch",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "source_project_id",
                    "description": "Returns merge requests with the given source project id",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "target_branch",
                    "description": "Returns merge requests with the given target branch",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Search merge requests against their `title` and `description`.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "in",
                    "description": "Modify the scope of the search attribute. `title`, `description`, or a string joining them with comma.",
                    "type": "string",
                    "required": false,
                    "example": "title,description"
                },
                {
                    "in": "query",
                    "name": "wip",
                    "description": "Filter merge requests against their `wip` status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.",
                    "type": "string",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[author_id]",
                    "description": "`<Negated>` Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[author_username]",
                    "description": "`<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[assignee_id]",
                    "description": "`<Negated>` Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[assignee_username]",
                    "description": "`<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[reviewer_username]",
                    "description": "`<Negated>` Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[labels]",
                    "description": "`<Negated>` Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[milestone]",
                    "description": "`<Negated>` Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[my_reaction_emoji]",
                    "description": "`<Negated>` Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[reviewer_id]",
                    "description": "`<Negated>` Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "deployed_before",
                    "description": "Returns merge requests deployed before the given date/time. Expected in ISO 8601 format.",
                    "type": "string",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "deployed_after",
                    "description": "Returns merge requests deployed after the given date/time. Expected in ISO 8601 format",
                    "type": "string",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "environment",
                    "description": "Returns merge requests deployed to the given environment",
                    "type": "string",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "approved",
                    "description": "Filters merge requests by their `approved` status. `yes` returns only approved merge requests. `no` returns only non-approved merge requests.",
                    "type": "string",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "merge_user_id",
                    "description": "Returns merge requests which have been merged by the user with the given user `id`. Mutually exclusive with `merge_user_username`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "merge_user_username",
                    "description": "Returns merge requests which have been merged by the user with the given `username`. Mutually exclusive with `merge_user_id`.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "approver_ids",
                    "description": "Return merge requests which have specified the users with the given IDs as an individual approver",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "approved_by_ids",
                    "description": "Return merge requests which have been approved by the specified users with the given IDs",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "approved_by_usernames",
                    "description": "Return merge requests which have been approved by the specified users with the given\n            usernames",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "non_archived",
                    "description": "Returns merge requests from non archived projects only.",
                    "type": "boolean",
                    "default": true,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List group merge requests",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MergeRequestBasic"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Get all merge requests for this group and its subgroups.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4GroupsIdMergeRequests"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/npm/-/package/*package_name/dist-tags",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get all tags for a given an NPM package",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_NpmPackageTag"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.7",
            "tags": [
                "npm_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesNpmPackage*packageNameDistTags"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/npm/*package_name",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "mypackage"
                }
            ],
            "responses": {
                "200": {
                    "description": "Ok",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_NpmPackage"
                    }
                },
                "302": {
                    "description": "Found (redirect)"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.8",
            "tags": [
                "npm_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesNpm*packageName"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/nuget/index",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet V3 Feed Service Index",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Nuget_ServiceIndex"
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.6",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesNugetIndex"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/nuget/symbolfiles/*file_name/*signature/*same_file_name",
            "method": "get",
            "parameters": [
                {
                    "in": "header",
                    "name": "Symbolchecksum",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "file_name",
                    "description": "The symbol file name",
                    "type": "string",
                    "required": true,
                    "example": "mynugetpkg.pdb"
                },
                {
                    "in": "query",
                    "name": "signature",
                    "description": "The symbol file signature",
                    "type": "string",
                    "required": true,
                    "example": "k813f89485474661234z7109cve5709eFFFFFFFF"
                },
                {
                    "in": "query",
                    "name": "same_file_name",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet Symbol File Download Endpoint"
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.7",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesNugetSymbolfiles*fileName*signature*sameFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/nuget/v2",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet V2 Feed Service Index"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.2",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesNugetV2"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/nuget/v2/$metadata",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet V2 Feed Package $metadata endpoint"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.3",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesNugetV2$metadata"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/nuget/metadata/*package_name/index",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "The NuGet package name",
                    "type": "string",
                    "required": true,
                    "example": "MyNuGetPkg"
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet Metadata Service - Package name level",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Nuget_PackagesMetadata"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.8",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesNugetMetadata*packageNameIndex"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/nuget/metadata/*package_name/*package_version",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "The NuGet package name",
                    "type": "string",
                    "required": true,
                    "example": "MyNuGetPkg"
                },
                {
                    "in": "query",
                    "name": "package_version",
                    "description": "The NuGet package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0.0"
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet Metadata Service - Package name and version level",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Nuget_PackageMetadata"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.8",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesNugetMetadata*packageName*packageVersion"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/nuget/query",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID or full group path.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "q",
                    "description": "The search term",
                    "type": "string",
                    "required": false,
                    "example": "MyNuGet"
                },
                {
                    "in": "query",
                    "name": "skip",
                    "description": "The number of results to skip",
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "take",
                    "description": "The number of results to return",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "prerelease",
                    "description": "Include prerelease versions",
                    "type": "boolean",
                    "default": true,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet Search Service",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Nuget_SearchResults"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.8",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesNugetQuery"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/pypi/files/{sha256}/*file_identifier",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or full path of the group.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "file_identifier",
                    "description": "The PyPi package file identifier",
                    "type": "string",
                    "required": true,
                    "example": "my.pypi.package-0.0.1.tar.gz"
                },
                {
                    "in": "path",
                    "name": "sha256",
                    "description": "The PyPi package sha256 check sum",
                    "type": "string",
                    "required": true,
                    "example": "5y57017232013c8ac80647f4ca153k3726f6cba62d055cd747844ed95b3c65ff"
                }
            ],
            "responses": {
                "200": {
                    "description": "Download a package file from a group"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.12",
            "tags": [
                "pypi_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesPypiFilesSha256*fileIdentifier"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/pypi/simple",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or full path of the group.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The PyPi Simple Group Index Endpoint"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.1",
            "tags": [
                "pypi_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesPypiSimple"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/pypi/simple/*package_name",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or full path of the group.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "The PyPi package name",
                    "type": "string",
                    "required": true,
                    "example": "my.pypi.package"
                }
            ],
            "responses": {
                "200": {
                    "description": "The PyPi Simple Group Package Endpoint"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.10",
            "tags": [
                "pypi_packages"
            ],
            "operationId": "getApiV4GroupsIdPackagesPypiSimple*packageName"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/releases",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "The direction of the order. Either `desc` (default) for descending order or `asc` for ascending order",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "simple",
                    "description": "Return only limited fields for each release",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List group releases",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Release"
                        }
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Returns a list of group releases.",
            "tags": [
                "releases"
            ],
            "operationId": "getApiV4GroupsIdReleases"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/wikis",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "with_content",
                    "description": "Include pages' content",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of wiki pages",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_WikiPageBasic"
                        }
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of wiki pages",
            "tags": [
                "wikis"
            ],
            "operationId": "getApiV4GroupsIdWikis"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/wikis/{slug}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "slug",
                    "description": "The slug of a wiki page",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "version",
                    "description": "The version hash of a wiki page",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "render_html",
                    "description": "Render content to HTML",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a wiki page",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_WikiPage"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a wiki page",
            "tags": [
                "wikis"
            ],
            "operationId": "getApiV4GroupsIdWikisSlug"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/access_requests",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a list of access requests for a project.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AccessRequester"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.11.",
            "tags": [
                "access_requests"
            ],
            "operationId": "getApiV4ProjectsIdAccessRequests"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 17
                },
                {
                    "in": "path",
                    "name": "alert_iid",
                    "description": "The IID of the Alert",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 23
                }
            ],
            "responses": {
                "200": {
                    "description": "Metric Images for alert",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_MetricImage"
                        }
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Metric Images for alert",
            "tags": [
                "alert_management"
            ],
            "operationId": "getApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/issues/{issue_iid}/award_emoji",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "issue_iid",
                    "description": "ID (`iid` for merge requests/issues/epics, `id` for snippets) of an awardable.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List an awardable's emoji reactions for projects",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_AwardEmoji"
                        }
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4ProjectsIdIssuesIssueIidAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/issues/{issue_iid}/award_emoji/{award_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of the emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "issue_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4ProjectsIdIssuesIssueIidAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/issues/{issue_iid}/notes/{note_id}/award_emoji",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "issue_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "List an awardable's emoji reactions for projects",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_AwardEmoji"
                        }
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4ProjectsIdIssuesIssueIidNotesNoteIdAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/issues/{issue_iid}/notes/{note_id}/award_emoji/{award_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of the emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "issue_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4ProjectsIdIssuesIssueIidNotesNoteIdAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/award_emoji",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "ID (`iid` for merge requests/issues/epics, `id` for snippets) of an awardable.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List an awardable's emoji reactions for projects",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_AwardEmoji"
                        }
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/award_emoji/{award_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of the emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/notes/{note_id}/award_emoji",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "List an awardable's emoji reactions for projects",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_AwardEmoji"
                        }
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidNotesNoteIdAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/notes/{note_id}/award_emoji/{award_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of the emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidNotesNoteIdAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets/{snippet_id}/award_emoji",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "snippet_id",
                    "description": "ID (`iid` for merge requests/issues/epics, `id` for snippets) of an awardable.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List an awardable's emoji reactions for projects",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_AwardEmoji"
                        }
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4ProjectsIdSnippetsSnippetIdAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets/{snippet_id}/award_emoji/{award_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of the emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "snippet_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4ProjectsIdSnippetsSnippetIdAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "snippet_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "List an awardable's emoji reactions for projects",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_AwardEmoji"
                        }
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji/{award_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of the emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "snippet_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "getApiV4ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/badges",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "name",
                    "description": "Name for the badge",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a list of project badges viewable by the authenticated user.",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Badge"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "badges"
            ],
            "operationId": "getApiV4ProjectsIdBadges"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/badges/render",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "link_url",
                    "description": "URL of the badge link",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "image_url",
                    "description": "URL of the badge image",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Preview a badge from a project.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_BasicBadgeDetails"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "badges"
            ],
            "operationId": "getApiV4ProjectsIdBadgesRender"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/badges/{badge_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "badge_id",
                    "description": "The badge ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a badge of a project.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Badge"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "badges"
            ],
            "operationId": "getApiV4ProjectsIdBadgesBadgeId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/branches",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of branches matching the search criteria",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "regex",
                    "description": "Return list of branches matching the regex",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return list of branches sorted by the given field",
                    "type": "string",
                    "enum": [
                        "name_asc",
                        "updated_asc",
                        "updated_desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page_token",
                    "description": "Name of branch to start the pagination from",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a project repository branches",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Branch"
                        }
                    }
                },
                "404": {
                    "description": "404 Project Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a project repository branches",
            "tags": [
                "branches"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryBranches"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/branches/{branch}",
            "method": "head",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "branch",
                    "description": "The name of the branch",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "No Content"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Check if a branch exists",
            "tags": [
                "branches"
            ],
            "operationId": "headApiV4ProjectsIdRepositoryBranchesBranch"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/branches/{branch}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "branch",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single repository branch",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Branch"
                    }
                },
                "404": {
                    "description": "Branch Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single repository branch",
            "tags": [
                "branches"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryBranchesBranch"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/jobs/artifacts/{ref_name}/download",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "ref_name",
                    "description": "Branch or tag name in repository. `HEAD` or `SHA` references are not supported.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "job",
                    "description": "The name of the job.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "job_token",
                    "description": "To be used with triggers for multi-project pipelines, available only on Premium and Ultimate tiers.",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Download the artifacts archive from a job"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.10",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdJobsArtifactsRefNameDownload"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/jobs/artifacts/{ref_name}/raw/*artifact_path",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "ref_name",
                    "description": "Branch or tag name in repository. `HEAD` or `SHA` references are not supported.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "job",
                    "description": "The name of the job.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "artifact_path",
                    "description": "Path to a file inside the artifacts archive.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "job_token",
                    "description": "To be used with triggers for multi-project pipelines, available only on Premium and Ultimate tiers.",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Download a specific file from artifacts archive from a ref"
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.5",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdJobsArtifactsRefNameRaw*artifactPath"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/jobs/{job_id}/artifacts",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "job_id",
                    "description": "The ID of a job",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "job_token",
                    "description": "To be used with triggers for multi-project pipelines, available only on Premium and Ultimate tiers.",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Download the artifacts archive from a job"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.5",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdJobsJobIdArtifacts"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/jobs/{job_id}/artifacts/*artifact_path",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "job_id",
                    "description": "The ID of a job",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "artifact_path",
                    "description": "Path to a file inside the artifacts archive.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "job_token",
                    "description": "To be used with triggers for multi-project pipelines, available only on Premium and Ultimate tiers.",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Download a specific file from artifacts archive"
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.0",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdJobsJobIdArtifacts*artifactPath"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/jobs",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "scope",
                    "description": "The scope of builds to show",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "created",
                            "waiting_for_resource",
                            "preparing",
                            "waiting_for_callback",
                            "pending",
                            "running",
                            "success",
                            "failed",
                            "canceling",
                            "canceled",
                            "skipped",
                            "manual",
                            "scheduled"
                        ]
                    },
                    "required": false,
                    "example": [
                        "pending",
                        "running"
                    ]
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a projects jobs",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Ci_Job"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a projects jobs",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdJobs"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/jobs/{job_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "job_id",
                    "description": "The ID of a job",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 88
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a specific job of a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Job"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a specific job of a project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdJobsJobId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/jobs/{job_id}/trace",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "job_id",
                    "description": "The ID of a job",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 88
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a trace of a specific job of a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Job"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a trace of a specific job of a project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdJobsJobIdTrace"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/resource_groups",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get all resource groups for a project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Ci_ResourceGroup"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get all resource groups for a project",
            "tags": [
                "ci_resource_groups"
            ],
            "operationId": "getApiV4ProjectsIdResourceGroups"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/resource_groups/{key}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the resource group",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a specific resource group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_ResourceGroup"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a specific resource group",
            "tags": [
                "ci_resource_groups"
            ],
            "operationId": "getApiV4ProjectsIdResourceGroupsKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/resource_groups/{key}/upcoming_jobs",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the resource group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List upcoming jobs for a specific resource group",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Ci_JobBasic"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "List upcoming jobs for a specific resource group",
            "tags": [
                "ci_resource_groups"
            ],
            "operationId": "getApiV4ProjectsIdResourceGroupsKeyUpcomingJobs"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/runners",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "scope",
                    "description": "Deprecated: Use `type` or `status` instead. The scope of runners to return",
                    "type": "string",
                    "enum": [
                        "specific",
                        "shared",
                        "instance_type",
                        "group_type",
                        "project_type",
                        "active",
                        "paused",
                        "online",
                        "offline",
                        "never_contacted",
                        "stale"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "type",
                    "description": "The type of runners to return",
                    "type": "string",
                    "enum": [
                        "instance_type",
                        "group_type",
                        "project_type"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "paused",
                    "description": "Whether to include only runners that are accepting or ignoring new jobs",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "status",
                    "description": "The status of runners to return",
                    "type": "string",
                    "enum": [
                        "active",
                        "paused",
                        "online",
                        "offline",
                        "never_contacted",
                        "stale"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "tag_list",
                    "description": "A list of runner tags",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false,
                    "example": "['macos', 'shell']"
                },
                {
                    "in": "query",
                    "name": "version_prefix",
                    "description": "The version prefix of runners to return",
                    "type": "string",
                    "required": false,
                    "example": "'15.1.' or '16.'"
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get runners available for project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Runner"
                    }
                },
                "400": {
                    "description": "Scope contains invalid value"
                },
                "403": {
                    "description": "No access granted"
                }
            },
            "request_body_parameters": {},
            "description": "List all runners available in the project, including from ancestor groups and any allowed shared runners.",
            "tags": [
                "runners",
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdRunners"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/secure_files",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the\n        authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get list of secure files in a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_SecureFile"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get list of secure files in a project",
            "tags": [
                "secure_files"
            ],
            "operationId": "getApiV4ProjectsIdSecureFiles"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/secure_files/{secure_file_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a secure file",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "secure_file_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the details of a specific secure file in a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_SecureFile"
                    }
                },
                "404": {
                    "description": "404 Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the details of a specific secure file in a project",
            "tags": [
                "secure_files"
            ],
            "operationId": "getApiV4ProjectsIdSecureFilesSecureFileId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/secure_files/{secure_file_id}/download",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the\n        authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "secure_file_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download secure file"
                },
                "404": {
                    "description": "404 Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Download secure file",
            "tags": [
                "secure_files"
            ],
            "operationId": "getApiV4ProjectsIdSecureFilesSecureFileIdDownload"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipelines",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or URL-encoded path",
                    "type": "string",
                    "required": true,
                    "example": 11
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "scope",
                    "description": "The scope of pipelines",
                    "type": "string",
                    "enum": [
                        "running",
                        "pending",
                        "finished",
                        "branches",
                        "tags"
                    ],
                    "required": false,
                    "example": "pending"
                },
                {
                    "in": "query",
                    "name": "status",
                    "description": "The status of pipelines",
                    "type": "string",
                    "enum": [
                        "created",
                        "waiting_for_resource",
                        "preparing",
                        "waiting_for_callback",
                        "pending",
                        "running",
                        "success",
                        "failed",
                        "canceling",
                        "canceled",
                        "skipped",
                        "manual",
                        "scheduled"
                    ],
                    "required": false,
                    "example": "pending"
                },
                {
                    "in": "query",
                    "name": "ref",
                    "description": "The ref of pipelines",
                    "type": "string",
                    "required": false,
                    "example": "develop"
                },
                {
                    "in": "query",
                    "name": "sha",
                    "description": "The sha of pipelines",
                    "type": "string",
                    "required": false,
                    "example": "a91957a858320c0e17f3a0eca7cfacbff50ea29a"
                },
                {
                    "in": "query",
                    "name": "yaml_errors",
                    "description": "Returns pipelines with invalid configurations",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "username",
                    "description": "The username of the user who triggered pipelines",
                    "type": "string",
                    "required": false,
                    "example": "root"
                },
                {
                    "in": "query",
                    "name": "updated_before",
                    "description": "Return pipelines updated before the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2015-12-24T15:51:21.880Z"
                },
                {
                    "in": "query",
                    "name": "updated_after",
                    "description": "Return pipelines updated after the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2015-12-24T15:51:21.880Z"
                },
                {
                    "in": "query",
                    "name": "created_before",
                    "description": "Return pipelines created before the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2015-12-24T15:51:21.880Z"
                },
                {
                    "in": "query",
                    "name": "created_after",
                    "description": "Return pipelines created after the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2015-12-24T15:51:21.880Z"
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Order pipelines",
                    "type": "string",
                    "default": "id",
                    "enum": [
                        "id",
                        "status",
                        "ref",
                        "updated_at",
                        "user_id"
                    ],
                    "required": false,
                    "example": "status"
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Sort pipelines",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false,
                    "example": "asc"
                },
                {
                    "in": "query",
                    "name": "source",
                    "type": "string",
                    "enum": [
                        "unknown",
                        "push",
                        "web",
                        "trigger",
                        "schedule",
                        "api",
                        "external",
                        "pipeline",
                        "chat",
                        "webide",
                        "merge_request_event",
                        "external_pull_request_event",
                        "parent_pipeline",
                        "ondemand_dast_scan",
                        "ondemand_dast_validation",
                        "security_orchestration_policy",
                        "container_registry_push",
                        "duo_workflow",
                        "pipeline_execution_policy_schedule"
                    ],
                    "required": false,
                    "example": "push"
                },
                {
                    "in": "query",
                    "name": "name",
                    "description": "Filter pipelines by name",
                    "type": "string",
                    "required": false,
                    "example": "Build pipeline"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get all Pipelines of the project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Ci_PipelineBasic"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.11.",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdPipelines"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipelines/latest",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or URL-encoded path",
                    "type": "string",
                    "required": true,
                    "example": 11
                },
                {
                    "in": "query",
                    "name": "ref",
                    "description": "Branch ref of pipeline. Uses project default branch if not specified.",
                    "type": "string",
                    "required": false,
                    "example": "develop"
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets the latest pipeline for the project branch",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_PipelineWithMetadata"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.3",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdPipelinesLatest"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipelines/{pipeline_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or URL-encoded path",
                    "type": "string",
                    "required": true,
                    "example": 11
                },
                {
                    "in": "path",
                    "name": "pipeline_id",
                    "description": "The pipeline ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 18
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a specific pipeline for the project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_PipelineWithMetadata"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.11",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdPipelinesPipelineId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipelines/{pipeline_id}/jobs",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or URL-encoded path",
                    "type": "string",
                    "required": true,
                    "example": 11
                },
                {
                    "in": "path",
                    "name": "pipeline_id",
                    "description": "The pipeline ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "query",
                    "name": "include_retried",
                    "description": "Includes retried jobs",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "scope",
                    "description": "The scope of builds to show",
                    "type": "string",
                    "enum": [
                        "created",
                        "waiting_for_resource",
                        "preparing",
                        "waiting_for_callback",
                        "pending",
                        "running",
                        "success",
                        "failed",
                        "canceling",
                        "canceled",
                        "skipped",
                        "manual",
                        "scheduled"
                    ],
                    "required": false,
                    "example": [
                        "pending",
                        "running"
                    ]
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get pipeline jobs",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Ci_Job"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get pipeline jobs",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdPipelinesPipelineIdJobs"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipelines/{pipeline_id}/bridges",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or URL-encoded path",
                    "type": "string",
                    "required": true,
                    "example": 11
                },
                {
                    "in": "path",
                    "name": "pipeline_id",
                    "description": "The pipeline ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "query",
                    "name": "scope",
                    "description": "The scope of builds to show",
                    "type": "string",
                    "enum": [
                        "created",
                        "waiting_for_resource",
                        "preparing",
                        "waiting_for_callback",
                        "pending",
                        "running",
                        "success",
                        "failed",
                        "canceling",
                        "canceled",
                        "skipped",
                        "manual",
                        "scheduled"
                    ],
                    "required": false,
                    "example": [
                        "pending",
                        "running"
                    ]
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get pipeline bridge jobs",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Ci_Bridge"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get pipeline bridge jobs",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdPipelinesPipelineIdBridges"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipelines/{pipeline_id}/variables",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or URL-encoded path",
                    "type": "string",
                    "required": true,
                    "example": 11
                },
                {
                    "in": "path",
                    "name": "pipeline_id",
                    "description": "The pipeline ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 18
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets the variables for a given pipeline",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Ci_Variable"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.11",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdPipelinesPipelineIdVariables"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipelines/{pipeline_id}/test_report",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or URL-encoded path",
                    "type": "string",
                    "required": true,
                    "example": 11
                },
                {
                    "in": "path",
                    "name": "pipeline_id",
                    "description": "The pipeline ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 18
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets the test report for a given pipeline",
                    "schema": {
                        "$ref": "#/definitions/TestReportEntity"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.0.",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdPipelinesPipelineIdTestReport"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipelines/{pipeline_id}/test_report_summary",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or URL-encoded path",
                    "type": "string",
                    "required": true,
                    "example": 11
                },
                {
                    "in": "path",
                    "name": "pipeline_id",
                    "description": "The pipeline ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 18
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets the test report summary for a given pipeline",
                    "schema": {
                        "$ref": "#/definitions/TestReportSummaryEntity"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.2",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdPipelinesPipelineIdTestReportSummary"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipeline_schedules",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "scope",
                    "description": "The scope of pipeline schedules",
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ],
                    "required": false,
                    "example": "active"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get all pipeline schedules",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Ci_PipelineSchedule"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get all pipeline schedules",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdPipelineSchedules"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipeline_schedules/{pipeline_schedule_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "path",
                    "name": "pipeline_schedule_id",
                    "description": "The pipeline schedule id",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 13
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single pipeline schedule",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_PipelineScheduleDetails"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single pipeline schedule",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdPipelineSchedulesPipelineScheduleId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipeline_schedules/{pipeline_schedule_id}/pipelines",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "path",
                    "name": "pipeline_schedule_id",
                    "description": "The pipeline schedule ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 13
                }
            ],
            "responses": {
                "200": {
                    "description": "Get all pipelines triggered from a pipeline schedule",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Ci_PipelineBasic"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get all pipelines triggered from a pipeline schedule",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdPipelines"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/triggers",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get trigger tokens list",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Trigger"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get trigger tokens list",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdTriggers"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/triggers/{trigger_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "path",
                    "name": "trigger_id",
                    "description": "The trigger token ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 10
                }
            ],
            "responses": {
                "200": {
                    "description": "Get specific trigger token of a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Trigger"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get specific trigger token of a project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdTriggersTriggerId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/variables",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a project or URL-encoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get project variables",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get project variables",
            "tags": [
                "ci_variables"
            ],
            "operationId": "getApiV4ProjectsIdVariables"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/variables/{key}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a project or URL-encoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of a variable",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "filter[environment_scope]",
                    "description": "The environment scope of a variable",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the details of a single variable from a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                },
                "404": {
                    "description": "Variable Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the details of a single variable from a project",
            "tags": [
                "ci_variables"
            ],
            "operationId": "getApiV4ProjectsIdVariablesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/cluster_agents/{agent_id}/tokens",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "agent_id",
                    "description": "The ID of an agent",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List tokens for an agent",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Clusters_AgentTokenBasic"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.0. Returns a list of tokens for an agent.",
            "tags": [
                "cluster_agents"
            ],
            "operationId": "getApiV4ProjectsIdClusterAgentsAgentIdTokens"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/cluster_agents/{agent_id}/tokens/{token_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "agent_id",
                    "description": "The ID of an agent",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "token_id",
                    "description": "The ID of the agent token",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single agent token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Clusters_AgentToken"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.0. Gets a single agent token.",
            "tags": [
                "cluster_agents"
            ],
            "operationId": "getApiV4ProjectsIdClusterAgentsAgentIdTokensTokenId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/cluster_agents",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List the agents for a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Clusters_Agent"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.10. Returns the list of agents registered for the project.",
            "tags": [
                "cluster_agents"
            ],
            "operationId": "getApiV4ProjectsIdClusterAgents"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/cluster_agents/{agent_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "agent_id",
                    "description": "The ID of an agent",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get details about an agent",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Clusters_Agent"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.10. Gets a single agent details.",
            "tags": [
                "cluster_agents"
            ],
            "operationId": "getApiV4ProjectsIdClusterAgentsAgentId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/cargo/config.json",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get config.json"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "This will be used by cargo for further requests",
            "tags": [
                "cargo_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesCargoConfigJson"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/commits",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "ref_name",
                    "description": "The name of a repository branch or tag, if not given the default branch is used",
                    "type": "string",
                    "required": false,
                    "example": "v1.1.0"
                },
                {
                    "in": "query",
                    "name": "since",
                    "description": "Only commits after or on this date will be returned",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2021-09-20T11:50:22.001"
                },
                {
                    "in": "query",
                    "name": "until",
                    "description": "Only commits before or on this date will be returned",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2021-09-20T11:50:22.001"
                },
                {
                    "in": "query",
                    "name": "path",
                    "description": "The file path",
                    "type": "string",
                    "required": false,
                    "example": "README.md"
                },
                {
                    "in": "query",
                    "name": "author",
                    "description": "Search commits by commit author",
                    "type": "string",
                    "required": false,
                    "example": "John Smith"
                },
                {
                    "in": "query",
                    "name": "all",
                    "description": "Every commit will be returned",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_stats",
                    "description": "Stats about each commit will be added to the response",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "first_parent",
                    "description": "Only include the first parent of merges",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "order",
                    "description": "List commits in order",
                    "type": "string",
                    "default": "default",
                    "enum": [
                        "default",
                        "topo"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "trailers",
                    "description": "Parse and include Git trailers for every commit",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a project repository commits",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Commit"
                        }
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a project repository commits",
            "tags": [
                "commits"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryCommits"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/commits/{sha}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "sha",
                    "description": "A commit sha, or the name of a branch or tag",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "stats",
                    "description": "Include commit stats",
                    "type": "boolean",
                    "default": true,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a specific commit of a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_CommitDetail"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a specific commit of a project",
            "tags": [
                "commits"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryCommitsSha"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/commits/{sha}/diff",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "sha",
                    "description": "A commit sha, or the name of a branch or tag",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "unidiff",
                    "description": "A diff in a Unified diff format",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the diff for a specific commit of a project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Diff"
                        }
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the diff for a specific commit of a project",
            "tags": [
                "commits"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryCommitsShaDiff"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/commits/{sha}/comments",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "sha",
                    "description": "A commit sha, or the name of a branch or tag",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a commit's comments",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_CommitNote"
                        }
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a commit's comments",
            "tags": [
                "commits"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryCommitsShaComments"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/commits/{sha}/sequence",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "sha",
                    "description": "A commit SHA",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "first_parent",
                    "description": "Only include the first parent of merges",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the sequence count of a commit SHA",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_CommitSequence"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the sequence count of a commit SHA",
            "tags": [
                "commits"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryCommitsShaSequence"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/commits/{sha}/refs",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "sha",
                    "description": "A commit sha",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "type",
                    "description": "Scope",
                    "type": "string",
                    "default": "all",
                    "enum": [
                        "branch",
                        "tag",
                        "all"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get all references a commit is pushed to",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_BasicRef"
                        }
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6",
            "tags": [
                "commits"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryCommitsShaRefs"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/commits/{sha}/merge_requests",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "sha",
                    "description": "A commit sha, or the name of a branch or tag on which to find Merge Requests",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get Merge Requests associated with a commit",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_MergeRequestBasic"
                        }
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get Merge Requests associated with a commit",
            "tags": [
                "commits"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryCommitsShaMergeRequests"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/commits/{sha}/signature",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "sha",
                    "description": "A commit sha, or the name of a branch or tag",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a commit's signature",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_CommitSignature"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a commit's signature",
            "tags": [
                "commits"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryCommitsShaSignature"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/commits/{sha}/statuses",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "sha",
                    "description": "Hash of the commit.",
                    "type": "string",
                    "required": true,
                    "example": "18f3e63d05582537db6d183d9d557be09e1f90c8"
                },
                {
                    "in": "query",
                    "name": "ref",
                    "description": "Name of the branch or tag. Default is the default branch.",
                    "type": "string",
                    "required": false,
                    "example": "develop"
                },
                {
                    "in": "query",
                    "name": "stage",
                    "description": "Filter statuses by build stage.",
                    "type": "string",
                    "required": false,
                    "example": "test"
                },
                {
                    "in": "query",
                    "name": "name",
                    "description": "Filter statuses by job name.",
                    "type": "string",
                    "required": false,
                    "example": "bundler:audit"
                },
                {
                    "in": "query",
                    "name": "pipeline_id",
                    "description": "Filter statuses by pipeline ID.",
                    "type": "integer",
                    "format": "int32",
                    "required": false,
                    "example": 1234
                },
                {
                    "in": "query",
                    "name": "all",
                    "description": "Include all statuses instead of latest only. Default is `false`.",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Values for sorting statuses. Valid values are `id` and `pipeline_id`. Default is `id`.",
                    "type": "string",
                    "default": "id",
                    "enum": [
                        "id",
                        "pipeline_id"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Sort statuses in ascending or descending order. Valid values are `asc` and `desc`. Default is `asc`.",
                    "type": "string",
                    "default": "asc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a commit's statuses",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_CommitStatus"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a commit's statuses",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryCommitsShaStatuses"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/composer/archives/*package_name",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "sha",
                    "description": "Shasum of current json",
                    "type": "string",
                    "required": true,
                    "example": "673594f85a55fe3c0eb45df7bd2fa9d95a1601ab"
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "The Composer package name",
                    "type": "string",
                    "required": true,
                    "example": "my-composer-package"
                }
            ],
            "responses": {
                "200": {
                    "description": "Composer package endpoint to download a package archive"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.1",
            "tags": [
                "composer_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesComposerArchives*packageName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/users/authenticate",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Authenticate user against conan CLI"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.2",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV1UsersAuthenticate"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/users/check_credentials",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Check for valid user credentials per conan CLI"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.4",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV1UsersCheckCredentials"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/conans/search",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "q",
                    "description": "Search query",
                    "type": "string",
                    "required": true,
                    "example": "Hello*"
                }
            ],
            "responses": {
                "200": {
                    "description": "Search for packages"
                },
                "400": {
                    "description": "Bad Request"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.4",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV1ConansSearch"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/ping",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Ping the Conan API"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.2",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV1Ping"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/packages/{conan_package_reference}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Conan package ID",
                    "type": "string",
                    "required": true,
                    "example": "103f6067a947f366ef91fc1b7da351c588d1827f"
                }
            ],
            "responses": {
                "200": {
                    "description": "Package Snapshot",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_PackageSnapshot"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelPackagesConanPackageReference"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                }
            ],
            "responses": {
                "200": {
                    "description": "Recipe Snapshot",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_RecipeSnapshot"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannel"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/packages/{conan_package_reference}/digest",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Conan package ID",
                    "type": "string",
                    "required": true,
                    "example": "103f6067a947f366ef91fc1b7da351c588d1827f"
                }
            ],
            "responses": {
                "200": {
                    "description": "Package Digest",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_PackageManifest"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelPackagesConanPackageReferenceDigest"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/digest",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                }
            ],
            "responses": {
                "200": {
                    "description": "Recipe Digest",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_RecipeManifest"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelDigest"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/packages/{conan_package_reference}/download_urls",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Conan package ID",
                    "type": "string",
                    "required": true,
                    "example": "103f6067a947f366ef91fc1b7da351c588d1827f"
                }
            ],
            "responses": {
                "200": {
                    "description": "Package Download Urls",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_PackageManifest"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelPackagesConanPackageReferenceDownloadUrls"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/download_urls",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                }
            ],
            "responses": {
                "200": {
                    "description": "Recipe Download Urls",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_RecipeManifest"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelDownloadUrls"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/export/{file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Conan Recipe Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conanfile.py"
                }
            ],
            "responses": {
                "200": {
                    "description": "Download recipe files"
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.6",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionExportFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/package/{conan_package_reference}/{package_revision}/{file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Conan Recipe Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Conan Package ID",
                    "type": "string",
                    "required": true,
                    "example": "103f6067a947f366ef91fc1b7da351c588d1827f"
                },
                {
                    "in": "path",
                    "name": "package_revision",
                    "description": "Conan Package Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conaninfo.txt"
                }
            ],
            "responses": {
                "200": {
                    "description": "Download package files"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionPackageConanPackageReferencePackageRevisionFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v2/users/authenticate",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Authenticate user against conan CLI"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.2",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV2UsersAuthenticate"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v2/users/check_credentials",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Check for valid user credentials per conan CLI"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.4",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV2UsersCheckCredentials"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v2/conans/search",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "q",
                    "description": "Search query",
                    "type": "string",
                    "required": true,
                    "example": "Hello*"
                }
            ],
            "responses": {
                "200": {
                    "description": "Search for packages"
                },
                "400": {
                    "description": "Bad Request"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.4",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV2ConansSearch"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v2/conans/{package_name}/{package_version}/{package_username}/{package_channel}/latest",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the latest recipe revision",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_Revision"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.11",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV2ConansPackageNamePackageVersionPackageUsernamePackageChannelLatest"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v2/conans/{package_name}/{package_version}/{package_username}/{package_channel}/revisions",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the list of revisions",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_RecipeRevisions"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.11",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV2ConansPackageNamePackageVersionPackageUsernamePackageChannelRevisions"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v2/conans/{package_name}/{package_version}/{package_username}/{package_channel}/revisions/{recipe_revision}/files",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Recipe revision",
                    "type": "string",
                    "required": true,
                    "example": "df28fd816be3a119de5ce4d374436b25"
                }
            ],
            "responses": {
                "200": {
                    "description": "List recipe files",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_FilesList"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.11",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV2ConansPackageNamePackageVersionPackageUsernamePackageChannelRevisionsRecipeRevisionFiles"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v2/conans/{package_name}/{package_version}/{package_username}/{package_channel}/revisions/{recipe_revision}/files/{file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Recipe revision",
                    "type": "string",
                    "required": true,
                    "example": "df28fd816be3a119de5ce4d374436b25"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conanfile.py"
                }
            ],
            "responses": {
                "200": {
                    "description": "Download recipe files"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.8",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV2ConansPackageNamePackageVersionPackageUsernamePackageChannelRevisionsRecipeRevisionFilesFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v2/conans/{package_name}/{package_version}/{package_username}/{package_channel}/revisions/{recipe_revision}/packages/{conan_package_reference}/latest",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Recipe revision",
                    "type": "string",
                    "required": true,
                    "example": "df28fd816be3a119de5ce4d374436b25"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Package reference",
                    "type": "string",
                    "required": true,
                    "example": "5ab84d6acfe1f23c4fae0ab88f26e3a396351ac9"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the latest package revision",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_Revision"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.11",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV2ConansPackageNamePackageVersionPackageUsernamePackageChannelRevisionsRecipeRevisionPackagesConanPackageReferenceLatest"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v2/conans/{package_name}/{package_version}/{package_username}/{package_channel}/revisions/{recipe_revision}/packages/{conan_package_reference}/revisions/{package_revision}/files",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Recipe revision",
                    "type": "string",
                    "required": true,
                    "example": "df28fd816be3a119de5ce4d374436b25"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Package reference",
                    "type": "string",
                    "required": true,
                    "example": "5ab84d6acfe1f23c4fae0ab88f26e3a396351ac9"
                },
                {
                    "in": "path",
                    "name": "package_revision",
                    "description": "Package revision",
                    "type": "string",
                    "required": true,
                    "example": "3bdd2d8c8e76c876ebd1ac0469a4e72c"
                }
            ],
            "responses": {
                "200": {
                    "description": "List package files",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_FilesList"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 18.0",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV2ConansPackageNamePackageVersionPackageUsernamePackageChannelRevisionsRecipeRevisionPackagesConanPackageReferenceRevisionsPackageRevisionFiles"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v2/conans/{package_name}/{package_version}/{package_username}/{package_channel}/revisions/{recipe_revision}/packages/{conan_package_reference}/revisions/{package_revision}/files/{file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Recipe revision",
                    "type": "string",
                    "required": true,
                    "example": "df28fd816be3a119de5ce4d374436b25"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Package reference",
                    "type": "string",
                    "required": true,
                    "example": "5ab84d6acfe1f23c4fae0ab88f26e3a396351ac9"
                },
                {
                    "in": "path",
                    "name": "package_revision",
                    "description": "Package revision",
                    "type": "string",
                    "required": true,
                    "example": "3bdd2d8c8e76c876ebd1ac0469a4e72c"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conaninfo.txt"
                }
            ],
            "responses": {
                "200": {
                    "description": "Download package files"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.11",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesConanV2ConansPackageNamePackageVersionPackageUsernamePackageChannelRevisionsRecipeRevisionPackagesConanPackageReferenceRevisionsPackageRevisionFilesFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/debian/dists/*distribution/Release.gpg",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                }
            ],
            "responses": {
                "200": {
                    "description": "The Release file signature"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.5",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesDebianDists*distributionReleaseGpg"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/debian/dists/*distribution/Release",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                }
            ],
            "responses": {
                "200": {
                    "description": "The unsigned Release file"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.5",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesDebianDists*distributionRelease"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/debian/dists/*distribution/InRelease",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                }
            ],
            "responses": {
                "200": {
                    "description": "The signed Release file"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.5",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesDebianDists*distributionInrelease"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/debian/dists/*distribution/{component}/debian-installer/binary-{architecture}/Packages",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                },
                {
                    "in": "path",
                    "name": "component",
                    "description": "The Debian Component",
                    "type": "string",
                    "required": true,
                    "example": "main"
                },
                {
                    "in": "path",
                    "name": "architecture",
                    "description": "The Debian Architecture",
                    "type": "string",
                    "required": true,
                    "example": "binary-amd64"
                }
            ],
            "responses": {
                "200": {
                    "description": "The installer (udeb) binary files index"
                },
                "202": {
                    "description": "The installer (udeb) binary files index"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.4",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesDebianDists*distributionComponentDebianInstallerBinaryArchitecturePackages"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/debian/dists/*distribution/{component}/debian-installer/binary-{architecture}/by-hash/SHA256/{file_sha256}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                },
                {
                    "in": "path",
                    "name": "component",
                    "description": "The Debian Component",
                    "type": "string",
                    "required": true,
                    "example": "main"
                },
                {
                    "in": "path",
                    "name": "architecture",
                    "description": "The Debian Architecture",
                    "type": "string",
                    "required": true,
                    "example": "binary-amd64"
                },
                {
                    "in": "path",
                    "name": "file_sha256",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The installer (udeb) binary files index by hash"
                },
                "202": {
                    "description": "The installer (udeb) binary files index by hash"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.4",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesDebianDists*distributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/debian/dists/*distribution/{component}/source/Sources",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                },
                {
                    "in": "path",
                    "name": "component",
                    "description": "The Debian Component",
                    "type": "string",
                    "required": true,
                    "example": "main"
                }
            ],
            "responses": {
                "200": {
                    "description": "The source files index"
                },
                "202": {
                    "description": "The source files index"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.4",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesDebianDists*distributionComponentSourceSources"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/debian/dists/*distribution/{component}/source/by-hash/SHA256/{file_sha256}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                },
                {
                    "in": "path",
                    "name": "component",
                    "description": "The Debian Component",
                    "type": "string",
                    "required": true,
                    "example": "main"
                },
                {
                    "in": "path",
                    "name": "file_sha256",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The source files index by hash"
                },
                "202": {
                    "description": "The source files index by hash"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.4",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesDebianDists*distributionComponentSourceByHashSha256FileSha256"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/debian/dists/*distribution/{component}/binary-{architecture}/Packages",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                },
                {
                    "in": "path",
                    "name": "component",
                    "description": "The Debian Component",
                    "type": "string",
                    "required": true,
                    "example": "main"
                },
                {
                    "in": "path",
                    "name": "architecture",
                    "description": "The Debian Architecture",
                    "type": "string",
                    "required": true,
                    "example": "binary-amd64"
                }
            ],
            "responses": {
                "200": {
                    "description": "The binary files index"
                },
                "202": {
                    "description": "The binary files index"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.5",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesDebianDists*distributionComponentBinary-ArchitecturePackages"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/debian/dists/*distribution/{component}/binary-{architecture}/by-hash/SHA256/{file_sha256}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                },
                {
                    "in": "path",
                    "name": "component",
                    "description": "The Debian Component",
                    "type": "string",
                    "required": true,
                    "example": "main"
                },
                {
                    "in": "path",
                    "name": "architecture",
                    "description": "The Debian Architecture",
                    "type": "string",
                    "required": true,
                    "example": "binary-amd64"
                },
                {
                    "in": "path",
                    "name": "file_sha256",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The binary files index by hash"
                },
                "202": {
                    "description": "The binary files index by hash"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.4",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesDebianDists*distributionComponentBinaryArchitectureByHashSha256FileSha256"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/debian/pool/{distribution}/{letter}/{package_name}/{package_version}/{file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "distribution",
                    "description": "The Debian Codename or Suite",
                    "type": "string",
                    "required": true,
                    "example": "my-distro"
                },
                {
                    "in": "path",
                    "name": "letter",
                    "description": "The Debian Classification (first-letter or lib-first-letter)",
                    "type": "string",
                    "required": true,
                    "example": "a"
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "The Debian Source Package Name",
                    "type": "string",
                    "required": true,
                    "example": "my-pkg"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "The Debian Source Package Version",
                    "type": "string",
                    "required": true,
                    "example": "1.0.0"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "The Debian File Name",
                    "type": "string",
                    "required": true,
                    "example": "example_1.0.0~alpha2_amd64.deb"
                }
            ],
            "responses": {
                "200": {
                    "description": "Download Debian package"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.2",
            "tags": [
                "debian_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesDebianPoolDistributionLetterPackageNamePackageVersionFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deploy_keys",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List deploy keys for project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_DeployKeysProject"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of a project's deploy keys.",
            "tags": [
                "deploy_keys"
            ],
            "operationId": "getApiV4ProjectsIdDeployKeys"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deploy_keys/{key_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key_id",
                    "description": "The ID of the deploy key",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single deploy key",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DeployKeysProject"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single key.",
            "tags": [
                "deploy_keys"
            ],
            "operationId": "getApiV4ProjectsIdDeployKeysKeyId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deploy_tokens",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "active",
                    "description": "Limit by active status",
                    "type": "boolean",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List project deploy tokens",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_DeployToken"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of a project's deploy tokens. This feature was introduced in GitLab 12.9.",
            "tags": [
                "deploy_tokens"
            ],
            "operationId": "getApiV4ProjectsIdDeployTokens"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deploy_tokens/{token_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "token_id",
                    "description": "The ID of the deploy token",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a project deploy token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DeployToken"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single project's deploy token by ID. This feature was introduced in GitLab 14.9.",
            "tags": [
                "deploy_tokens"
            ],
            "operationId": "getApiV4ProjectsIdDeployTokensTokenId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deployments",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Return deployments ordered by either one of `id`, `iid`, `created_at`, `updated_at` or `ref` fields. Default is `id`",
                    "type": "string",
                    "default": "id",
                    "enum": [
                        "id",
                        "iid",
                        "created_at",
                        "updated_at",
                        "finished_at"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return deployments sorted in `asc` or `desc` order. Default is `asc`",
                    "type": "string",
                    "default": "asc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "updated_after",
                    "description": "Return deployments updated after the specified date. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`)",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "updated_before",
                    "description": "Return deployments updated before the specified date. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`)",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "finished_after",
                    "description": "Return deployments finished after the specified date. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`)",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "finished_before",
                    "description": "Return deployments finished before the specified date. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`)",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "environment",
                    "description": "The name of the environment to filter deployments by",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "status",
                    "description": "The status to filter deployments by. One of `created`, `running`, `success`, `failed`, `canceled`, or `blocked`",
                    "type": "string",
                    "enum": [
                        "created",
                        "running",
                        "success",
                        "failed",
                        "canceled",
                        "skipped",
                        "blocked"
                    ],
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List project deployments",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Deployment"
                        }
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of deployments in a project. This feature was introduced in GitLab 8.11.",
            "tags": [
                "deployments"
            ],
            "operationId": "getApiV4ProjectsIdDeployments"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deployments/{deployment_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "deployment_id",
                    "description": "The ID of the deployment",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a specific deployment",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DeploymentExtended"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.11.",
            "tags": [
                "deployments"
            ],
            "operationId": "getApiV4ProjectsIdDeploymentsDeploymentId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deployments/{deployment_id}/merge_requests",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "deployment_id",
                    "description": "The ID of the deployment",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "author_id",
                    "description": "Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "author_username",
                    "description": "Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "assignee_id",
                    "description": "Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "assignee_username",
                    "description": "Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "reviewer_username",
                    "description": "Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "labels",
                    "description": "Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "milestone",
                    "description": "Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "my_reaction_emoji",
                    "description": "Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "reviewer_id",
                    "description": "Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "state",
                    "description": "Returns `all` merge requests or just those that are `opened`, `closed`, `locked`, or `merged`.",
                    "type": "string",
                    "default": "all",
                    "enum": [
                        "opened",
                        "closed",
                        "locked",
                        "merged",
                        "all"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Returns merge requests ordered by `created_at`, `label_priority`, `milestone_due`, `popularity`, `priority`, `title`, `updated_at` or `merged_at` fields. Introduced in GitLab 14.8.",
                    "type": "string",
                    "default": "created_at",
                    "enum": [
                        "created_at",
                        "label_priority",
                        "milestone_due",
                        "popularity",
                        "priority",
                        "title",
                        "updated_at",
                        "merged_at"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Returns merge requests sorted in `asc` or `desc` order.",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_labels_details",
                    "description": "If `true`, response returns more details for each label in labels field: `:name`,`:color`, `:description`, `:description_html`, `:text_color`",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_merge_status_recheck",
                    "description": "If `true`, this projection requests (but does not guarantee) that the `merge_status` field be recalculated asynchronously. Introduced in GitLab 13.0.",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "created_after",
                    "description": "Returns merge requests created on or after the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "created_before",
                    "description": "Returns merge requests created on or before the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "updated_after",
                    "description": "Returns merge requests updated on or after the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "updated_before",
                    "description": "Returns merge requests updated on or before the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "view",
                    "description": "If simple, returns the `iid`, URL, title, description, and basic state of merge request",
                    "type": "string",
                    "enum": [
                        "simple"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "scope",
                    "description": "Returns merge requests for the given scope: `created_by_me`, `assigned_to_me` or `all`",
                    "type": "string",
                    "enum": [
                        "created-by-me",
                        "assigned-to-me",
                        "created_by_me",
                        "assigned_to_me",
                        "all"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "source_branch",
                    "description": "Returns merge requests with the given source branch",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "source_project_id",
                    "description": "Returns merge requests with the given source project id",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "target_branch",
                    "description": "Returns merge requests with the given target branch",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Search merge requests against their `title` and `description`.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "in",
                    "description": "Modify the scope of the search attribute. `title`, `description`, or a string joining them with comma.",
                    "type": "string",
                    "required": false,
                    "example": "title,description"
                },
                {
                    "in": "query",
                    "name": "wip",
                    "description": "Filter merge requests against their `wip` status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.",
                    "type": "string",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[author_id]",
                    "description": "`<Negated>` Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[author_username]",
                    "description": "`<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[assignee_id]",
                    "description": "`<Negated>` Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[assignee_username]",
                    "description": "`<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[reviewer_username]",
                    "description": "`<Negated>` Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[labels]",
                    "description": "`<Negated>` Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[milestone]",
                    "description": "`<Negated>` Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[my_reaction_emoji]",
                    "description": "`<Negated>` Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[reviewer_id]",
                    "description": "`<Negated>` Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "deployed_before",
                    "description": "Returns merge requests deployed before the given date/time. Expected in ISO 8601 format.",
                    "type": "string",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "deployed_after",
                    "description": "Returns merge requests deployed after the given date/time. Expected in ISO 8601 format",
                    "type": "string",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "environment",
                    "description": "Returns merge requests deployed to the given environment",
                    "type": "string",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "approved",
                    "description": "Filters merge requests by their `approved` status. `yes` returns only approved merge requests. `no` returns only non-approved merge requests.",
                    "type": "string",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "merge_user_id",
                    "description": "Returns merge requests which have been merged by the user with the given user `id`. Mutually exclusive with `merge_user_username`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "merge_user_username",
                    "description": "Returns merge requests which have been merged by the user with the given `username`. Mutually exclusive with `merge_user_id`.",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List of merge requests associated with a deployment",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_MergeRequestBasic"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Retrieves the list of merge requests shipped with a given deployment. This feature was introduced in GitLab 12.7.",
            "tags": [
                "deployments"
            ],
            "operationId": "getApiV4ProjectsIdDeploymentsDeploymentIdMergeRequests"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/draft_notes",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The ID of a merge request",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of merge request draft notes",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_DraftNote"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of merge request draft notes",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotes"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/draft_notes/{draft_note_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The ID of a merge request",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "draft_note_id",
                    "description": "The ID of a draft note",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single draft note",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DraftNote"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single draft note",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotesDraftNoteId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/environments",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "name",
                    "description": "Return the environment with this name. Mutually exclusive with search",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "states",
                    "description": "List all environments that match a specific state. Accepted values: `available`, `stopping`, or `stopped`. If no state value given, returns all environments",
                    "type": "string",
                    "enum": [
                        "stopped",
                        "stopping",
                        "available"
                    ],
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List environments",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Environment"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get all environments for a given project. This feature was introduced in GitLab 8.11.",
            "tags": [
                "environments"
            ],
            "operationId": "getApiV4ProjectsIdEnvironments"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/environments/{environment_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "environment_id",
                    "description": "The ID of the environment",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a specific environment",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Environment"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a specific environment",
            "tags": [
                "environments"
            ],
            "operationId": "getApiV4ProjectsIdEnvironmentsEnvironmentId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/error_tracking/client_keys",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "List project client keys",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_ErrorTracking_ClientKey"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "List all client keys. This feature was introduced in GitLab 14.3.",
            "tags": [
                "error_tracking_client_keys"
            ],
            "operationId": "getApiV4ProjectsIdErrorTrackingClientKeys"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/error_tracking/settings",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get Error Tracking settings",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ErrorTracking_ProjectSetting"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get error tracking settings for the project. This feature was introduced in GitLab 12.7.",
            "tags": [
                "error_tracking_project_settings"
            ],
            "operationId": "getApiV4ProjectsIdErrorTrackingSettings"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/feature_flags",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "scope",
                    "description": "The scope of feature flags, one of: `enabled`, `disabled`",
                    "type": "string",
                    "enum": [
                        "enabled",
                        "disabled"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List feature flags for a project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_FeatureFlag"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Gets all feature flags of the requested project. This feature was introduced in GitLab 12.5.",
            "tags": [
                "feature_flags"
            ],
            "operationId": "getApiV4ProjectsIdFeatureFlags"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/feature_flags/{feature_flag_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "feature_flag_name",
                    "description": "The name of the feature flag",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single feature flag",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_FeatureFlag"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Gets a single feature flag. This feature was introduced in GitLab 12.5.",
            "tags": [
                "feature_flags"
            ],
            "operationId": "getApiV4ProjectsIdFeatureFlagsFeatureFlagName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/feature_flags_user_lists",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return user lists matching the search criteria",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List all feature flag user lists for a project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_FeatureFlag_UserList"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Gets all feature flag user lists for the requested project. This feature was introduced in GitLab 12.10.",
            "tags": [
                "feature_flags_user_lists"
            ],
            "operationId": "getApiV4ProjectsIdFeatureFlagsUserLists"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/feature_flags_user_lists/{iid}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "iid",
                    "description": "The internal ID of the project's feature flag user list",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a feature flag user list",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_FeatureFlag_UserList"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Gets a feature flag user list. This feature was introduced in GitLab 12.10.",
            "tags": [
                "feature_flags_user_lists"
            ],
            "operationId": "getApiV4ProjectsIdFeatureFlagsUserListsIid"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/files/{file_path}/blame",
            "method": "head",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true,
                    "example": "gitlab-org/gitlab"
                },
                {
                    "in": "path",
                    "name": "file_path",
                    "description": "The url encoded path to the file.",
                    "type": "string",
                    "required": true,
                    "example": "lib%2Fclass%2Erb"
                },
                {
                    "in": "query",
                    "name": "ref",
                    "description": "The name of branch, tag or commit",
                    "type": "string",
                    "required": true,
                    "example": "main"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get blame file metadata from repository"
                }
            },
            "request_body_parameters": {},
            "description": "Get blame file metadata from repository",
            "tags": [
                "projects"
            ],
            "operationId": "headApiV4ProjectsIdRepositoryFilesFilePathBlame"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/files/{file_path}/blame",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true,
                    "example": "gitlab-org/gitlab"
                },
                {
                    "in": "path",
                    "name": "file_path",
                    "description": "The url encoded path to the file.",
                    "type": "string",
                    "required": true,
                    "example": "lib%2Fclass%2Erb"
                },
                {
                    "in": "query",
                    "name": "ref",
                    "description": "The name of branch, tag or commit",
                    "type": "string",
                    "required": true,
                    "example": "main"
                },
                {
                    "in": "query",
                    "name": "range[start]",
                    "description": "The first line of the range to blame",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "range[end]",
                    "description": "The last line of the range to blame",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get blame file from the repository"
                }
            },
            "request_body_parameters": {},
            "description": "Get blame file from the repository",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryFilesFilePathBlame"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/files/{file_path}/raw",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true,
                    "example": "gitlab-org/gitlab"
                },
                {
                    "in": "path",
                    "name": "file_path",
                    "description": "The url encoded path to the file.",
                    "type": "string",
                    "required": true,
                    "example": "lib%2Fclass%2Erb"
                },
                {
                    "in": "query",
                    "name": "ref",
                    "description": "The name of branch, tag or commit",
                    "type": "string",
                    "required": false,
                    "example": "main"
                },
                {
                    "in": "query",
                    "name": "lfs",
                    "description": "Retrieve binary data for a file that is an lfs pointer",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get raw file contents from the repository",
                    "schema": {
                        "type": "file"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get raw file contents from the repository",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryFilesFilePathRaw"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/files/{file_path}",
            "method": "head",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true,
                    "example": "gitlab-org/gitlab"
                },
                {
                    "in": "path",
                    "name": "file_path",
                    "description": "The url encoded path to the file.",
                    "type": "string",
                    "required": true,
                    "example": "lib%2Fclass%2Erb"
                },
                {
                    "in": "query",
                    "name": "ref",
                    "description": "The name of branch, tag or commit",
                    "type": "string",
                    "required": true,
                    "example": "main"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get file metadata from repository"
                }
            },
            "request_body_parameters": {},
            "description": "Get file metadata from repository",
            "tags": [
                "projects"
            ],
            "operationId": "headApiV4ProjectsIdRepositoryFilesFilePath"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/files/{file_path}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true,
                    "example": "gitlab-org/gitlab"
                },
                {
                    "in": "path",
                    "name": "file_path",
                    "description": "The url encoded path to the file.",
                    "type": "string",
                    "required": true,
                    "example": "lib%2Fclass%2Erb"
                },
                {
                    "in": "query",
                    "name": "ref",
                    "description": "The name of branch, tag or commit",
                    "type": "string",
                    "required": true,
                    "example": "main"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a file from the repository"
                }
            },
            "request_body_parameters": {},
            "description": "Get a file from the repository",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryFilesFilePath"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/freeze_periods",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List freeze periods",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_FreezePeriod"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Paginated list of Freeze Periods, sorted by created_at in ascending order. This feature was introduced in GitLab 13.0.",
            "tags": [
                "freeze_periods"
            ],
            "operationId": "getApiV4ProjectsIdFreezePeriods"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/freeze_periods/{freeze_period_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "freeze_period_id",
                    "description": "The ID of the freeze period",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a freeze period",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_FreezePeriod"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a freeze period for the given `freeze_period_id`. This feature was introduced in GitLab 13.0.",
            "tags": [
                "freeze_periods"
            ],
            "operationId": "getApiV4ProjectsIdFreezePeriodsFreezePeriodId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/generic/{package_name}/*package_version/(*path/){file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "path",
                    "description": "File directory path",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download package file"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.5",
            "tags": [
                "generic_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesGenericPackageName*packageVersion(*path)FileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/go/*module_name/@v/list",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or full path of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "module_name",
                    "description": "The name of the Go module",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "List"
                }
            },
            "request_body_parameters": {},
            "description": "Get all tagged versions for a given Go module.See `go help goproxy`, GET $GOPROXY/<module>/@v/list. This feature was introduced in GitLab 13.1.",
            "tags": [
                "go_proxy"
            ],
            "operationId": "getApiV4ProjectsIdPackagesGo*moduleName@vList"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/go/*module_name/@v/{module_version}.info",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or full path of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "module_name",
                    "description": "The name of the Go module",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_version",
                    "description": "The version of the Go module",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Version metadata",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_GoModuleVersion"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get all tagged versions for a given Go module.See `go help goproxy`, GET $GOPROXY/<module>/@v/<version>.info. This feature was introduced in GitLab 13.1",
            "tags": [
                "go_proxy"
            ],
            "operationId": "getApiV4ProjectsIdPackagesGo*moduleName@vModuleVersionInfo"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/go/*module_name/@v/{module_version}.mod",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or full path of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "module_name",
                    "description": "The name of the Go module",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_version",
                    "description": "The version of the Go module",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download module file"
                }
            },
            "request_body_parameters": {},
            "description": "Get the module file of a given module version.See `go help goproxy`, GET $GOPROXY/<module>/@v/<version>.mod. This feature was introduced in GitLab 13.1.",
            "tags": [
                "go_proxy"
            ],
            "operationId": "getApiV4ProjectsIdPackagesGo*moduleName@vModuleVersionMod"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/go/*module_name/@v/{module_version}.zip",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or full path of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "module_name",
                    "description": "The name of the Go module",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_version",
                    "description": "The version of the Go module",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download module source"
                }
            },
            "request_body_parameters": {},
            "description": "Get a zip of the source of the given module version.See `go help goproxy`, GET $GOPROXY/<module>/@v/<version>.zip. This feature was introduced in GitLab 13.1.",
            "tags": [
                "go_proxy"
            ],
            "operationId": "getApiV4ProjectsIdPackagesGo*moduleName@vModuleVersionZip"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/helm/{channel}/index.yaml",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or full path of a project",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "channel",
                    "description": "Helm channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                }
            ],
            "responses": {
                "200": {
                    "description": "Download a chart index"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.0",
            "tags": [
                "helm_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesHelmChannelIndexYaml"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/helm/{channel}/charts/{file_name}.tgz",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or full path of a project",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "channel",
                    "description": "Helm channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Helm package file name",
                    "type": "string",
                    "required": true,
                    "example": "mychart"
                }
            ],
            "responses": {
                "200": {
                    "description": "Download a chart"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.0",
            "tags": [
                "helm_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesHelmChannelChartsFileNameTgz"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "List all active integrations",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_IntegrationBasic"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all active integrations.",
            "tags": [
                "integrations"
            ],
            "operationId": "getApiV4ProjectsIdServices"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/{slug}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "slug",
                    "description": "The name of the integration",
                    "type": "string",
                    "enum": [
                        "apple-app-store",
                        "asana",
                        "assembla",
                        "bamboo",
                        "bugzilla",
                        "buildkite",
                        "campfire",
                        "confluence",
                        "custom-issue-tracker",
                        "datadog",
                        "diffblue-cover",
                        "discord",
                        "drone-ci",
                        "emails-on-push",
                        "external-wiki",
                        "gitlab-slack-application",
                        "google-play",
                        "hangouts-chat",
                        "harbor",
                        "irker",
                        "jenkins",
                        "jira",
                        "jira-cloud-app",
                        "matrix",
                        "mattermost-slash-commands",
                        "slack-slash-commands",
                        "packagist",
                        "phorge",
                        "pipelines-email",
                        "pivotaltracker",
                        "pumble",
                        "pushover",
                        "redmine",
                        "ewm",
                        "youtrack",
                        "clickup",
                        "slack",
                        "microsoft-teams",
                        "mattermost",
                        "teamcity",
                        "telegram",
                        "unify-circuit",
                        "webex-teams",
                        "zentao",
                        "squash-tm",
                        "github",
                        "git-guardian",
                        "google-cloud-platform-artifact-registry",
                        "google-cloud-platform-workload-identity-federation",
                        "mock-ci",
                        "mock-monitoring"
                    ],
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get an integration settings",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Integration"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the integration settings.",
            "tags": [
                "integrations"
            ],
            "operationId": "getApiV4ProjectsIdServicesSlug"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "List all active integrations",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_IntegrationBasic"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all active integrations.",
            "tags": [
                "integrations"
            ],
            "operationId": "getApiV4ProjectsIdIntegrations"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/{slug}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "slug",
                    "description": "The name of the integration",
                    "type": "string",
                    "enum": [
                        "apple-app-store",
                        "asana",
                        "assembla",
                        "bamboo",
                        "bugzilla",
                        "buildkite",
                        "campfire",
                        "confluence",
                        "custom-issue-tracker",
                        "datadog",
                        "diffblue-cover",
                        "discord",
                        "drone-ci",
                        "emails-on-push",
                        "external-wiki",
                        "gitlab-slack-application",
                        "google-play",
                        "hangouts-chat",
                        "harbor",
                        "irker",
                        "jenkins",
                        "jira",
                        "jira-cloud-app",
                        "matrix",
                        "mattermost-slash-commands",
                        "slack-slash-commands",
                        "packagist",
                        "phorge",
                        "pipelines-email",
                        "pivotaltracker",
                        "pumble",
                        "pushover",
                        "redmine",
                        "ewm",
                        "youtrack",
                        "clickup",
                        "slack",
                        "microsoft-teams",
                        "mattermost",
                        "teamcity",
                        "telegram",
                        "unify-circuit",
                        "webex-teams",
                        "zentao",
                        "squash-tm",
                        "github",
                        "git-guardian",
                        "google-cloud-platform-artifact-registry",
                        "google-cloud-platform-workload-identity-federation",
                        "mock-ci",
                        "mock-monitoring"
                    ],
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get an integration settings",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Integration"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the integration settings.",
            "tags": [
                "integrations"
            ],
            "operationId": "getApiV4ProjectsIdIntegrationsSlug"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/invitations",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "query",
                    "description": "A query string to search for members",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of group or project invitations viewable by the authenticated user",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Invitation"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.6",
            "tags": [
                "invitations"
            ],
            "operationId": "getApiV4ProjectsIdInvitations"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/issues/{issue_iid}/links",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "issue_iid",
                    "description": "The internal ID of a project\u2019s issue",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "List issue relations",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_RelatedIssue"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of a given issue\u2019s linked issues, sorted by the relationship creation datetime (ascending).Issues are filtered according to the user authorizations.",
            "tags": [
                "issue_links"
            ],
            "operationId": "getApiV4ProjectsIdIssuesIssueIidLinks"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/issues/{issue_iid}/links/{issue_link_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "issue_iid",
                    "description": "The internal ID of a project\u2019s issue",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "issue_link_id",
                    "description": "ID of an issue relationship",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get an issue link",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IssueLink"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Gets details about an issue link. This feature was introduced in GitLab 15.1.",
            "tags": [
                "issue_links"
            ],
            "operationId": "getApiV4ProjectsIdIssuesIssueIidLinksIssueLinkId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/ci/lint",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "sha",
                    "description": "Deprecated: Use content_ref instead",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "content_ref",
                    "description": "The CI/CD configuration content is taken from this commit SHA, branch or tag. Defaults to the HEAD of the project's default branch",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "dry_run",
                    "description": "Run pipeline creation simulation, or only do static check. This is false by default",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_jobs",
                    "description": "If the list of jobs that would exist in a static check or pipeline\n        simulation should be included in the response. This is false by default",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "ref",
                    "description": "Deprecated: Use dry_run_ref instead",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "dry_run_ref",
                    "description": "Branch or tag used as context when executing a dry run. Defaults to the default branch of the project. Only used when dry_run is true",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Validates a CI YAML configuration with a namespace",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Lint_Result"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Checks if a project\u2019s .gitlab-ci.yml configuration in a given commit (by default HEAD of the\n        project\u2019s default branch) is valid",
            "tags": [
                "ci_lint"
            ],
            "operationId": "getApiV4ProjectsIdCiLint"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/uploads",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the list of uploads of a project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_MarkdownUploadAdmin"
                        }
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the list of uploads of a project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdUploads"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/uploads/{upload_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "upload_id",
                    "description": "The ID of a project upload",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download a single project upload by ID",
                    "schema": {
                        "type": "file"
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Download a single project upload by ID",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdUploadsUploadId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/uploads/{secret}/{filename}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "secret",
                    "description": "The 32-character secret of a project upload",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "filename",
                    "description": "The filename of a project upload",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download a single project upload by secret and filename",
                    "schema": {
                        "type": "file"
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Download a single project upload by secret and filename",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdUploadsSecretFilename"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/maven/*path/{file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "path",
                    "description": "Package path",
                    "type": "string",
                    "required": true,
                    "example": "foo/bar/mypkg/1.0-SNAPSHOT"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "required": true,
                    "example": "mypkg-1.0-SNAPSHOT.jar"
                }
            ],
            "responses": {
                "200": {
                    "description": "Download the maven package file at a project level"
                },
                "302": {
                    "description": "Download the maven package file at a project level"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.3",
            "tags": [
                "maven_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesMaven*pathFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/members",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "query",
                    "description": "A query string to search for members",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "user_ids",
                    "description": "Array of user ids to look up for membership",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "skip_users",
                    "description": "Array of user ids to be skipped for membership",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "show_seat_info",
                    "description": "Show seat information for members",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_saml_identity",
                    "description": "List only members with linked SAML identity",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a list of group or project members viewable by the authenticated user.",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Member"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Gets a list of group or project members viewable by the authenticated user.",
            "tags": [
                "members"
            ],
            "operationId": "getApiV4ProjectsIdMembers"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/members/all",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "query",
                    "description": "A query string to search for members",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "user_ids",
                    "description": "Array of user ids to look up for membership",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "show_seat_info",
                    "description": "Show seat information for members",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "state",
                    "description": "Filter results by member state",
                    "type": "string",
                    "enum": [
                        "awaiting",
                        "active"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a list of group or project members viewable by the authenticated user, including those who gained membership through ancestor group.",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Member"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Gets a list of group or project members viewable by the authenticated user, including those who gained membership through ancestor group.",
            "tags": [
                "members"
            ],
            "operationId": "getApiV4ProjectsIdMembersAll"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/members/{user_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the member",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a member of a group or project.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Member"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Gets a member of a group or project.",
            "tags": [
                "members"
            ],
            "operationId": "getApiV4ProjectsIdMembersUserId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/members/all/{user_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the member",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Gets a member of a group or project, including those who gained membership through ancestor group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Member"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Gets a member of a group or project, including those who gained membership through ancestor group",
            "tags": [
                "members"
            ],
            "operationId": "getApiV4ProjectsIdMembersAllUserId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/approvals",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "List approvals for merge request",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MergeRequestApprovals"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "List approvals for merge request",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidApprovals"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/approval_state",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The IID of a merge request",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get approval state of merge request",
                    "schema": {
                        "$ref": "#/definitions/EE_API_Entities_MergeRequestApprovalState"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get approval state of merge request",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidApprovalState"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/time_stats",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The internal ID of the merge_request",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get time tracking stats",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IssuableTimeStats"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get time tracking stats",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidTimeStats"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "author_id",
                    "description": "Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "author_username",
                    "description": "Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "assignee_id",
                    "description": "Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "assignee_username",
                    "description": "Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "reviewer_username",
                    "description": "Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "labels",
                    "description": "Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "milestone",
                    "description": "Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "my_reaction_emoji",
                    "description": "Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "reviewer_id",
                    "description": "Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "state",
                    "description": "Returns `all` merge requests or just those that are `opened`, `closed`, `locked`, or `merged`.",
                    "type": "string",
                    "default": "all",
                    "enum": [
                        "opened",
                        "closed",
                        "locked",
                        "merged",
                        "all"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Returns merge requests ordered by `created_at`, `label_priority`, `milestone_due`, `popularity`, `priority`, `title`, `updated_at` or `merged_at` fields. Introduced in GitLab 14.8.",
                    "type": "string",
                    "default": "created_at",
                    "enum": [
                        "created_at",
                        "label_priority",
                        "milestone_due",
                        "popularity",
                        "priority",
                        "title",
                        "updated_at",
                        "merged_at"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Returns merge requests sorted in `asc` or `desc` order.",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_labels_details",
                    "description": "If `true`, response returns more details for each label in labels field: `:name`,`:color`, `:description`, `:description_html`, `:text_color`",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_merge_status_recheck",
                    "description": "If `true`, this projection requests (but does not guarantee) that the `merge_status` field be recalculated asynchronously. Introduced in GitLab 13.0.",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "created_after",
                    "description": "Returns merge requests created on or after the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "created_before",
                    "description": "Returns merge requests created on or before the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "updated_after",
                    "description": "Returns merge requests updated on or after the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "updated_before",
                    "description": "Returns merge requests updated on or before the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "view",
                    "description": "If simple, returns the `iid`, URL, title, description, and basic state of merge request",
                    "type": "string",
                    "enum": [
                        "simple"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "scope",
                    "description": "Returns merge requests for the given scope: `created_by_me`, `assigned_to_me` or `all`",
                    "type": "string",
                    "enum": [
                        "created-by-me",
                        "assigned-to-me",
                        "created_by_me",
                        "assigned_to_me",
                        "all"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "source_branch",
                    "description": "Returns merge requests with the given source branch",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "source_project_id",
                    "description": "Returns merge requests with the given source project id",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "target_branch",
                    "description": "Returns merge requests with the given target branch",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Search merge requests against their `title` and `description`.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "in",
                    "description": "Modify the scope of the search attribute. `title`, `description`, or a string joining them with comma.",
                    "type": "string",
                    "required": false,
                    "example": "title,description"
                },
                {
                    "in": "query",
                    "name": "wip",
                    "description": "Filter merge requests against their `wip` status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.",
                    "type": "string",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[author_id]",
                    "description": "`<Negated>` Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[author_username]",
                    "description": "`<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[assignee_id]",
                    "description": "`<Negated>` Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[assignee_username]",
                    "description": "`<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[reviewer_username]",
                    "description": "`<Negated>` Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[labels]",
                    "description": "`<Negated>` Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[milestone]",
                    "description": "`<Negated>` Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[my_reaction_emoji]",
                    "description": "`<Negated>` Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[reviewer_id]",
                    "description": "`<Negated>` Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "deployed_before",
                    "description": "Returns merge requests deployed before the given date/time. Expected in ISO 8601 format.",
                    "type": "string",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "deployed_after",
                    "description": "Returns merge requests deployed after the given date/time. Expected in ISO 8601 format",
                    "type": "string",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "environment",
                    "description": "Returns merge requests deployed to the given environment",
                    "type": "string",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "approved",
                    "description": "Filters merge requests by their `approved` status. `yes` returns only approved merge requests. `no` returns only non-approved merge requests.",
                    "type": "string",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "merge_user_id",
                    "description": "Returns merge requests which have been merged by the user with the given user `id`. Mutually exclusive with `merge_user_username`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "merge_user_username",
                    "description": "Returns merge requests which have been merged by the user with the given `username`. Mutually exclusive with `merge_user_id`.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "approver_ids",
                    "description": "Return merge requests which have specified the users with the given IDs as an individual approver",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "approved_by_ids",
                    "description": "Return merge requests which have been approved by the specified users with the given IDs",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "approved_by_usernames",
                    "description": "Return merge requests which have been approved by the specified users with the given\n            usernames",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "iids",
                    "description": "Returns the request having the given `iid`.",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List project merge requests",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MergeRequestBasic"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Get all merge requests for this project.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequests"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The internal ID of the merge request.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "render_html",
                    "description": "If `true`, response includes rendered HTML for title and description.",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_diverged_commits_count",
                    "description": "If `true`, response includes the commits behind the target branch.",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_rebase_in_progress",
                    "description": "If `true`, response includes whether a rebase operation is in progress.",
                    "type": "boolean",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get single merge request",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MergeRequest"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Shows information about a single merge request. Note: the `changes_count` value in the response is a string, not an integer. This is because when an merge request has too many changes to display and store, it is capped at 1,000. In that case, the API returns the string `\"1000+\"` for the changes count.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIid"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/participants",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get single merge request participants",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_UserBasic"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of merge request participants.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidParticipants"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/reviewers",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get single merge request reviewers",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MergeRequestReviewer"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of merge request reviewers.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidReviewers"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/commits",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get single merge request commits",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Commit"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of merge request commits.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidCommits"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/context_commits",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "List merge request context commits",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Commit"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of merge request context commits.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidContextCommits"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/changes",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "unidiff",
                    "description": "A diff in a Unified diff format",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get single merge request changes",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MergeRequestChanges"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Shows information about the merge request including its files and changes.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidChanges"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/diffs",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "unidiff",
                    "description": "A diff in a Unified diff format",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the merge request diffs",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Diff"
                    }
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of merge request diffs.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidDiffs"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/raw_diffs",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the merge request raw diffs"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the raw diffs of a merge request that can used programmatically.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidRawDiffs"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/pipelines",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get single merge request pipelines",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_PipelineBasic"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of merge request pipelines.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidPipelines"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/merge_ref",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Returns the up to date merge-ref HEAD commit"
                },
                "400": {
                    "description": "Bad request"
                }
            },
            "request_body_parameters": {},
            "description": "Returns the up to date merge-ref HEAD commit",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidMergeRef"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/closes_issues",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "List issues that close on merge",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MRNote"
                    }
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get all the issues that would be closed by merging the provided merge request.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidClosesIssues"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/related_issues",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "List issues related to merge request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get all the related issues from title, description, commits, comments and discussions of the merge request.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidRelatedIssues"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/versions",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The internal ID of the merge request",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of merge request diff versions",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_MergeRequestDiff"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.12.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidVersions"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/versions/{version_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The internal ID of the merge request",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "version_id",
                    "description": "The ID of the merge request diff version",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "unidiff",
                    "description": "A diff in a Unified diff format",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single merge request diff version",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MergeRequestDiffFull"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.12.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsMergeRequestIidVersionsVersionId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/ml_models/{model_version_id}/files/(*path/){file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "File name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "path",
                    "description": "File directory path",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "status",
                    "description": "Package status",
                    "type": "string",
                    "enum": [
                        "default",
                        "hidden"
                    ],
                    "required": false
                },
                {
                    "in": "path",
                    "name": "model_version_id",
                    "description": "Model version id",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download an ml_model package file"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.8",
            "tags": [
                "ml_model_registry"
            ],
            "operationId": "getApiV4ProjectsIdPackagesMlModelsModelVersionIdFiles(*path)FileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/npm/-/package/*package_name/dist-tags",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get all tags for a given an NPM package",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_NpmPackageTag"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.7",
            "tags": [
                "npm_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesNpmPackage*packageNameDistTags"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/npm/*package_name/-/*file_name",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download the NPM tarball"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.8",
            "tags": [
                "npm_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesNpm*packageName-*fileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/npm/*package_name",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "mypackage"
                }
            ],
            "responses": {
                "200": {
                    "description": "Ok",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_NpmPackage"
                    }
                },
                "302": {
                    "description": "Found (redirect)"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.8",
            "tags": [
                "npm_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesNpm*packageName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget/index",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet V3 Feed Service Index",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Nuget_ServiceIndex"
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.6",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesNugetIndex"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget/symbolfiles/*file_name/*signature/*same_file_name",
            "method": "get",
            "parameters": [
                {
                    "in": "header",
                    "name": "Symbolchecksum",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "file_name",
                    "description": "The symbol file name",
                    "type": "string",
                    "required": true,
                    "example": "mynugetpkg.pdb"
                },
                {
                    "in": "query",
                    "name": "signature",
                    "description": "The symbol file signature",
                    "type": "string",
                    "required": true,
                    "example": "k813f89485474661234z7109cve5709eFFFFFFFF"
                },
                {
                    "in": "query",
                    "name": "same_file_name",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet Symbol File Download Endpoint"
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.7",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesNugetSymbolfiles*fileName*signature*sameFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget/v2",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet V2 Feed Service Index"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.2",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesNugetV2"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget/v2/$metadata",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet V2 Feed Package $metadata endpoint"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.3",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesNugetV2$metadata"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget/metadata/*package_name/index",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "The NuGet package name",
                    "type": "string",
                    "required": true,
                    "example": "MyNuGetPkg"
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet Metadata Service - Package name level",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Nuget_PackagesMetadata"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.8",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesNugetMetadata*packageNameIndex"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget/metadata/*package_name/*package_version",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "The NuGet package name",
                    "type": "string",
                    "required": true,
                    "example": "MyNuGetPkg"
                },
                {
                    "in": "query",
                    "name": "package_version",
                    "description": "The NuGet package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0.0"
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet Metadata Service - Package name and version level",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Nuget_PackageMetadata"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.8",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesNugetMetadata*packageName*packageVersion"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget/query",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "q",
                    "description": "The search term",
                    "type": "string",
                    "required": false,
                    "example": "MyNuGet"
                },
                {
                    "in": "query",
                    "name": "skip",
                    "description": "The number of results to skip",
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "take",
                    "description": "The number of results to return",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "prerelease",
                    "description": "Include prerelease versions",
                    "type": "boolean",
                    "default": true,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet Search Service",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Nuget_SearchResults"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.8",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesNugetQuery"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget/download/*package_name/index",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "The NuGet package name",
                    "type": "string",
                    "required": true,
                    "example": "mynugetpkg.1.3.0.17.nupkg"
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet Content Service - index request",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Nuget_PackagesVersions"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.8",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesNugetDownload*packageNameIndex"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget/download/*package_name/*package_version/*package_filename",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "The NuGet package name",
                    "type": "string",
                    "required": true,
                    "example": "mynugetpkg.1.3.0.17.nupkg"
                },
                {
                    "in": "query",
                    "name": "package_version",
                    "description": "The NuGet package version",
                    "type": "string",
                    "required": true,
                    "example": "1.3.0.17"
                },
                {
                    "in": "query",
                    "name": "package_filename",
                    "description": "The NuGet package filename",
                    "type": "string",
                    "required": true,
                    "example": "mynugetpkg.1.3.0.17.nupkg"
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet Content Service - content request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.8",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesNugetDownload*packageName*packageVersion*packageFilename"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{project_id}/packages/nuget/v2/FindPackagesById\\(\\)",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "project_id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "id",
                    "description": "The NuGet package name",
                    "type": "string",
                    "required": true,
                    "example": "mynugetpkg"
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet V2 Feed Find Packages by ID endpoint"
                },
                "404": {
                    "description": "Not Found"
                },
                "400": {
                    "description": "Bad Request"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.4",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4ProjectsProjectIdPackagesNugetV2Findpackagesbyid\\(\\)"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{project_id}/packages/nuget/v2/Packages\\(\\)",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "project_id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "$filter",
                    "description": "The NuGet package name",
                    "type": "string",
                    "required": true,
                    "example": "mynugetpkg"
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet V2 Feed Enumerate Packages endpoint"
                },
                "404": {
                    "description": "Not Found"
                },
                "400": {
                    "description": "Bad Request"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.4",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4ProjectsProjectIdPackagesNugetV2Packages\\(\\)"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{project_id}/packages/nuget/v2/Packages\\(Id='*package_name',Version='*package_version'\\)",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "project_id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "The NuGet package name",
                    "type": "string",
                    "required": true,
                    "example": "mynugetpkg"
                },
                {
                    "in": "query",
                    "name": "package_version",
                    "description": "The NuGet package version",
                    "type": "string",
                    "required": true,
                    "example": "1.3.0.17"
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet V2 Feed Single Package Metadata endpoint"
                },
                "404": {
                    "description": "Not Found"
                },
                "400": {
                    "description": "Bad Request"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.4",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "getApiV4ProjectsProjectIdPackagesNugetV2Packages\\(id='*packageName',version='*packageVersion'\\)"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/{package_id}/package_files",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_id",
                    "description": "ID of a package",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Return package files ordered by `id`, `created_at` or `file_name`",
                    "type": "string",
                    "default": "id",
                    "enum": [
                        "id",
                        "created_at",
                        "file_name"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return package files sorted in `asc` or `desc` order.",
                    "type": "string",
                    "default": "asc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List package files",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_PackageFile"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of package files of a single package",
            "tags": [
                "package_files"
            ],
            "operationId": "getApiV4ProjectsIdPackagesPackageIdPackageFiles"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pages",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get pages settings"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get pages URL and other settings. This feature was introduced in Gitlab 16.8",
            "tags": [
                "pages"
            ],
            "operationId": "getApiV4ProjectsIdPages"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pages/domains",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get all pages domains",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_PagesDomain"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get all pages domains",
            "tags": [
                "pages_domains"
            ],
            "operationId": "getApiV4ProjectsIdPagesDomains"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pages/domains/{domain}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "domain",
                    "description": "The domain",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single pages domain",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_PagesDomain"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a single pages domain",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdPagesDomainsDomain"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/avatar",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download a project avatar"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.9",
            "tags": [
                "project_avatar"
            ],
            "operationId": "getApiV4ProjectsIdAvatar"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/clusters",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List project clusters",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Cluster"
                        }
                    }
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.7. Returns a list of project clusters.",
            "tags": [
                "clusters"
            ],
            "operationId": "getApiV4ProjectsIdClusters"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/clusters/{cluster_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "cluster_id",
                    "description": "The cluster ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single project cluster",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ClusterProject"
                    }
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.7. Gets a single project cluster.",
            "tags": [
                "clusters"
            ],
            "operationId": "getApiV4ProjectsIdClustersClusterId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/registry/repositories",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "tags",
                    "description": "Determines if tags should be included",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "tags_count",
                    "description": "Determines if the tags count should be included",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List container repositories within a project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_ContainerRegistry_Repository"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.8.",
            "tags": [
                "container_registry"
            ],
            "operationId": "getApiV4ProjectsIdRegistryRepositories"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/registry/repositories/{repository_id}/tags",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "repository_id",
                    "description": "The ID of the repository",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List tags of a repository",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_ContainerRegistry_Tag"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                },
                "405": {
                    "description": "Method Not Allowed"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.8.",
            "tags": [
                "container_registry"
            ],
            "operationId": "getApiV4ProjectsIdRegistryRepositoriesRepositoryIdTags"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/registry/repositories/{repository_id}/tags/{tag_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "repository_id",
                    "description": "The ID of the repository",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag_name",
                    "description": "The name of the tag",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get details about a repository tag",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ContainerRegistry_TagDetails"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.8.",
            "tags": [
                "container_registry"
            ],
            "operationId": "getApiV4ProjectsIdRegistryRepositoriesRepositoryIdTagsTagName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/registry/protection/repository/rules",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get list of container registry protection rules for a project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Projects_ContainerRegistry_Protection_Rule"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get list of container registry protection rules for a project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdRegistryProtectionRepositoryRules"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/debian_distributions",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "codename",
                    "description": "The Debian Codename",
                    "type": "string",
                    "required": false,
                    "example": "sid"
                },
                {
                    "in": "query",
                    "name": "suite",
                    "description": "The Debian Suite",
                    "type": "string",
                    "required": false,
                    "example": "unstable"
                },
                {
                    "in": "query",
                    "name": "origin",
                    "description": "The Debian Origin",
                    "type": "string",
                    "required": false,
                    "example": "Grep"
                },
                {
                    "in": "query",
                    "name": "label",
                    "description": "The Debian Label",
                    "type": "string",
                    "required": false,
                    "example": "grep.be"
                },
                {
                    "in": "query",
                    "name": "version",
                    "description": "The Debian Version",
                    "type": "string",
                    "required": false,
                    "example": "12"
                },
                {
                    "in": "query",
                    "name": "description",
                    "description": "The Debian Description",
                    "type": "string",
                    "required": false,
                    "example": "My description"
                },
                {
                    "in": "query",
                    "name": "valid_time_duration_seconds",
                    "description": "The duration before the Release file should be considered expired by the client",
                    "type": "integer",
                    "format": "int32",
                    "required": false,
                    "example": 604800
                },
                {
                    "in": "query",
                    "name": "components",
                    "description": "The list of Components",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false,
                    "example": "main"
                },
                {
                    "in": "query",
                    "name": "architectures",
                    "description": "The list of Architectures",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false,
                    "example": "amd64"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of Debian Distributions",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Debian_Distribution"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in 14.0",
            "tags": [
                "debian_distribution"
            ],
            "operationId": "getApiV4ProjectsIdDebianDistributions"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/debian_distributions/{codename}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "codename",
                    "description": "The Debian Codename",
                    "type": "string",
                    "required": true,
                    "example": "sid"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a Debian Distribution",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Debian_Distribution"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in 14.0",
            "tags": [
                "debian_distribution"
            ],
            "operationId": "getApiV4ProjectsIdDebianDistributionsCodename"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/debian_distributions/{codename}/key.asc",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "codename",
                    "description": "The Debian Codename",
                    "type": "string",
                    "required": true,
                    "example": "sid"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a Debian Distribution Key",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Debian_Distribution"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in 14.4",
            "tags": [
                "debian_distribution"
            ],
            "operationId": "getApiV4ProjectsIdDebianDistributionsCodenameKeyAsc"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/events",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "action",
                    "description": "Event action to filter on",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "target_type",
                    "description": "Event target type to filter on",
                    "type": "string",
                    "enum": [
                        "issue",
                        "milestone",
                        "merge_request",
                        "note",
                        "project",
                        "snippet",
                        "user",
                        "wiki",
                        "design"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "before",
                    "description": "Include only events created before this date",
                    "type": "string",
                    "format": "date",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "after",
                    "description": "Include only events created after this date",
                    "type": "string",
                    "format": "date",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return events sorted in ascending and descending order",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List a project's visible events",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Event"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "List a project's visible events",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdEvents"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/export",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get export status",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectExportStatus"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "project_export"
            ],
            "operationId": "getApiV4ProjectsIdExport"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/export/download",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download export"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "project_export"
            ],
            "operationId": "getApiV4ProjectsIdExportDownload"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/export_relations/download",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "relation",
                    "description": "Project relation name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "batched",
                    "description": "Whether to download in batches",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "batch_number",
                    "description": "Batch number to download",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Download relations export"
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "500": {
                    "description": "Internal Server Error"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.4",
            "tags": [
                "project_export"
            ],
            "operationId": "getApiV4ProjectsIdExportRelationsDownload"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/export_relations/status",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "relation",
                    "description": "Project relation name",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Relations export status",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_BulkImports_ExportStatus"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.4",
            "tags": [
                "project_export"
            ],
            "operationId": "getApiV4ProjectsIdExportRelationsStatus"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/hooks",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List project hooks",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_ProjectHook"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of project hooks",
            "tags": [
                "project_hooks"
            ],
            "operationId": "getApiV4ProjectsIdHooks"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/hooks/{hook_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of a project hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get project hook",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectHook"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a specific hook for a project",
            "tags": [
                "project_hooks"
            ],
            "operationId": "getApiV4ProjectsIdHooksHookId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/hooks/{hook_id}/events",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "status",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "100",
                            "101",
                            "102",
                            "103",
                            "200",
                            "201",
                            "202",
                            "203",
                            "204",
                            "205",
                            "206",
                            "207",
                            "208",
                            "226",
                            "300",
                            "301",
                            "302",
                            "303",
                            "304",
                            "305",
                            "306",
                            "307",
                            "308",
                            "400",
                            "401",
                            "402",
                            "403",
                            "404",
                            "405",
                            "406",
                            "407",
                            "408",
                            "409",
                            "410",
                            "411",
                            "412",
                            "413",
                            "414",
                            "415",
                            "416",
                            "417",
                            "421",
                            "422",
                            "423",
                            "424",
                            "425",
                            "426",
                            "428",
                            "429",
                            "431",
                            "451",
                            "500",
                            "501",
                            "502",
                            "503",
                            "504",
                            "505",
                            "506",
                            "507",
                            "508",
                            "509",
                            "510",
                            "511",
                            "successful",
                            "client_failure",
                            "server_failure"
                        ]
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "minimum": 1,
                    "maximum": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "hook_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get events for a given hook id"
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "List web hook logs by hook id",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdHooksHookIdEvents"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/import",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a project import status",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectImportStatus"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "project_import"
            ],
            "operationId": "getApiV4ProjectsIdImport"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/relation-imports",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the statuses of relation imports for specified project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectImportStatus"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.11.",
            "tags": [
                "project_import"
            ],
            "operationId": "getApiV4ProjectsIdRelationImports"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/job_token_scope",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Fetch CI_JOB_TOKEN access settings.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectJobTokenScope"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Fetch CI_JOB_TOKEN access settings.",
            "tags": [
                "projects_job_token_scope"
            ],
            "operationId": "getApiV4ProjectsIdJobTokenScope"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/job_token_scope/allowlist",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Fetch project inbound allowlist for CI_JOB_TOKEN access settings.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_BasicProjectDetails"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Fetch project inbound allowlist for CI_JOB_TOKEN access settings.",
            "tags": [
                "projects_job_token_scope"
            ],
            "operationId": "getApiV4ProjectsIdJobTokenScopeAllowlist"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/job_token_scope/groups_allowlist",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Fetch project groups allowlist for CI_JOB_TOKEN access settings.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_BasicProjectDetails"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Fetch project groups allowlist for CI_JOB_TOKEN access settings.",
            "tags": [
                "projects_job_token_scope"
            ],
            "operationId": "getApiV4ProjectsIdJobTokenScopeGroupsAllowlist"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Return packages ordered by `created_at`, `name`, `version` or `type` fields.",
                    "type": "string",
                    "default": "created_at",
                    "enum": [
                        "created_at",
                        "name",
                        "version",
                        "type"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return packages sorted in `asc` or `desc` order.",
                    "type": "string",
                    "default": "asc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "package_type",
                    "description": "Return packages of a certain type",
                    "type": "string",
                    "enum": [
                        "maven",
                        "npm",
                        "conan",
                        "nuget",
                        "pypi",
                        "composer",
                        "generic",
                        "golang",
                        "debian",
                        "rubygems",
                        "helm",
                        "terraform_module",
                        "rpm",
                        "ml_model"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "Return packages with this name",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "package_version",
                    "description": "Return packages with this version",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_versionless",
                    "description": "Returns packages without a version",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "status",
                    "description": "Return packages with specified status",
                    "type": "string",
                    "enum": [
                        "default",
                        "hidden",
                        "processing",
                        "error",
                        "pending_destruction",
                        "deprecated"
                    ],
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of project packages",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Package"
                        }
                    }
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Project Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.8",
            "tags": [
                "project_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackages"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/{package_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_id",
                    "description": "The ID of a package",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single project package",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Package"
                    }
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.9",
            "tags": [
                "project_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesPackageId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/{package_id}/pipelines",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "minimum": 1,
                    "maximum": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "package_id",
                    "description": "The ID of a package",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "cursor",
                    "description": "Cursor for obtaining the next set of records",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the pipelines for a single project package",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Package_Pipeline"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.1",
            "tags": [
                "project_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesPackageIdPipelines"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/protection/rules",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get list of package protection rules for a project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Projects_Packages_Protection_Rule"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get list of package protection rules for a project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdPackagesProtectionRules"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snapshot",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "wiki",
                    "description": "Set to true to receive the wiki repository",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download a (possibly inconsistent) snapshot of a repository",
                    "schema": {
                        "type": "file"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.7",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdSnapshot"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get all project snippets",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_ProjectSnippet"
                        }
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get all project snippets",
            "tags": [
                "project_snippets"
            ],
            "operationId": "getApiV4ProjectsIdSnippets"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets/{snippet_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "snippet_id",
                    "description": "The ID of a project snippet",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single project snippet",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectSnippet"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single project snippet",
            "tags": [
                "project_snippets"
            ],
            "operationId": "getApiV4ProjectsIdSnippetsSnippetId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets/{snippet_id}/raw",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "snippet_id",
                    "description": "The ID of a project snippet",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a raw project snippet",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectSnippet"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a raw project snippet",
            "tags": [
                "project_snippets"
            ],
            "operationId": "getApiV4ProjectsIdSnippetsSnippetIdRaw"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets/{snippet_id}/files/{ref}/{file_path}/raw",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "file_path",
                    "description": "The url encoded path to the file, e.g. lib%2Fclass%2Erb",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "ref",
                    "description": "The name of branch, tag or commit",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "snippet_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get raw project snippet file contents from the repository",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectSnippet"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get raw project snippet file contents from the repository",
            "tags": [
                "project_snippets"
            ],
            "operationId": "getApiV4ProjectsIdSnippetsSnippetIdFilesRefFilePathRaw"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets/{snippet_id}/user_agent_detail",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "snippet_id",
                    "description": "The ID of a project snippet",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the user agent details for a project snippet",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_UserAgentDetail"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the user agent details for a project snippet",
            "tags": [
                "project_snippets"
            ],
            "operationId": "getApiV4ProjectsIdSnippetsSnippetIdUserAgentDetail"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/statistics",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the list of project fetch statistics for the last 30 days",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectDailyStatistics"
                    }
                },
                "404": {
                    "description": "404 Project Not Found"
                },
                "401": {
                    "description": "401 Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Get the list of project fetch statistics for the last 30 days",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdStatistics"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/templates/{type}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "type",
                    "description": "The type (dockerfiles|gitignores|gitlab_ci_ymls|licenses|issues|merge_requests) of the template",
                    "type": "string",
                    "enum": [
                        "dockerfiles",
                        "gitignores",
                        "gitlab_ci_ymls",
                        "licenses",
                        "issues",
                        "merge_requests"
                    ],
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of templates available to this project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_TemplatesList"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This endpoint was introduced in GitLab 11.4",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdTemplatesType"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/templates/{type}/{name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "type",
                    "description": "The type (dockerfiles|gitignores|gitlab_ci_ymls|licenses|issues|merge_requests) of the template",
                    "type": "string",
                    "enum": [
                        "dockerfiles",
                        "gitignores",
                        "gitlab_ci_ymls",
                        "licenses",
                        "issues",
                        "merge_requests"
                    ],
                    "required": true
                },
                {
                    "in": "path",
                    "name": "name",
                    "description": "The key of the template, as obtained from the collection endpoint.",
                    "type": "string",
                    "required": true,
                    "example": "MIT"
                },
                {
                    "in": "query",
                    "name": "source_template_project_id",
                    "description": "The project id where a given template is being stored. This is useful when multiple templates from different projects have the same name",
                    "type": "integer",
                    "format": "int32",
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "project",
                    "description": "The project name to use when expanding placeholders in the template. Only affects licenses",
                    "type": "string",
                    "required": false,
                    "example": "GitLab"
                },
                {
                    "in": "query",
                    "name": "fullname",
                    "description": "The full name of the copyright holder to use when expanding placeholders in the template. Only affects licenses",
                    "type": "string",
                    "required": false,
                    "example": "GitLab B.V."
                }
            ],
            "responses": {
                "200": {
                    "description": "Download a template available to this project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_License"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This endpoint was introduced in GitLab 11.4",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdTemplatesTypeName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/custom_attributes",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get all custom attributes on a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_CustomAttribute"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get all custom attributes on a project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdCustomAttributes"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/custom_attributes/{key}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the custom attribute",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a custom attribute on a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_CustomAttribute"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a custom attribute on a project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdCustomAttributesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Return projects ordered by field. storage_size, repository_size, wiki_size, packages_size are only available to admins. Similarity is available when searching and is limited to projects the user has access to.",
                    "type": "string",
                    "default": "created_at",
                    "enum": [
                        "id",
                        "name",
                        "path",
                        "created_at",
                        "updated_at",
                        "last_activity_at",
                        "similarity",
                        "star_count",
                        "storage_size",
                        "repository_size",
                        "wiki_size",
                        "packages_size"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return projects sorted in ascending and descending order",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "archived",
                    "description": "Limit by archived status",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "visibility",
                    "description": "Limit by visibility",
                    "type": "string",
                    "enum": [
                        "private",
                        "internal",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of projects matching the search criteria",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search_namespaces",
                    "description": "Include ancestor namespaces when matching search criteria",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "owned",
                    "description": "Limit by owned by authenticated user",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "starred",
                    "description": "Limit by starred status",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "imported",
                    "description": "Limit by imported by authenticated user",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "membership",
                    "description": "Limit by projects that the current user is a member of",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_issues_enabled",
                    "description": "Limit by enabled issues feature",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_merge_requests_enabled",
                    "description": "Limit by enabled merge requests feature",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_programming_language",
                    "description": "Limit to repositories which use the given programming language",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "min_access_level",
                    "description": "Limit by minimum access level of authenticated user",
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        10,
                        15,
                        20,
                        30,
                        40,
                        50
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "id_after",
                    "description": "Limit results to projects with IDs greater than the specified ID",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "id_before",
                    "description": "Limit results to projects with IDs less than the specified ID",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "last_activity_after",
                    "description": "Limit results to projects with last_activity after specified time. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "last_activity_before",
                    "description": "Limit results to projects with last_activity before specified time. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "repository_storage",
                    "description": "Which storage shard the repository is on. Available only to admins",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "topic",
                    "description": "Comma-separated list of topics. Limit results to projects having all topics",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "topic_id",
                    "description": "Limit results to projects with the assigned topic given by the topic ID",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "updated_before",
                    "description": "Return projects updated before the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "updated_after",
                    "description": "Return projects updated after the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_pending_delete",
                    "description": "Include projects in pending delete state. Can only be set by admins",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "marked_for_deletion_on",
                    "description": "Date when the project was marked for deletion",
                    "type": "string",
                    "format": "date",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "active",
                    "description": "Limit by projects that are not archived and not marked for deletion",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "wiki_checksum_failed",
                    "description": "Limit by projects where wiki checksum is failed",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "repository_checksum_failed",
                    "description": "Limit by projects where repository checksum is failed",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_hidden",
                    "description": "Include hidden projects. Can only be set by admins",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "simple",
                    "description": "Return only the ID, URL, name, and path of each project",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "statistics",
                    "description": "Include project statistics",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_custom_attributes",
                    "description": "Include custom attributes in the response",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of visible projects for authenticated user",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_BasicProjectDetails"
                        }
                    }
                },
                "400": {
                    "description": "Bad request"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of visible projects for authenticated user",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4Projects"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/share_locations",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The id of the project",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of groups matching the search criteria",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Returns group that can be shared with the given project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Group"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Returns group that can be shared with the given project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdShareLocations"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "statistics",
                    "description": "Include project statistics",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_custom_attributes",
                    "description": "Include custom attributes in the response",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "license",
                    "description": "Include project license data",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectWithAccess"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a single project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/forks",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Return projects ordered by field. storage_size, repository_size, wiki_size, packages_size are only available to admins. Similarity is available when searching and is limited to projects the user has access to.",
                    "type": "string",
                    "default": "created_at",
                    "enum": [
                        "id",
                        "name",
                        "path",
                        "created_at",
                        "updated_at",
                        "last_activity_at",
                        "similarity",
                        "star_count",
                        "storage_size",
                        "repository_size",
                        "wiki_size",
                        "packages_size"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return projects sorted in ascending and descending order",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "archived",
                    "description": "Limit by archived status",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "visibility",
                    "description": "Limit by visibility",
                    "type": "string",
                    "enum": [
                        "private",
                        "internal",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of projects matching the search criteria",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search_namespaces",
                    "description": "Include ancestor namespaces when matching search criteria",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "owned",
                    "description": "Limit by owned by authenticated user",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "starred",
                    "description": "Limit by starred status",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "imported",
                    "description": "Limit by imported by authenticated user",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "membership",
                    "description": "Limit by projects that the current user is a member of",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_issues_enabled",
                    "description": "Limit by enabled issues feature",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_merge_requests_enabled",
                    "description": "Limit by enabled merge requests feature",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_programming_language",
                    "description": "Limit to repositories which use the given programming language",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "min_access_level",
                    "description": "Limit by minimum access level of authenticated user",
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        10,
                        15,
                        20,
                        30,
                        40,
                        50
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "id_after",
                    "description": "Limit results to projects with IDs greater than the specified ID",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "id_before",
                    "description": "Limit results to projects with IDs less than the specified ID",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "last_activity_after",
                    "description": "Limit results to projects with last_activity after specified time. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "last_activity_before",
                    "description": "Limit results to projects with last_activity before specified time. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "repository_storage",
                    "description": "Which storage shard the repository is on. Available only to admins",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "topic",
                    "description": "Comma-separated list of topics. Limit results to projects having all topics",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "topic_id",
                    "description": "Limit results to projects with the assigned topic given by the topic ID",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "updated_before",
                    "description": "Return projects updated before the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "updated_after",
                    "description": "Return projects updated after the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_pending_delete",
                    "description": "Include projects in pending delete state. Can only be set by admins",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "marked_for_deletion_on",
                    "description": "Date when the project was marked for deletion",
                    "type": "string",
                    "format": "date",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "active",
                    "description": "Limit by projects that are not archived and not marked for deletion",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "wiki_checksum_failed",
                    "description": "Limit by projects where wiki checksum is failed",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "repository_checksum_failed",
                    "description": "Limit by projects where repository checksum is failed",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_hidden",
                    "description": "Include hidden projects. Can only be set by admins",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "simple",
                    "description": "Return only the ID, URL, name, and path of each project",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_custom_attributes",
                    "description": "Include custom attributes in the response",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List forks of this project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Project"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "List forks of this project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdForks"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pages_access",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Check pages access of this project"
                },
                "403": {
                    "description": "Unauthenticated"
                }
            },
            "request_body_parameters": {},
            "description": "Check pages access of this project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdPagesAccess"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/starrers",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of users matching the search criteria",
                    "type": "string",
                    "required": false,
                    "example": "user"
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the users who starred a project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_UserBasic"
                        }
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the users who starred a project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdStarrers"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/languages",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get languages in project repository"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get languages in project repository",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdLanguages"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/users",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of users matching the search criteria",
                    "type": "string",
                    "required": false,
                    "example": "user"
                },
                {
                    "in": "query",
                    "name": "skip_users",
                    "description": "Filter out users with the specified IDs",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the users list of a project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_UserBasic"
                        }
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the users list of a project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdUsers"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/groups",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of groups matching the search criteria",
                    "type": "string",
                    "required": false,
                    "example": "group"
                },
                {
                    "in": "query",
                    "name": "skip_groups",
                    "description": "Array of group ids to exclude from list",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_shared",
                    "description": "Include shared groups",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "shared_visible_only",
                    "description": "Limit to shared groups user has access to",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "shared_min_access_level",
                    "description": "Limit returned shared groups by minimum access level to the project",
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        10,
                        15,
                        20,
                        30,
                        40,
                        50
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get ancestor and shared groups for a project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_PublicGroupDetails"
                        }
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get ancestor and shared groups for a project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdGroups"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/invited_groups",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "relation",
                    "description": "Filter by group relation",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "direct",
                            "inherited"
                        ]
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Search for a specific group",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "min_access_level",
                    "description": "Limit by minimum access level of authenticated user",
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        10,
                        15,
                        20,
                        30,
                        40,
                        50
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "with_custom_attributes",
                    "description": "Include custom attributes in the response",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of invited groups in this project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Group"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of invited groups in this project",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdInvitedGroups"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/transfer_locations",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of namespaces matching the search criteria",
                    "type": "string",
                    "required": false,
                    "example": "search"
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the namespaces to where the project can be transferred",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_PublicGroupDetails"
                        }
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                }
            },
            "request_body_parameters": {},
            "description": "Get the namespaces to where the project can be transferred",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdTransferLocations"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/storage",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "ID of a project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Show the storage information",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectRepositoryStorage"
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                }
            },
            "request_body_parameters": {},
            "description": "Show the storage information",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdStorage"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/audit_events",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "created_after",
                    "description": "Return audit events created after the specified time",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2016-01-19T09:05:50.355Z"
                },
                {
                    "in": "query",
                    "name": "created_before",
                    "description": "Return audit events created before the specified time",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2016-01-19T09:05:50.355Z"
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of audit events in this project.",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/EE_API_Entities_AuditEvent"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of audit events in this project.",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdAuditEvents"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/audit_events/{audit_event_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "audit_event_id",
                    "description": "The ID of the audit event",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a specific audit event in this project.",
                    "schema": {
                        "$ref": "#/definitions/EE_API_Entities_AuditEvent"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a specific audit event in this project.",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdAuditEventsAuditEventId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/protected_branches",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": "gitlab-org/gitlab"
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Search for a protected branch by name",
                    "type": "string",
                    "required": false,
                    "example": "mai"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a project's protected branches",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_ProtectedBranch"
                        }
                    }
                },
                "404": {
                    "description": "404 Project Not Found"
                },
                "401": {
                    "description": "401 Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Get a project's protected branches",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdProtectedBranches"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/protected_branches/{name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": "gitlab-org/gitlab"
                },
                {
                    "in": "path",
                    "name": "name",
                    "description": "The name of the branch or wildcard",
                    "type": "string",
                    "required": true,
                    "example": "main"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single protected branch",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProtectedBranch"
                    }
                },
                "404": {
                    "description": "404 Project Not Found"
                },
                "401": {
                    "description": "401 Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single protected branch",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdProtectedBranchesName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/protected_tags",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a project's protected tags",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_ProtectedTag"
                        }
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.3.",
            "tags": [
                "protected_tags"
            ],
            "operationId": "getApiV4ProjectsIdProtectedTags"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/protected_tags/{name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "name",
                    "description": "The name of the tag or wildcard",
                    "type": "string",
                    "required": true,
                    "example": "release*"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single protected tag",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProtectedTag"
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.3.",
            "tags": [
                "protected_tags"
            ],
            "operationId": "getApiV4ProjectsIdProtectedTagsName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/pypi/files/{sha256}/*file_identifier",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "file_identifier",
                    "description": "The PyPi package file identifier",
                    "type": "string",
                    "required": true,
                    "example": "my.pypi.package-0.0.1.tar.gz"
                },
                {
                    "in": "path",
                    "name": "sha256",
                    "description": "The PyPi package sha256 check sum",
                    "type": "string",
                    "required": true,
                    "example": "5y57017232013c8ac80647f4ca153k3726f6cba62d055cd747844ed95b3c65ff"
                }
            ],
            "responses": {
                "200": {
                    "description": "The PyPi package download endpoint"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.10",
            "tags": [
                "pypi_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesPypiFilesSha256*fileIdentifier"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/pypi/simple",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The PyPi Simple Project Index Endpoint"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.1",
            "tags": [
                "pypi_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesPypiSimple"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/pypi/simple/*package_name",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "The PyPi package name",
                    "type": "string",
                    "required": true,
                    "example": "my.pypi.package"
                }
            ],
            "responses": {
                "200": {
                    "description": "The PyPi Simple Project Package Endpoint"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.10",
            "tags": [
                "pypi_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesPypiSimple*packageName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/releases",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "The field to use as order. Either `released_at` (default) or `created_at`",
                    "type": "string",
                    "default": "released_at",
                    "enum": [
                        "released_at",
                        "created_at"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "The direction of the order. Either `desc` (default) for descending order or `asc` for ascending order",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_html_description",
                    "description": "If `true`, a response includes HTML rendered markdown of the release description",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "updated_before",
                    "description": "Return releases updated before the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "updated_after",
                    "description": "Return releases updated after the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List Releases",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Release"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Returns a paginated list of releases. This feature was introduced in GitLab 11.7.",
            "tags": [
                "releases"
            ],
            "operationId": "getApiV4ProjectsIdReleases"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/releases/{tag_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag_name",
                    "description": "The Git tag the release is associated with",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "include_html_description",
                    "description": "If `true`, a response includes HTML rendered markdown of the release description",
                    "type": "boolean",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a release by a tag name",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Release"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Gets a release for the given tag. This feature was introduced in GitLab 11.7.",
            "tags": [
                "releases"
            ],
            "operationId": "getApiV4ProjectsIdReleasesTagName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/releases/{tag_name}/downloads/*direct_asset_path",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag_name",
                    "description": "The Git tag the release is associated with",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "direct_asset_path",
                    "description": "The path to the file to download, as specified when creating the release asset",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download a project release asset file"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.4.",
            "tags": [
                "releases"
            ],
            "operationId": "getApiV4ProjectsIdReleasesTagNameDownloads*directAssetPath"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/releases/permalink/latest(/)(*suffix_path)",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "suffix_path",
                    "description": "The path to be suffixed to the latest release",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the latest project release"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.4.",
            "tags": [
                "releases"
            ],
            "operationId": "getApiV4ProjectsIdReleasesPermalinkLatest()(*suffixPath)"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/releases/{tag_name}/assets/links",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag_name",
                    "description": "The tag associated with the release",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List links of a release",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Releases_Link"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get assets as links from a release. This feature was introduced in GitLab 11.7.",
            "tags": [
                "release_links"
            ],
            "operationId": "getApiV4ProjectsIdReleasesTagNameAssetsLinks"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/releases/{tag_name}/assets/links/{link_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag_name",
                    "description": "The tag associated with the release",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "link_id",
                    "description": "The ID of the link",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a release link",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Releases_Link"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get an asset as a link from a release. This feature was introduced in GitLab 11.7.",
            "tags": [
                "release_links"
            ],
            "operationId": "getApiV4ProjectsIdReleasesTagNameAssetsLinksLinkId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/remote_mirrors",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List the project's remote mirrors",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_RemoteMirror"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "List the project's remote mirrors",
            "tags": [
                "remote_mirrors"
            ],
            "operationId": "getApiV4ProjectsIdRemoteMirrors"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/remote_mirrors/{mirror_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "mirror_id",
                    "description": "The ID of a remote mirror",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single remote mirror",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_RemoteMirror"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single remote mirror",
            "tags": [
                "remote_mirrors"
            ],
            "operationId": "getApiV4ProjectsIdRemoteMirrorsMirrorId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/remote_mirrors/{mirror_id}/public_key",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "mirror_id",
                    "description": "The ID of a remote mirror",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the public key of a single remote mirror"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the public key of a single remote mirror",
            "tags": [
                "remote_mirrors"
            ],
            "operationId": "getApiV4ProjectsIdRemoteMirrorsMirrorIdPublicKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/tree",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "ref",
                    "description": "The name of a repository branch or tag, if not given the default branch is used",
                    "type": "string",
                    "required": false,
                    "example": "main"
                },
                {
                    "in": "query",
                    "name": "path",
                    "description": "The path of the tree",
                    "type": "string",
                    "required": false,
                    "example": "files/html"
                },
                {
                    "in": "query",
                    "name": "recursive",
                    "description": "Used to get a recursive tree",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "pagination",
                    "description": "Specify the pagination method (\"none\" is only valid if \"recursive\" is true)",
                    "type": "string",
                    "default": "legacy",
                    "enum": [
                        "legacy",
                        "keyset",
                        "none"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page_token",
                    "description": "Record from which to start the keyset pagination",
                    "type": "string",
                    "required": false,
                    "example": "a1e8f8d745cc87e3a9248358d9352bb7f9a0aeba"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a project repository tree",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_TreeObject"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a project repository tree",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryTree"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/blobs/{sha}/raw",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 1
                },
                {
                    "in": "path",
                    "name": "sha",
                    "description": "The commit hash",
                    "type": "string",
                    "required": true,
                    "example": "7d70e02340bac451f281cecf0a980907974bd8be"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get raw blob contents from the repository"
                }
            },
            "request_body_parameters": {},
            "description": "Get raw blob contents from the repository",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryBlobsShaRaw"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/blobs/{sha}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 1
                },
                {
                    "in": "path",
                    "name": "sha",
                    "description": "The commit hash",
                    "type": "string",
                    "required": true,
                    "example": "7d70e02340bac451f281cecf0a980907974bd8be"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a blob from the repository"
                }
            },
            "request_body_parameters": {},
            "description": "Get a blob from the repository",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryBlobsSha"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/archive",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "sha",
                    "description": "The commit sha of the archive to be downloaded",
                    "type": "string",
                    "required": false,
                    "example": "7d70e02340bac451f281cecf0a980907974bd8be"
                },
                {
                    "in": "query",
                    "name": "format",
                    "description": "The archive format",
                    "type": "string",
                    "required": false,
                    "example": "tar.gz"
                },
                {
                    "in": "query",
                    "name": "path",
                    "description": "Subfolder of the repository to be downloaded",
                    "type": "string",
                    "required": false,
                    "example": "files/archives"
                },
                {
                    "in": "query",
                    "name": "include_lfs_blobs",
                    "description": "Used to exclude LFS objects from archive",
                    "type": "boolean",
                    "default": true,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "exclude_paths",
                    "description": "Comma-separated list of paths to exclude from the archive",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get an archive of the repository"
                }
            },
            "request_body_parameters": {},
            "description": "Get an archive of the repository",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryArchive"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/compare",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "from",
                    "description": "The commit, branch name, or tag name to start comparison",
                    "type": "string",
                    "required": true,
                    "example": "main"
                },
                {
                    "in": "query",
                    "name": "to",
                    "description": "The commit, branch name, or tag name to stop comparison",
                    "type": "string",
                    "required": true,
                    "example": "feature"
                },
                {
                    "in": "query",
                    "name": "from_project_id",
                    "description": "The project to compare from",
                    "type": "integer",
                    "format": "int32",
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "straight",
                    "description": "Comparison method, `true` for direct comparison between `from` and `to` (`from`..`to`), `false` to compare using merge base (`from`...`to`)",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "unidiff",
                    "description": "A diff in a Unified diff format",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Compare two branches, tags, or commits",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Compare"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Compare two branches, tags, or commits",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryCompare"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/health",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "generate",
                    "description": "Triggers a new health report to be generated",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get repository health",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_RepositoryHealth"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get repository health",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryHealth"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/contributors",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "ref",
                    "description": "The name of a repository branch or tag, if not given the default branch is used",
                    "type": "string",
                    "required": false,
                    "example": "main"
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Return contributors ordered by `name` or `email` or `commits`",
                    "type": "string",
                    "default": "commits",
                    "enum": [
                        "email",
                        "name",
                        "commits"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Sort by asc (ascending) or desc (descending)",
                    "type": "string",
                    "default": "asc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get repository contributors",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Contributor"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get repository contributors",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryContributors"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/merge_base",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "refs",
                    "description": "The refs to find the common ancestor of, multiple refs can be passed",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": true,
                    "example": "main"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the common ancestor between commits",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Commit"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get the common ancestor between commits",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryMergeBase"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/changelog",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "version",
                    "description": "The version of the release, using the semantic versioning format",
                    "type": "string",
                    "required": true,
                    "example": "1.0.0"
                },
                {
                    "in": "query",
                    "name": "from",
                    "description": "The first commit in the range of commits to use for the changelog",
                    "type": "string",
                    "required": false,
                    "example": "ed899a2f4b50b4370feeea94676502b42383c746"
                },
                {
                    "in": "query",
                    "name": "to",
                    "description": "The last commit in the range of commits to use for the changelog",
                    "type": "string",
                    "required": false,
                    "example": "6104942438c14ec7bd21c6cd5bd995272b3faff6"
                },
                {
                    "in": "query",
                    "name": "date",
                    "description": "The date and time of the release",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2021-09-20T11:50:22.001+00:00"
                },
                {
                    "in": "query",
                    "name": "trailer",
                    "description": "The Git trailer to use for determining if commits are to be included in the changelog",
                    "type": "string",
                    "default": "Changelog",
                    "required": false,
                    "example": "Changelog"
                },
                {
                    "in": "query",
                    "name": "config_file",
                    "description": "The file path to the configuration file as stored in the project's Git repository. Defaults to '.gitlab/changelog_config.yml'",
                    "type": "string",
                    "required": false,
                    "example": ".gitlab/changelog_config.yml"
                }
            ],
            "responses": {
                "200": {
                    "description": "Generates a changelog section for a release and returns it",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Changelog"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.6",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryChangelog"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/issues/{eventable_id}/resource_milestone_events",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "eventable_id",
                    "description": "The ID of the eventable",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List project Issue milestone events",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_ResourceMilestoneEvent"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Gets a list of all milestone events for a single Issue",
            "tags": [
                "resource_milestone_events"
            ],
            "operationId": "getApiV4ProjectsIdIssuesEventableIdResourceMilestoneEvents"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/issues/{eventable_id}/resource_milestone_events/{event_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "event_id",
                    "description": "The ID of a resource milestone event",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "eventable_id",
                    "description": "The ID of the eventable",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get single Issue milestone event",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ResourceMilestoneEvent"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Returns a single milestone event for a specific project Issue",
            "tags": [
                "resource_milestone_events"
            ],
            "operationId": "getApiV4ProjectsIdIssuesEventableIdResourceMilestoneEventsEventId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{eventable_id}/resource_milestone_events",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "eventable_id",
                    "description": "The ID of the eventable",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List project Merge request milestone events",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_ResourceMilestoneEvent"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Gets a list of all milestone events for a single Merge request",
            "tags": [
                "resource_milestone_events"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsEventableIdResourceMilestoneEvents"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{eventable_id}/resource_milestone_events/{event_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "event_id",
                    "description": "The ID of a resource milestone event",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "eventable_id",
                    "description": "The ID of the eventable",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get single Merge request milestone event",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ResourceMilestoneEvent"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Returns a single milestone event for a specific project Merge request",
            "tags": [
                "resource_milestone_events"
            ],
            "operationId": "getApiV4ProjectsIdMergeRequestsEventableIdResourceMilestoneEventsEventId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/rpm/repodata/*file_name",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "file_name",
                    "description": "Repository metadata file name",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download repository metadata files"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.7",
            "tags": [
                "rpm_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesRpmRepodata*fileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/rpm/*package_file_id/*file_name",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_file_id",
                    "description": "RPM package file id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "file_name",
                    "description": "RPM package file name",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download RPM package files"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.7",
            "tags": [
                "rpm_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesRpm*packageFileId*fileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/rubygems/{file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Spec file name",
                    "type": "file",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download the spec index file"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.9",
            "tags": [
                "rubygem_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesRubygemsFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/rubygems/quick/Marshal.4.8/{file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Gemspec file name",
                    "type": "file",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download the gemspec file"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.9",
            "tags": [
                "rubygem_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesRubygemsQuickMarshal48FileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/rubygems/gems/{file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "file",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download the .gem package"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.9",
            "tags": [
                "rubygem_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesRubygemsGemsFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/rubygems/api/v1/dependencies",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "gems",
                    "description": "Comma delimited gem names",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Fetch a list of dependencies"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.9",
            "tags": [
                "rubygem_packages"
            ],
            "operationId": "getApiV4ProjectsIdPackagesRubygemsApiV1Dependencies"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/tags",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return tags sorted in updated by `asc` or `desc` order.",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Return tags ordered by `name`, `updated`, `version` fields.",
                    "type": "string",
                    "default": "updated",
                    "enum": [
                        "name",
                        "updated",
                        "version"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of tags matching the search criteria",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page_token",
                    "description": "Name of tag to start the paginaition from",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a project repository tags",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Tag"
                        }
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "Get a project repository tags",
            "tags": [
                "tags"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryTags"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/tags/{tag_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag_name",
                    "description": "The name of the tag",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single repository tag",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Tag"
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a single repository tag",
            "tags": [
                "tags"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryTagsTagName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/tags/{tag_name}/signature",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag_name",
                    "description": "The name of the tag",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a tag's signature",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_TagSignature"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a tag's signature",
            "tags": [
                "tags"
            ],
            "operationId": "getApiV4ProjectsIdRepositoryTagsTagNameSignature"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/terraform/modules/{module_name}/{module_system}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or full path of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_name",
                    "description": "Module name",
                    "type": "string",
                    "required": true,
                    "example": "infra-registry"
                },
                {
                    "in": "path",
                    "name": "module_system",
                    "description": "Module system",
                    "type": "string",
                    "required": true,
                    "example": "aws"
                },
                {
                    "in": "query",
                    "name": "terraform-get",
                    "description": "Terraform get redirection flag",
                    "type": "string",
                    "enum": [
                        "1"
                    ],
                    "required": false
                }
            ],
            "responses": {
                "204": {
                    "description": "Download the latest version of a module"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.7",
            "tags": [
                "terraform_registry"
            ],
            "operationId": "getApiV4ProjectsIdPackagesTerraformModulesModuleNameModuleSystem"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/terraform/modules/{module_name}/{module_system}/*module_version",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or full path of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_name",
                    "description": "Module name",
                    "type": "string",
                    "required": true,
                    "example": "infra-registry"
                },
                {
                    "in": "path",
                    "name": "module_system",
                    "description": "Module system",
                    "type": "string",
                    "required": true,
                    "example": "aws"
                },
                {
                    "in": "query",
                    "name": "module_version",
                    "description": "Module version",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "terraform-get",
                    "description": "Terraform get redirection flag",
                    "type": "string",
                    "enum": [
                        "1"
                    ],
                    "required": false
                }
            ],
            "responses": {
                "204": {
                    "description": "Download a specific version of a module"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.7",
            "tags": [
                "terraform_registry"
            ],
            "operationId": "getApiV4ProjectsIdPackagesTerraformModulesModuleNameModuleSystem*moduleVersion"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/terraform/state/{name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "name",
                    "description": "The name of a Terraform state",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "ID",
                    "description": "Terraform state lock ID",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a Terraform state by its name"
                },
                "204": {
                    "description": "Empty state"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Validation failure"
                }
            },
            "request_body_parameters": {},
            "description": "Get a Terraform state by its name",
            "tags": [
                "terraform_state"
            ],
            "operationId": "getApiV4ProjectsIdTerraformStateName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/terraform/state/{name}/versions/{serial}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "name",
                    "description": "The name of a Terraform state",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "serial",
                    "description": "The version number of the state",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a Terraform state version",
                    "schema": {
                        "type": "file"
                    }
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a Terraform state version",
            "tags": [
                "terraform_state"
            ],
            "operationId": "getApiV4ProjectsIdTerraformStateNameVersionsSerial"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/wikis",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "with_content",
                    "description": "Include pages' content",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of wiki pages",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_WikiPageBasic"
                        }
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of wiki pages",
            "tags": [
                "wikis"
            ],
            "operationId": "getApiV4ProjectsIdWikis"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/wikis/{slug}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "slug",
                    "description": "The slug of a wiki page",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "version",
                    "description": "The version hash of a wiki page",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "render_html",
                    "description": "Render content to HTML",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a wiki page",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_WikiPage"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a wiki page",
            "tags": [
                "wikis"
            ],
            "operationId": "getApiV4ProjectsIdWikisSlug"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/batched_background_migrations/{id}",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "database",
                    "description": "The name of the database",
                    "type": "string",
                    "default": "main",
                    "enum": [
                        "main",
                        "ci",
                        "sec",
                        "embedding",
                        "geo"
                    ],
                    "required": false
                },
                {
                    "in": "path",
                    "name": "id",
                    "description": "The batched background migration id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Retrieve a batched background migration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_BatchedBackgroundMigration"
                    }
                },
                "401": {
                    "description": "401 Unauthorized"
                },
                "403": {
                    "description": "403 Forbidden"
                },
                "404": {
                    "description": "404 Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Retrieve a batched background migration",
            "tags": [
                "batched_background_migrations"
            ],
            "operationId": "getApiV4AdminBatchedBackgroundMigrationsId"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/batched_background_migrations",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "database",
                    "description": "The name of the database, the default `main`",
                    "type": "string",
                    "default": "main",
                    "enum": [
                        "main",
                        "ci",
                        "sec",
                        "embedding",
                        "geo"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "job_class_name",
                    "description": "Filter migrations by job class name.",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the list of batched background migrations",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_BatchedBackgroundMigration"
                        }
                    }
                },
                "401": {
                    "description": "401 Unauthorized"
                },
                "403": {
                    "description": "403 Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Get the list of batched background migrations",
            "tags": [
                "batched_background_migrations"
            ],
            "operationId": "getApiV4AdminBatchedBackgroundMigrations"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/ci/variables",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List all instance-level variables",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "List all instance-level variables",
            "tags": [
                "ci_variables"
            ],
            "operationId": "getApiV4AdminCiVariables"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/ci/variables/{key}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of a variable",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the details of a specific instance-level variable",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                },
                "404": {
                    "description": "Instance Variable Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the details of a specific instance-level variable",
            "tags": [
                "ci_variables"
            ],
            "operationId": "getApiV4AdminCiVariablesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/databases/{database_name}/dictionary/tables/{table_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "database_name",
                    "description": "The database name",
                    "type": "string",
                    "enum": [
                        "main",
                        "ci"
                    ],
                    "required": true
                },
                {
                    "in": "path",
                    "name": "table_name",
                    "description": "The table name",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Retrieve dictionary details",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Dictionary_Table"
                    }
                },
                "401": {
                    "description": "401 Unauthorized"
                },
                "403": {
                    "description": "403 Forbidden"
                },
                "404": {
                    "description": "404 Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Retrieve dictionary details",
            "tags": [
                "admin"
            ],
            "operationId": "getApiV4AdminDatabasesDatabaseNameDictionaryTablesTableName"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/clusters",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "List instance clusters",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Cluster"
                        }
                    }
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.2. Returns a list of instance clusters.",
            "tags": [
                "clusters"
            ],
            "operationId": "getApiV4AdminClusters"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/clusters/{cluster_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "cluster_id",
                    "description": "The cluster ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single instance cluster",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Cluster"
                    }
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.2. Returns a single instance cluster.",
            "tags": [
                "clusters"
            ],
            "operationId": "getApiV4AdminClustersClusterId"
        },
        {
            "server_url": "",
            "path": "/api/v4/broadcast_messages",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get all broadcast messages",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_System_BroadcastMessage"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.12.",
            "tags": [
                "broadcast_messages"
            ],
            "operationId": "getApiV4BroadcastMessages"
        },
        {
            "server_url": "",
            "path": "/api/v4/broadcast_messages/{id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "Broadcast message ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a specific broadcast message",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_System_BroadcastMessage"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.12.",
            "tags": [
                "broadcast_messages"
            ],
            "operationId": "getApiV4BroadcastMessagesId"
        },
        {
            "server_url": "",
            "path": "/api/v4/applications",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Get applications",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Application"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "List all registered applications",
            "tags": [
                "applications"
            ],
            "operationId": "getApiV4Applications"
        },
        {
            "server_url": "",
            "path": "/api/v4/avatar",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "email",
                    "description": "Public email address of the user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "size",
                    "description": "Single pixel dimension for Gravatar images",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Return avatar url for a user",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Avatar"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Return avatar url for a user",
            "tags": [
                "avatar"
            ],
            "operationId": "getApiV4Avatar"
        },
        {
            "server_url": "",
            "path": "/api/v4/bulk_imports",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return GitLab Migrations sorted in created by `asc` or `desc` order.",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "status",
                    "description": "Return GitLab Migrations with specified status",
                    "type": "string",
                    "enum": [
                        "created",
                        "started",
                        "finished",
                        "timeout",
                        "failed",
                        "canceled"
                    ],
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List all GitLab Migrations",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_BulkImport"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.1.",
            "tags": [
                "bulk_imports"
            ],
            "operationId": "getApiV4BulkImports"
        },
        {
            "server_url": "",
            "path": "/api/v4/bulk_imports/entities",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return GitLab Migrations sorted in created by `asc` or `desc` order.",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "status",
                    "description": "Return all GitLab Migrations' entities with specified status",
                    "type": "string",
                    "enum": [
                        "created",
                        "started",
                        "finished",
                        "timeout",
                        "failed",
                        "canceled"
                    ],
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List all GitLab Migrations' entities",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_BulkImports"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.1.",
            "tags": [
                "bulk_imports"
            ],
            "operationId": "getApiV4BulkImportsEntities"
        },
        {
            "server_url": "",
            "path": "/api/v4/bulk_imports/{import_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "import_id",
                    "description": "The ID of user's GitLab Migration",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get GitLab Migration details",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_BulkImport"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.1.",
            "tags": [
                "bulk_imports"
            ],
            "operationId": "getApiV4BulkImportsImportId"
        },
        {
            "server_url": "",
            "path": "/api/v4/bulk_imports/{import_id}/entities",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "import_id",
                    "description": "The ID of user's GitLab Migration",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "status",
                    "description": "Return import entities with specified status",
                    "type": "string",
                    "enum": [
                        "created",
                        "started",
                        "finished",
                        "timeout",
                        "failed",
                        "canceled"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List GitLab Migration entities",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_BulkImports"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.1.",
            "tags": [
                "bulk_imports"
            ],
            "operationId": "getApiV4BulkImportsImportIdEntities"
        },
        {
            "server_url": "",
            "path": "/api/v4/bulk_imports/{import_id}/entities/{entity_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "import_id",
                    "description": "The ID of user's GitLab Migration",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "entity_id",
                    "description": "The ID of GitLab Migration entity",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get GitLab Migration entity details",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_BulkImports"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.1.",
            "tags": [
                "bulk_imports"
            ],
            "operationId": "getApiV4BulkImportsImportIdEntitiesEntityId"
        },
        {
            "server_url": "",
            "path": "/api/v4/bulk_imports/{import_id}/entities/{entity_id}/failures",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "import_id",
                    "description": "The ID of user's GitLab Migration",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "entity_id",
                    "description": "The ID of GitLab Migration entity",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get GitLab Migration entity failures",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_BulkImports_EntityFailure"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.6",
            "tags": [
                "bulk_imports"
            ],
            "operationId": "getApiV4BulkImportsImportIdEntitiesEntityIdFailures"
        },
        {
            "server_url": "",
            "path": "/api/v4/job",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Get current job using job token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Job"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get current job using job token",
            "tags": [
                "job"
            ],
            "operationId": "getApiV4Job"
        },
        {
            "server_url": "",
            "path": "/api/v4/job/allowed_agents",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Get current agents",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Job"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Retrieves a list of agents for the given job token",
            "tags": [
                "job"
            ],
            "operationId": "getApiV4JobAllowedAgents"
        },
        {
            "server_url": "",
            "path": "/api/v4/runners",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "scope",
                    "description": "Deprecated: Use `type` or `status` instead. The scope of runners to return",
                    "type": "string",
                    "enum": [
                        "specific",
                        "shared",
                        "instance_type",
                        "group_type",
                        "project_type",
                        "active",
                        "paused",
                        "online",
                        "offline",
                        "never_contacted",
                        "stale"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "type",
                    "description": "The type of runners to return",
                    "type": "string",
                    "enum": [
                        "instance_type",
                        "group_type",
                        "project_type"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "paused",
                    "description": "Whether to include only runners that are accepting or ignoring new jobs",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "status",
                    "description": "The status of runners to return",
                    "type": "string",
                    "enum": [
                        "active",
                        "paused",
                        "online",
                        "offline",
                        "never_contacted",
                        "stale"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "tag_list",
                    "description": "A list of runner tags",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false,
                    "example": "['macos', 'shell']"
                },
                {
                    "in": "query",
                    "name": "version_prefix",
                    "description": "The version prefix of runners to return",
                    "type": "string",
                    "required": false,
                    "example": "'15.1.' or '16.'"
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get runners available for user",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Runner"
                    }
                },
                "400": {
                    "description": "Scope contains invalid value"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Get runners available for user",
            "tags": [
                "runners"
            ],
            "operationId": "getApiV4Runners"
        },
        {
            "server_url": "",
            "path": "/api/v4/runners/all",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "scope",
                    "description": "Deprecated: Use `type` or `status` instead. The scope of runners to return",
                    "type": "string",
                    "enum": [
                        "specific",
                        "shared",
                        "instance_type",
                        "group_type",
                        "project_type",
                        "active",
                        "paused",
                        "online",
                        "offline",
                        "never_contacted",
                        "stale"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "type",
                    "description": "The type of runners to return",
                    "type": "string",
                    "enum": [
                        "instance_type",
                        "group_type",
                        "project_type"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "paused",
                    "description": "Whether to include only runners that are accepting or ignoring new jobs",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "status",
                    "description": "The status of runners to return",
                    "type": "string",
                    "enum": [
                        "active",
                        "paused",
                        "online",
                        "offline",
                        "never_contacted",
                        "stale"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "tag_list",
                    "description": "A list of runner tags",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false,
                    "example": "['macos', 'shell']"
                },
                {
                    "in": "query",
                    "name": "version_prefix",
                    "description": "The version prefix of runners to return",
                    "type": "string",
                    "required": false,
                    "example": "'15.1.' or '16.'"
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get all runners - shared and project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Runner"
                    }
                },
                "400": {
                    "description": "Scope contains invalid value"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all runners in the GitLab instance (shared and project). Access is restricted to users with administrator access.",
            "tags": [
                "runners"
            ],
            "operationId": "getApiV4RunnersAll"
        },
        {
            "server_url": "",
            "path": "/api/v4/runners/{id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a runner",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get runner's details",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_RunnerDetails"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "No access granted"
                },
                "404": {
                    "description": "Runner not found"
                }
            },
            "request_body_parameters": {},
            "description": "At least the Maintainer role is required to get runner details at the project and group level. Instance-level runner details via this endpoint are available to all signed in users.",
            "tags": [
                "runners"
            ],
            "operationId": "getApiV4RunnersId"
        },
        {
            "server_url": "",
            "path": "/api/v4/runners/{id}/managers",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a runner",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of all runner's managers",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_RunnerManager"
                    }
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all runner's managers",
            "tags": [
                "runners"
            ],
            "operationId": "getApiV4RunnersIdManagers"
        },
        {
            "server_url": "",
            "path": "/api/v4/runners/{id}/jobs",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a runner",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "system_id",
                    "description": "System ID associated with the runner manager",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "status",
                    "description": "Status of the job",
                    "type": "string",
                    "enum": [
                        "created",
                        "waiting_for_resource",
                        "preparing",
                        "waiting_for_callback",
                        "pending",
                        "running",
                        "success",
                        "failed",
                        "canceling",
                        "canceled",
                        "skipped",
                        "manual",
                        "scheduled"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Order by `id`",
                    "type": "string",
                    "enum": [
                        "id"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Sort by `asc` or `desc` order. Specify `order_by` as well, including for `id`",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "cursor",
                    "description": "Cursor for obtaining the next set of records",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List jobs running on a runner",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_JobBasicWithProject"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "No access granted"
                },
                "404": {
                    "description": "Runner not found"
                }
            },
            "request_body_parameters": {},
            "description": "List jobs that are being processed or were processed by the specified runner. The list of jobs is limited to projects where the user has at least the Reporter role.",
            "tags": [
                "runners",
                "jobs"
            ],
            "operationId": "getApiV4RunnersIdJobs"
        },
        {
            "server_url": "",
            "path": "/api/v4/jobs/{id}/artifacts",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "Job's ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "token",
                    "description": "Job's authentication token",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "direct_download",
                    "description": "Perform direct download from remote storage instead of proxying artifacts",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Download allowed"
                },
                "302": {
                    "description": "Found"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Artifact not found"
                }
            },
            "request_body_parameters": {},
            "description": "Download the artifacts file for job",
            "tags": [
                "jobs"
            ],
            "operationId": "getApiV4JobsIdArtifacts"
        },
        {
            "server_url": "",
            "path": "/api/v4/group/{id}/-/packages/composer/packages",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of a group",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Composer packages endpoint at group level"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.1",
            "tags": [
                "composer_packages"
            ],
            "operationId": "getApiV4GroupIdPackagesComposerPackages"
        },
        {
            "server_url": "",
            "path": "/api/v4/group/{id}/-/packages/composer/p/{sha}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "sha",
                    "description": "Shasum of current json",
                    "type": "string",
                    "required": true,
                    "example": "673594f85a55fe3c0eb45df7bd2fa9d95a1601ab"
                }
            ],
            "responses": {
                "200": {
                    "description": "Composer packages endpoint at group level for packages list"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.1",
            "tags": [
                "composer_packages"
            ],
            "operationId": "getApiV4GroupIdPackagesComposerPSha"
        },
        {
            "server_url": "",
            "path": "/api/v4/group/{id}/-/packages/composer/p2/*package_name",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "The Composer package name",
                    "type": "string",
                    "required": true,
                    "example": "my-composer-package"
                }
            ],
            "responses": {
                "200": {
                    "description": "Composer v2 packages p2 endpoint at group level for package versions metadata"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.1",
            "tags": [
                "composer_packages"
            ],
            "operationId": "getApiV4GroupIdPackagesComposerP2*packageName"
        },
        {
            "server_url": "",
            "path": "/api/v4/group/{id}/-/packages/composer/*package_name",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "The Composer package name",
                    "type": "string",
                    "required": true,
                    "example": "my-composer-package"
                }
            ],
            "responses": {
                "200": {
                    "description": "Composer packages endpoint at group level for package versions metadata"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.1",
            "tags": [
                "composer_packages"
            ],
            "operationId": "getApiV4GroupIdPackagesComposer*packageName"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/users/authenticate",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Authenticate user against conan CLI"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.2",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4PackagesConanV1UsersAuthenticate"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/users/check_credentials",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Check for valid user credentials per conan CLI"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.4",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4PackagesConanV1UsersCheckCredentials"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/conans/search",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "q",
                    "description": "Search query",
                    "type": "string",
                    "required": true,
                    "example": "Hello*"
                }
            ],
            "responses": {
                "200": {
                    "description": "Search for packages"
                },
                "400": {
                    "description": "Bad Request"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.4",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4PackagesConanV1ConansSearch"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/ping",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Ping the Conan API"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.2",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4PackagesConanV1Ping"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/packages/{conan_package_reference}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Conan package ID",
                    "type": "string",
                    "required": true,
                    "example": "103f6067a947f366ef91fc1b7da351c588d1827f"
                }
            ],
            "responses": {
                "200": {
                    "description": "Package Snapshot",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_PackageSnapshot"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4PackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelPackagesConanPackageReference"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                }
            ],
            "responses": {
                "200": {
                    "description": "Recipe Snapshot",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_RecipeSnapshot"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4PackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannel"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/packages/{conan_package_reference}/digest",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Conan package ID",
                    "type": "string",
                    "required": true,
                    "example": "103f6067a947f366ef91fc1b7da351c588d1827f"
                }
            ],
            "responses": {
                "200": {
                    "description": "Package Digest",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_PackageManifest"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4PackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelPackagesConanPackageReferenceDigest"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/digest",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                }
            ],
            "responses": {
                "200": {
                    "description": "Recipe Digest",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_RecipeManifest"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4PackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelDigest"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/packages/{conan_package_reference}/download_urls",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Conan package ID",
                    "type": "string",
                    "required": true,
                    "example": "103f6067a947f366ef91fc1b7da351c588d1827f"
                }
            ],
            "responses": {
                "200": {
                    "description": "Package Download Urls",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_PackageManifest"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4PackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelPackagesConanPackageReferenceDownloadUrls"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/download_urls",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                }
            ],
            "responses": {
                "200": {
                    "description": "Recipe Download Urls",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_RecipeManifest"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4PackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelDownloadUrls"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/export/{file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Conan Recipe Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conanfile.py"
                }
            ],
            "responses": {
                "200": {
                    "description": "Download recipe files"
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.6",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4PackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionExportFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/package/{conan_package_reference}/{package_revision}/{file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Conan Recipe Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Conan Package ID",
                    "type": "string",
                    "required": true,
                    "example": "103f6067a947f366ef91fc1b7da351c588d1827f"
                },
                {
                    "in": "path",
                    "name": "package_revision",
                    "description": "Conan Package Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conaninfo.txt"
                }
            ],
            "responses": {
                "200": {
                    "description": "Download package files"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "getApiV4PackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionPackageConanPackageReferencePackageRevisionFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/maven/*path/{file_name}",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "path",
                    "description": "Package path",
                    "type": "string",
                    "required": true,
                    "example": "foo/bar/mypkg/1.0-SNAPSHOT"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "required": true,
                    "example": "mypkg-1.0-SNAPSHOT.jar"
                }
            ],
            "responses": {
                "200": {
                    "description": "Download the maven package file at instance level"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.6",
            "tags": [
                "maven_packages"
            ],
            "operationId": "getApiV4PackagesMaven*pathFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/npm/-/package/*package_name/dist-tags",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get all tags for a given an NPM package",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_NpmPackageTag"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.7",
            "tags": [
                "npm_packages"
            ],
            "operationId": "getApiV4PackagesNpmPackage*packageNameDistTags"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/npm/*package_name",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "mypackage"
                }
            ],
            "responses": {
                "200": {
                    "description": "Ok",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_NpmPackage"
                    }
                },
                "302": {
                    "description": "Found (redirect)"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.8",
            "tags": [
                "npm_packages"
            ],
            "operationId": "getApiV4PackagesNpm*packageName"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/terraform/modules/v1/{module_namespace}/{module_name}/{module_system}/versions",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "module_namespace",
                    "description": "Group's ID or slug",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_name",
                    "description": "",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_system",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "List versions for a module",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Terraform_ModuleVersions"
                        }
                    }
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "List versions for a module",
            "tags": [
                "terraform_registry"
            ],
            "operationId": "getApiV4PackagesTerraformModulesV1ModuleNamespaceModuleNameModuleSystemVersions"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/terraform/modules/v1/{module_namespace}/{module_name}/{module_system}/download",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "module_namespace",
                    "description": "Group's ID or slug",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_name",
                    "description": "",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_system",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "302": {
                    "description": "Get download location for the latest version of a module"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Download the latest version of a module",
            "tags": [
                "terraform_registry"
            ],
            "operationId": "getApiV4PackagesTerraformModulesV1ModuleNamespaceModuleNameModuleSystemDownload"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/terraform/modules/v1/{module_namespace}/{module_name}/{module_system}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "module_namespace",
                    "description": "Group's ID or slug",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_name",
                    "description": "",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_system",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get details about the latest version of a module",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Terraform_ModuleVersion"
                    }
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get details about the latest version of a module",
            "tags": [
                "terraform_registry"
            ],
            "operationId": "getApiV4PackagesTerraformModulesV1ModuleNamespaceModuleNameModuleSystem"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/terraform/modules/v1/{module_namespace}/{module_name}/{module_system}/*module_version/download",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "module_namespace",
                    "description": "Group's ID or slug",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_name",
                    "description": "",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_system",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "module_version",
                    "description": "Module version",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Get download location for specific version of a module"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Download specific version of a module",
            "tags": [
                "terraform_registry"
            ],
            "operationId": "getApiV4PackagesTerraformModulesV1ModuleNamespaceModuleNameModuleSystem*moduleVersionDownload"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/terraform/modules/v1/{module_namespace}/{module_name}/{module_system}/*module_version/file",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "module_namespace",
                    "description": "Group's ID or slug",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_name",
                    "description": "",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_system",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "module_version",
                    "description": "Module version",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Download specific version of a module",
                    "schema": {
                        "type": "file"
                    }
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Download specific version of a module",
            "tags": [
                "terraform_registry"
            ],
            "operationId": "getApiV4PackagesTerraformModulesV1ModuleNamespaceModuleNameModuleSystem*moduleVersionFile"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/terraform/modules/v1/{module_namespace}/{module_name}/{module_system}/*module_version",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "module_namespace",
                    "description": "Group's ID or slug",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_name",
                    "description": "",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_system",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "module_version",
                    "description": "Module version",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get details about specific version of a module",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Terraform_ModuleVersion"
                    }
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get details about specific version of a module",
            "tags": [
                "terraform_registry"
            ],
            "operationId": "getApiV4PackagesTerraformModulesV1ModuleNamespaceModuleNameModuleSystem*moduleVersion"
        },
        {
            "server_url": "",
            "path": "/api/v4/registry/repositories/{id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of the repository",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "tags",
                    "description": "Determines if tags should be included",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "tags_count",
                    "description": "Determines if the tags count should be included",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "size",
                    "description": "Determines if the size should be included",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a container repository",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ContainerRegistry_Repository"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Repository Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.6.",
            "tags": [
                "container_registry"
            ],
            "operationId": "getApiV4RegistryRepositoriesId"
        },
        {
            "server_url": "",
            "path": "/api/v4/events",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "scope",
                    "description": "Include all events across a user\u2019s projects",
                    "type": "string",
                    "required": false,
                    "example": "all"
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "action",
                    "description": "Event action to filter on",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "target_type",
                    "description": "Event target type to filter on",
                    "type": "string",
                    "enum": [
                        "issue",
                        "milestone",
                        "merge_request",
                        "note",
                        "project",
                        "snippet",
                        "user",
                        "wiki",
                        "design"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "before",
                    "description": "Include only events created before this date",
                    "type": "string",
                    "format": "date",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "after",
                    "description": "Include only events created after this date",
                    "type": "string",
                    "format": "date",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return events sorted in ascending and descending order",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List currently authenticated user's events",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Event"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 9.3.",
            "tags": [
                "events"
            ],
            "operationId": "getApiV4Events"
        },
        {
            "server_url": "",
            "path": "/api/v4/users/{id}/events",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or username of the user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "action",
                    "description": "Event action to filter on",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "target_type",
                    "description": "Event target type to filter on",
                    "type": "string",
                    "enum": [
                        "issue",
                        "milestone",
                        "merge_request",
                        "note",
                        "project",
                        "snippet",
                        "user",
                        "wiki",
                        "design"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "before",
                    "description": "Include only events created before this date",
                    "type": "string",
                    "format": "date",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "after",
                    "description": "Include only events created after this date",
                    "type": "string",
                    "format": "date",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return events sorted in ascending and descending order",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the contribution events of a specified user",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Event"
                        }
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.13.",
            "tags": [
                "events"
            ],
            "operationId": "getApiV4UsersIdEvents"
        },
        {
            "server_url": "",
            "path": "/api/v4/users/{user_id}/projects",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The ID or username of the user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Return projects ordered by field. storage_size, repository_size, wiki_size, packages_size are only available to admins. Similarity is available when searching and is limited to projects the user has access to.",
                    "type": "string",
                    "default": "created_at",
                    "enum": [
                        "id",
                        "name",
                        "path",
                        "created_at",
                        "updated_at",
                        "last_activity_at",
                        "similarity",
                        "star_count",
                        "storage_size",
                        "repository_size",
                        "wiki_size",
                        "packages_size"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return projects sorted in ascending and descending order",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "archived",
                    "description": "Limit by archived status",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "visibility",
                    "description": "Limit by visibility",
                    "type": "string",
                    "enum": [
                        "private",
                        "internal",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of projects matching the search criteria",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search_namespaces",
                    "description": "Include ancestor namespaces when matching search criteria",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "owned",
                    "description": "Limit by owned by authenticated user",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "starred",
                    "description": "Limit by starred status",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "imported",
                    "description": "Limit by imported by authenticated user",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "membership",
                    "description": "Limit by projects that the current user is a member of",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_issues_enabled",
                    "description": "Limit by enabled issues feature",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_merge_requests_enabled",
                    "description": "Limit by enabled merge requests feature",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_programming_language",
                    "description": "Limit to repositories which use the given programming language",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "min_access_level",
                    "description": "Limit by minimum access level of authenticated user",
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        10,
                        15,
                        20,
                        30,
                        40,
                        50
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "id_after",
                    "description": "Limit results to projects with IDs greater than the specified ID",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "id_before",
                    "description": "Limit results to projects with IDs less than the specified ID",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "last_activity_after",
                    "description": "Limit results to projects with last_activity after specified time. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "last_activity_before",
                    "description": "Limit results to projects with last_activity before specified time. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "repository_storage",
                    "description": "Which storage shard the repository is on. Available only to admins",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "topic",
                    "description": "Comma-separated list of topics. Limit results to projects having all topics",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "topic_id",
                    "description": "Limit results to projects with the assigned topic given by the topic ID",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "updated_before",
                    "description": "Return projects updated before the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "updated_after",
                    "description": "Return projects updated after the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_pending_delete",
                    "description": "Include projects in pending delete state. Can only be set by admins",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "marked_for_deletion_on",
                    "description": "Date when the project was marked for deletion",
                    "type": "string",
                    "format": "date",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "active",
                    "description": "Limit by projects that are not archived and not marked for deletion",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "wiki_checksum_failed",
                    "description": "Limit by projects where wiki checksum is failed",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "repository_checksum_failed",
                    "description": "Limit by projects where repository checksum is failed",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_hidden",
                    "description": "Include hidden projects. Can only be set by admins",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "simple",
                    "description": "Return only the ID, URL, name, and path of each project",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "statistics",
                    "description": "Include project statistics",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_custom_attributes",
                    "description": "Include custom attributes in the response",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a user projects",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_BasicProjectDetails"
                        }
                    }
                },
                "404": {
                    "description": "404 User Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a user projects",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4UsersUserIdProjects"
        },
        {
            "server_url": "",
            "path": "/api/v4/users/{user_id}/contributed_projects",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The ID or username of the user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Return projects ordered by field. storage_size, repository_size, wiki_size, packages_size are only available to admins. Similarity is available when searching and is limited to projects the user has access to.",
                    "type": "string",
                    "default": "created_at",
                    "enum": [
                        "id",
                        "name",
                        "path",
                        "created_at",
                        "updated_at",
                        "last_activity_at",
                        "similarity",
                        "star_count",
                        "storage_size",
                        "repository_size",
                        "wiki_size",
                        "packages_size"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return projects sorted in ascending and descending order",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "simple",
                    "description": "Return only the ID, URL, name, and path of each project",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get projects that a user has contributed to",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_BasicProjectDetails"
                        }
                    }
                },
                "404": {
                    "description": "404 User Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get projects that a user has contributed to",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4UsersUserIdContributedProjects"
        },
        {
            "server_url": "",
            "path": "/api/v4/users/{user_id}/starred_projects",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The ID or username of the user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Return projects ordered by field. storage_size, repository_size, wiki_size, packages_size are only available to admins. Similarity is available when searching and is limited to projects the user has access to.",
                    "type": "string",
                    "default": "created_at",
                    "enum": [
                        "id",
                        "name",
                        "path",
                        "created_at",
                        "updated_at",
                        "last_activity_at",
                        "similarity",
                        "star_count",
                        "storage_size",
                        "repository_size",
                        "wiki_size",
                        "packages_size"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Return projects sorted in ascending and descending order",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "archived",
                    "description": "Limit by archived status",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "visibility",
                    "description": "Limit by visibility",
                    "type": "string",
                    "enum": [
                        "private",
                        "internal",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of projects matching the search criteria",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search_namespaces",
                    "description": "Include ancestor namespaces when matching search criteria",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "owned",
                    "description": "Limit by owned by authenticated user",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "starred",
                    "description": "Limit by starred status",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "imported",
                    "description": "Limit by imported by authenticated user",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "membership",
                    "description": "Limit by projects that the current user is a member of",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_issues_enabled",
                    "description": "Limit by enabled issues feature",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_merge_requests_enabled",
                    "description": "Limit by enabled merge requests feature",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_programming_language",
                    "description": "Limit to repositories which use the given programming language",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "min_access_level",
                    "description": "Limit by minimum access level of authenticated user",
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        10,
                        15,
                        20,
                        30,
                        40,
                        50
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "id_after",
                    "description": "Limit results to projects with IDs greater than the specified ID",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "id_before",
                    "description": "Limit results to projects with IDs less than the specified ID",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "last_activity_after",
                    "description": "Limit results to projects with last_activity after specified time. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "last_activity_before",
                    "description": "Limit results to projects with last_activity before specified time. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "repository_storage",
                    "description": "Which storage shard the repository is on. Available only to admins",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "topic",
                    "description": "Comma-separated list of topics. Limit results to projects having all topics",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "topic_id",
                    "description": "Limit results to projects with the assigned topic given by the topic ID",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "updated_before",
                    "description": "Return projects updated before the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "updated_after",
                    "description": "Return projects updated after the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_pending_delete",
                    "description": "Include projects in pending delete state. Can only be set by admins",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "marked_for_deletion_on",
                    "description": "Date when the project was marked for deletion",
                    "type": "string",
                    "format": "date",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "active",
                    "description": "Limit by projects that are not archived and not marked for deletion",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "wiki_checksum_failed",
                    "description": "Limit by projects where wiki checksum is failed",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "repository_checksum_failed",
                    "description": "Limit by projects where repository checksum is failed",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "include_hidden",
                    "description": "Include hidden projects. Can only be set by admins",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "simple",
                    "description": "Return only the ID, URL, name, and path of each project",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "statistics",
                    "description": "Include project statistics",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get projects starred by a user",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_BasicProjectDetails"
                        }
                    }
                },
                "404": {
                    "description": "404 User Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Get projects starred by a user",
            "tags": [
                "projects"
            ],
            "operationId": "getApiV4UsersUserIdStarredProjects"
        },
        {
            "server_url": "",
            "path": "/api/v4/features",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "List all features",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Feature"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all persisted features, with its gate values.",
            "tags": [
                "features"
            ],
            "operationId": "getApiV4Features"
        },
        {
            "server_url": "",
            "path": "/api/v4/features/definitions",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "List all feature definitions",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Feature_Definition"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all feature definitions.",
            "tags": [
                "features"
            ],
            "operationId": "getApiV4FeaturesDefinitions"
        },
        {
            "server_url": "",
            "path": "/api/v4/geo/proxy",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Returns a Geo proxy response"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Returns a Geo proxy response",
            "tags": [
                "geo"
            ],
            "operationId": "getApiV4GeoProxy"
        },
        {
            "server_url": "",
            "path": "/api/v4/geo/retrieve/{replicable_name}/{replicable_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "replicable_name",
                    "description": "The replicable name of a replicator instance",
                    "type": "string",
                    "required": true,
                    "example": "package_file"
                },
                {
                    "in": "path",
                    "name": "replicable_id",
                    "description": "The replicable ID of a replicable instance",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Returns a replicable file from store (via CDN or sendfile)"
                },
                "401": {
                    "description": "401 Unauthorized"
                },
                "404": {
                    "description": "404 Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Returns a replicable file from store (via CDN or sendfile)",
            "tags": [
                "geo"
            ],
            "operationId": "getApiV4GeoRetrieveReplicableNameReplicableId"
        },
        {
            "server_url": "",
            "path": "/api/v4/geo/repositories/{gl_repository}/pipeline_refs",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "gl_repository",
                    "description": "The repository to check",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Returns the list of pipeline refs for the project",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/EE_API_Entities_Geo_PipelineRefs"
                        }
                    }
                },
                "401": {
                    "description": "401 Unauthorized"
                },
                "404": {
                    "description": "404 Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Returns the list of pipeline refs for the project",
            "tags": [
                "geo"
            ],
            "operationId": "getApiV4GeoRepositoriesGlRepositoryPipelineRefs"
        },
        {
            "server_url": "",
            "path": "/api/v4/keys/{id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of an SSH key",
                    "type": "string",
                    "required": true,
                    "example": "2"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get single ssh key by id. Only available to admin users",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_SSHKeyWithUser"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get SSH key with user by ID of an SSH key. Note only administrators can lookup SSH key with user by ID\\\n        of an SSH key",
            "tags": [
                "keys"
            ],
            "operationId": "getApiV4KeysId"
        },
        {
            "server_url": "",
            "path": "/api/v4/keys",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "fingerprint",
                    "description": "The fingerprint of an SSH key",
                    "type": "string",
                    "required": true,
                    "example": "ba:81:59:68:d7:6c:cd:02:02:bf:6a:9b:55:4e:af:d1"
                }
            ],
            "responses": {
                "200": {
                    "description": "Get user by fingerprint of SSH key",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_UserWithAdmin"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "You can search for a user that owns a specific SSH key. Note only administrators can lookup SSH key\\\n        with the fingerprint of an SSH key",
            "tags": [
                "keys"
            ],
            "operationId": "getApiV4Keys"
        },
        {
            "server_url": "",
            "path": "/api/v4/merge_requests",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "author_id",
                    "description": "Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "author_username",
                    "description": "Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "assignee_id",
                    "description": "Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "assignee_username",
                    "description": "Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "reviewer_username",
                    "description": "Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "labels",
                    "description": "Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "milestone",
                    "description": "Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "my_reaction_emoji",
                    "description": "Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "reviewer_id",
                    "description": "Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "state",
                    "description": "Returns `all` merge requests or just those that are `opened`, `closed`, `locked`, or `merged`.",
                    "type": "string",
                    "default": "all",
                    "enum": [
                        "opened",
                        "closed",
                        "locked",
                        "merged",
                        "all"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "order_by",
                    "description": "Returns merge requests ordered by `created_at`, `label_priority`, `milestone_due`, `popularity`, `priority`, `title`, `updated_at` or `merged_at` fields. Introduced in GitLab 14.8.",
                    "type": "string",
                    "default": "created_at",
                    "enum": [
                        "created_at",
                        "label_priority",
                        "milestone_due",
                        "popularity",
                        "priority",
                        "title",
                        "updated_at",
                        "merged_at"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Returns merge requests sorted in `asc` or `desc` order.",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_labels_details",
                    "description": "If `true`, response returns more details for each label in labels field: `:name`,`:color`, `:description`, `:description_html`, `:text_color`",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "with_merge_status_recheck",
                    "description": "If `true`, this projection requests (but does not guarantee) that the `merge_status` field be recalculated asynchronously. Introduced in GitLab 13.0.",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "created_after",
                    "description": "Returns merge requests created on or after the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "created_before",
                    "description": "Returns merge requests created on or before the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "updated_after",
                    "description": "Returns merge requests updated on or after the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "updated_before",
                    "description": "Returns merge requests updated on or before the given time. Expected in ISO 8601 format.",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "view",
                    "description": "If simple, returns the `iid`, URL, title, description, and basic state of merge request",
                    "type": "string",
                    "enum": [
                        "simple"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "scope",
                    "description": "Returns merge requests for the given scope: `created_by_me`, `assigned_to_me` or `all`",
                    "type": "string",
                    "default": "created_by_me",
                    "enum": [
                        "created-by-me",
                        "assigned-to-me",
                        "created_by_me",
                        "assigned_to_me",
                        "all"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "source_branch",
                    "description": "Returns merge requests with the given source branch",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "source_project_id",
                    "description": "Returns merge requests with the given source project id",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "target_branch",
                    "description": "Returns merge requests with the given target branch",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Search merge requests against their `title` and `description`.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "in",
                    "description": "Modify the scope of the search attribute. `title`, `description`, or a string joining them with comma.",
                    "type": "string",
                    "required": false,
                    "example": "title,description"
                },
                {
                    "in": "query",
                    "name": "wip",
                    "description": "Filter merge requests against their `wip` status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.",
                    "type": "string",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[author_id]",
                    "description": "`<Negated>` Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[author_username]",
                    "description": "`<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[assignee_id]",
                    "description": "`<Negated>` Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[assignee_username]",
                    "description": "`<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[reviewer_username]",
                    "description": "`<Negated>` Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[labels]",
                    "description": "`<Negated>` Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[milestone]",
                    "description": "`<Negated>` Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[my_reaction_emoji]",
                    "description": "`<Negated>` Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "not[reviewer_id]",
                    "description": "`<Negated>` Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "deployed_before",
                    "description": "Returns merge requests deployed before the given date/time. Expected in ISO 8601 format.",
                    "type": "string",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "deployed_after",
                    "description": "Returns merge requests deployed after the given date/time. Expected in ISO 8601 format",
                    "type": "string",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "environment",
                    "description": "Returns merge requests deployed to the given environment",
                    "type": "string",
                    "required": false,
                    "example": "2019-03-15T08:00:00Z"
                },
                {
                    "in": "query",
                    "name": "approved",
                    "description": "Filters merge requests by their `approved` status. `yes` returns only approved merge requests. `no` returns only non-approved merge requests.",
                    "type": "string",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "merge_user_id",
                    "description": "Returns merge requests which have been merged by the user with the given user `id`. Mutually exclusive with `merge_user_username`.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "merge_user_username",
                    "description": "Returns merge requests which have been merged by the user with the given `username`. Mutually exclusive with `merge_user_id`.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "approver_ids",
                    "description": "Return merge requests which have specified the users with the given IDs as an individual approver",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "approved_by_ids",
                    "description": "Return merge requests which have been approved by the specified users with the given IDs",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "approved_by_usernames",
                    "description": "Return merge requests which have been approved by the specified users with the given\n            usernames",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List merge requests",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MergeRequestBasic"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Get all merge requests the authenticated user has access to. By default it returns only merge requests created by the current user. To get all merge requests, use parameter `scope=all`.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "getApiV4MergeRequests"
        },
        {
            "server_url": "",
            "path": "/api/v4/namespaces/{id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "ID or URL-encoded path of the namespace",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get namespace by ID",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Namespace"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a namespace by ID",
            "tags": [
                "namespaces"
            ],
            "operationId": "getApiV4NamespacesId"
        },
        {
            "server_url": "",
            "path": "/api/v4/namespaces/{id}/gitlab_subscription",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Returns the subscription for the namespace",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_GitlabSubscription"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Returns the subscription for the namespace",
            "tags": [
                "namespaces"
            ],
            "operationId": "getApiV4NamespacesIdGitlabSubscription"
        },
        {
            "server_url": "",
            "path": "/api/v4/namespaces/storage/limit_exclusions",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Retrieve all limit exclusions",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Namespaces_Storage_LimitExclusion"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Gets all records for namespaces that have been excluded",
            "tags": [
                "namespaces"
            ],
            "operationId": "getApiV4NamespacesStorageLimitExclusions"
        },
        {
            "server_url": "",
            "path": "/api/v4/namespaces",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "search",
                    "description": "Returns a list of namespaces the user is authorized to view based on the search criteria",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "owned_only",
                    "description": "In GitLab 14.2 and later, returns a list of owned namespaces only",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "top_level_only",
                    "description": "Only include top level namespaces",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "requested_hosted_plan",
                    "description": "Name of the hosted plan requested by the customer",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List namespaces",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Namespace"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of the namespaces of the authenticated user. If the user is an administrator, a list of all namespaces in the GitLab instance is shown.",
            "tags": [
                "namespaces"
            ],
            "operationId": "getApiV4Namespaces"
        },
        {
            "server_url": "",
            "path": "/api/v4/namespaces/{id}/exists",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "Namespace\u2019s path",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "parent_id",
                    "description": "The ID of the parent namespace. If no ID is specified, only top-level namespaces are considered.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get existence of a namespace",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_NamespaceExistence"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Get existence of a namespace by path. Suggests a new namespace path that does not already exist.",
            "tags": [
                "namespaces"
            ],
            "operationId": "getApiV4NamespacesIdExists"
        },
        {
            "server_url": "",
            "path": "/api/v4/pages/domains",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get all pages domains",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_PagesDomainBasic"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get all pages domains",
            "tags": [
                "pages"
            ],
            "operationId": "getApiV4PagesDomains"
        },
        {
            "server_url": "",
            "path": "/api/v4/personal_access_tokens/self",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Get single personal access token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_PersonalAccessTokenWithLastUsedIps"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the details of a personal access token by passing it to the API in a header",
            "tags": [
                "personal_access_tokens"
            ],
            "operationId": "getApiV4PersonalAccessTokensSelf"
        },
        {
            "server_url": "",
            "path": "/api/v4/personal_access_tokens/self/associations",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "min_access_level",
                    "description": "Limit by minimum access level of authenticated user",
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        10,
                        15,
                        20,
                        30,
                        40,
                        50
                    ],
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Return personal access token associations",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_PersonalAccessToken"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get groups and projects this personal access token can access by passing it to the API in a header",
            "tags": [
                "personal_access_tokens"
            ],
            "operationId": "getApiV4PersonalAccessTokensSelfAssociations"
        },
        {
            "server_url": "",
            "path": "/api/v4/personal_access_tokens",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "user_id",
                    "description": "Filter PATs by User ID",
                    "type": "integer",
                    "format": "int32",
                    "required": false,
                    "example": 2
                },
                {
                    "in": "query",
                    "name": "revoked",
                    "description": "Filter tokens where revoked state matches parameter",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "state",
                    "description": "Filter tokens which are either active or not",
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ],
                    "required": false,
                    "example": "active"
                },
                {
                    "in": "query",
                    "name": "created_before",
                    "description": "Filter tokens which were created before given datetime",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2022-01-01"
                },
                {
                    "in": "query",
                    "name": "created_after",
                    "description": "Filter tokens which were created after given datetime",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2021-01-01"
                },
                {
                    "in": "query",
                    "name": "last_used_before",
                    "description": "Filter tokens which were used before given datetime",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2021-01-01"
                },
                {
                    "in": "query",
                    "name": "last_used_after",
                    "description": "Filter tokens which were used after given datetime",
                    "type": "string",
                    "format": "date-time",
                    "required": false,
                    "example": "2022-01-01"
                },
                {
                    "in": "query",
                    "name": "expires_before",
                    "description": "Filter tokens which expire before given datetime",
                    "type": "string",
                    "format": "date",
                    "required": false,
                    "example": "2022-01-01"
                },
                {
                    "in": "query",
                    "name": "expires_after",
                    "description": "Filter tokens which expire after given datetime",
                    "type": "string",
                    "format": "date",
                    "required": false,
                    "example": "2021-01-01"
                },
                {
                    "in": "query",
                    "name": "search",
                    "description": "Filters tokens by name",
                    "type": "string",
                    "required": false,
                    "example": "token"
                },
                {
                    "in": "query",
                    "name": "sort",
                    "description": "Sort tokens",
                    "type": "string",
                    "required": false,
                    "example": "created_at_desc"
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List personal access tokens",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_PersonalAccessToken"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Get all personal access tokens the authenticated user has access to.",
            "tags": [
                "personal_access_tokens"
            ],
            "operationId": "getApiV4PersonalAccessTokens"
        },
        {
            "server_url": "",
            "path": "/api/v4/personal_access_tokens/{id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get single personal access token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_PersonalAccessTokenWithLastUsedIps"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a personal access token by using the ID of the personal access token.",
            "tags": [
                "personal_access_tokens"
            ],
            "operationId": "getApiV4PersonalAccessTokensId"
        },
        {
            "server_url": "",
            "path": "/api/v4/snippets",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "created_after",
                    "description": "Return snippets created after the specified time",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "created_before",
                    "description": "Return snippets created before the specified time",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a snippets list for an authenticated user",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Snippet"
                        }
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.15.",
            "tags": [
                "snippets"
            ],
            "operationId": "getApiV4Snippets"
        },
        {
            "server_url": "",
            "path": "/api/v4/snippets/public",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "created_after",
                    "description": "Return snippets created after the specified time",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "created_before",
                    "description": "Return snippets created before the specified time",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List all public personal snippets current_user has access to",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_PersonalSnippet"
                        }
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.15.",
            "tags": [
                "snippets"
            ],
            "operationId": "getApiV4SnippetsPublic"
        },
        {
            "server_url": "",
            "path": "/api/v4/snippets/all",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "created_after",
                    "description": "Return snippets created after the specified time",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "created_before",
                    "description": "Return snippets created before the specified time",
                    "type": "string",
                    "format": "date-time",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "repository_storage",
                    "description": "Filter by repository storage used by the snippet",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List all snippets current_user has access to",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Snippet"
                        }
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.3.",
            "tags": [
                "snippets"
            ],
            "operationId": "getApiV4SnippetsAll"
        },
        {
            "server_url": "",
            "path": "/api/v4/snippets/{id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a snippet",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a single snippet",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_PersonalSnippet"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.15.",
            "tags": [
                "snippets"
            ],
            "operationId": "getApiV4SnippetsId"
        },
        {
            "server_url": "",
            "path": "/api/v4/snippets/{id}/raw",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a snippet",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a raw snippet"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.15.",
            "tags": [
                "snippets"
            ],
            "operationId": "getApiV4SnippetsIdRaw"
        },
        {
            "server_url": "",
            "path": "/api/v4/snippets/{id}/files/{ref}/{file_path}/raw",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "file_path",
                    "description": "The url encoded path to the file, e.g. lib%2Fclass%2Erb",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "ref",
                    "description": "The name of branch, tag or commit",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get raw snippet file contents from the repository"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get raw snippet file contents from the repository",
            "tags": [
                "snippets"
            ],
            "operationId": "getApiV4SnippetsIdFilesRefFilePathRaw"
        },
        {
            "server_url": "",
            "path": "/api/v4/snippets/{id}/user_agent_detail",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a snippet",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get the user agent details for a snippet",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_UserAgentDetail"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get the user agent details for a snippet",
            "tags": [
                "snippets"
            ],
            "operationId": "getApiV4SnippetsIdUserAgentDetail"
        },
        {
            "server_url": "",
            "path": "/api/v4/hooks",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "List system hooks",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_Hook"
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all system hooks",
            "tags": [
                "system_hooks"
            ],
            "operationId": "getApiV4Hooks"
        },
        {
            "server_url": "",
            "path": "/api/v4/hooks/{hook_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of the system hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get system hook",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Hook"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Get a system hook by its ID. Introduced in GitLab 14.9.",
            "tags": [
                "system_hooks"
            ],
            "operationId": "getApiV4HooksHookId"
        },
        {
            "server_url": "",
            "path": "/api/v4/feature_flags/unleash/{project_id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "project_id",
                    "description": "The ID of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "instance_id",
                    "description": "The instance ID of Unleash Client",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "app_name",
                    "description": "The application name of Unleash Client",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "get Unleash(s)"
                }
            },
            "request_body_parameters": {},
            "description": "",
            "tags": [
                "feature_flags"
            ],
            "operationId": "getApiV4FeatureFlagsUnleashProjectId"
        },
        {
            "server_url": "",
            "path": "/api/v4/feature_flags/unleash/{project_id}/features",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "project_id",
                    "description": "The ID of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "instance_id",
                    "description": "The instance ID of Unleash Client",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "app_name",
                    "description": "The application name of Unleash Client",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of features (deprecated, v2 client support)"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of features (deprecated, v2 client support)",
            "tags": [
                "unleash_api"
            ],
            "operationId": "getApiV4FeatureFlagsUnleashProjectIdFeatures"
        },
        {
            "server_url": "",
            "path": "/api/v4/feature_flags/unleash/{project_id}/client/features",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "project_id",
                    "description": "The ID of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "instance_id",
                    "description": "The instance ID of Unleash Client",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "app_name",
                    "description": "The application name of Unleash Client",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of features"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of features",
            "tags": [
                "unleash_api"
            ],
            "operationId": "getApiV4FeatureFlagsUnleashProjectIdClientFeatures"
        },
        {
            "server_url": "",
            "path": "/api/v4/usage_data/metric_definitions",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "include_paths",
                    "description": "Include file paths in the metric definitions",
                    "type": "boolean",
                    "default": false,
                    "required": false,
                    "example": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get a list of all metric definitions"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.11.",
            "tags": [
                "usage_data",
                "metrics"
            ],
            "operationId": "getApiV4UsageDataMetricDefinitions"
        },
        {
            "server_url": "",
            "path": "/api/v4/usage_data/service_ping",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Get the latest ServicePing payload"
                },
                "401": {
                    "description": "401 Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Introduces in Gitlab 16.9. Requires personal access token with read_service_ping scope.",
            "tags": [
                "usage_data"
            ],
            "operationId": "getApiV4UsageDataServicePing"
        },
        {
            "server_url": "",
            "path": "/api/v4/usage_data/non_sql_metrics",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Get Non SQL usage ping metrics"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.11.",
            "tags": [
                "usage_data"
            ],
            "operationId": "getApiV4UsageDataNonSqlMetrics"
        },
        {
            "server_url": "",
            "path": "/api/v4/usage_data/queries",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Get raw SQL queries for usage data SQL metrics"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.11.",
            "tags": [
                "usage_data"
            ],
            "operationId": "getApiV4UsageDataQueries"
        },
        {
            "server_url": "",
            "path": "/api/v4/user_counts",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Return the user specific counts",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_UserCounts"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Assigned open issues, assigned MRs and pending todos count",
            "tags": [
                "user_counts"
            ],
            "operationId": "getApiV4UserCounts"
        },
        {
            "server_url": "",
            "path": "/api/v4/application/plan_limits",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "plan_name",
                    "description": "Name of the plan to get the limits from. Default: default.",
                    "type": "string",
                    "default": "default",
                    "enum": [
                        "default",
                        "free",
                        "bronze",
                        "silver",
                        "premium",
                        "gold",
                        "ultimate",
                        "ultimate_trial",
                        "ultimate_trial_paid_customer",
                        "premium_trial",
                        "opensource"
                    ],
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Get current plan limits",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_PlanLimit"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "List the current limits of a plan on the GitLab instance.",
            "tags": [
                "plan_limits"
            ],
            "operationId": "getApiV4ApplicationPlanLimits"
        },
        {
            "server_url": "",
            "path": "/api/v4/application/appearance",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Get the current appearance",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Appearance"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get the current appearance",
            "tags": [
                "application"
            ],
            "operationId": "getApiV4ApplicationAppearance"
        },
        {
            "server_url": "",
            "path": "/api/v4/application/statistics",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Get the current application statistics",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ApplicationStatistics"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Get the current application statistics",
            "tags": [
                "application"
            ],
            "operationId": "getApiV4ApplicationStatistics"
        },
        {
            "server_url": "",
            "path": "/api/v4/discover-cert-based-clusters",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "group_id",
                    "description": "The group ID to find all certificate-based clusters in the hierarchy",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Discover all descendant certificate-based clusters in a group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DiscoveredClusters"
                    }
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.9. It will be removed in 18.0.",
            "tags": [
                "clusters"
            ],
            "operationId": "getApiV4DiscoverCertBasedClusters"
        },
        {
            "server_url": "",
            "path": "/api/v4/deploy_keys",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "public",
                    "description": "Only return deploy keys that are public",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List all deploy keys",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_DeployKey"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all deploy keys across all projects of the GitLab instance. This endpoint requires administrator access and is not available on GitLab.com.",
            "tags": [
                "deploy_keys"
            ],
            "operationId": "getApiV4DeployKeys"
        },
        {
            "server_url": "",
            "path": "/api/v4/deploy_tokens",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                },
                {
                    "in": "query",
                    "name": "active",
                    "description": "Limit by active status",
                    "type": "boolean",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "List all deploy tokens",
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/API_Entities_DeployToken"
                        }
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Get a list of all deploy tokens across the GitLab instance. This endpoint requires administrator access. This feature was introduced in GitLab 12.9.",
            "tags": [
                "deploy_tokens"
            ],
            "operationId": "getApiV4DeployTokens"
        },
        {
            "server_url": "",
            "path": "/api/v4/metadata",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Retrieve metadata information for this GitLab instance",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Metadata"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.2.",
            "tags": [
                "metadata"
            ],
            "operationId": "getApiV4Metadata"
        },
        {
            "server_url": "",
            "path": "/api/v4/version",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Retrieves version information for the GitLab instance",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Metadata"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.13 and deprecated in 15.5. We recommend you instead use the Metadata API.",
            "tags": [
                "metadata"
            ],
            "operationId": "getApiV4Version"
        },
        {
            "server_url": "",
            "path": "/api/v4/topics",
            "method": "get",
            "parameters": [
                {
                    "in": "query",
                    "name": "search",
                    "description": "Return list of topics matching the search criteria",
                    "type": "string",
                    "required": false,
                    "example": "search"
                },
                {
                    "in": "query",
                    "name": "without_projects",
                    "description": "Return list of topics without assigned projects",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "organization_id",
                    "description": "The organization id for the topics",
                    "type": "integer",
                    "format": "int32",
                    "default": {},
                    "required": false
                },
                {
                    "in": "query",
                    "name": "page",
                    "description": "Current page number",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "required": false,
                    "example": 1
                },
                {
                    "in": "query",
                    "name": "per_page",
                    "description": "Number of items per page",
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "required": false,
                    "example": 20
                }
            ],
            "responses": {
                "200": {
                    "description": "Get topics",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Projects_Topic"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.5.",
            "tags": [
                "topics"
            ],
            "operationId": "getApiV4Topics"
        },
        {
            "server_url": "",
            "path": "/api/v4/topics/{id}",
            "method": "get",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "ID of project topic",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Get topic",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Projects_Topic"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.5.",
            "tags": [
                "topics"
            ],
            "operationId": "getApiV4TopicsId"
        },
        {
            "server_url": "",
            "path": "/api/v4/web_commits/public_key",
            "method": "get",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Get the public key for web commits"
                },
                "503": {
                    "description": "The git server, Gitaly, is not available at this time. Please contact your administrator."
                },
                "404": {
                    "description": "Public key not found."
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.4.",
            "tags": [
                "web_commits"
            ],
            "operationId": "getApiV4WebCommitsPublicKey"
        }
    ],
    "tools": [
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/access_requests",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AccessRequester"
                    },
                    "examples": {
                        "successfull_response": {
                            "id": 1,
                            "username": "raymond_smith",
                            "name": "Raymond Smith",
                            "state": "active",
                            "created_at": "2012-10-22T14:13:35Z",
                            "access_level": 20
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.11.",
            "tags": [
                "access_requests"
            ],
            "operationId": "postApiV4GroupsIdAccessRequests"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/access_requests/{user_id}/approve",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the access requester",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdAccessRequestsUserIdApprove",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "access_level": {
                                "type": "integer",
                                "format": "int32",
                                "description": "A valid access level (defaults: `30`, the Developer role)",
                                "default": 30
                            }
                        },
                        "description": "Approves an access request for the given user."
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AccessRequester"
                    },
                    "examples": {
                        "successfull_response": {
                            "id": 1,
                            "username": "raymond_smith",
                            "name": "Raymond Smith",
                            "state": "active",
                            "created_at": "2012-10-22T14:13:35Z",
                            "access_level": 20
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.11.",
            "tags": [
                "access_requests"
            ],
            "operationId": "putApiV4GroupsIdAccessRequestsUserIdApprove"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/access_requests/{user_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the access requester",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Denies an access request for the given user."
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.11.",
            "tags": [
                "access_requests"
            ],
            "operationId": "deleteApiV4GroupsIdAccessRequestsUserId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/epics/{epic_iid}/award_emoji",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "epic_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdEpicsEpicIidAwardEmoji",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the emoji without colons."
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Add a new emoji reaction"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add a new emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "postApiV4GroupsIdEpicsEpicIidAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/epics/{epic_iid}/award_emoji/{award_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of an emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "epic_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete an emoji reaction"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "deleteApiV4GroupsIdEpicsEpicIidAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/epics/{epic_iid}/notes/{note_id}/award_emoji",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "epic_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmoji",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the emoji without colons."
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Add a new emoji reaction"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add a new emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "postApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/epics/{epic_iid}/notes/{note_id}/award_emoji/{award_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of an emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "epic_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete an emoji reaction"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "deleteApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/badges",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdBadges",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "link_url": {
                                "type": "string",
                                "description": "URL of the badge link"
                            },
                            "image_url": {
                                "type": "string",
                                "description": "URL of the badge image"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name for the badge"
                            }
                        },
                        "required": [
                            "link_url",
                            "image_url"
                        ],
                        "description": "Adds a badge to a group."
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Adds a badge to a group.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Badge"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "badges"
            ],
            "operationId": "postApiV4GroupsIdBadges"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/badges/{badge_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "badge_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdBadgesBadgeId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "link_url": {
                                "type": "string",
                                "description": "URL of the badge link"
                            },
                            "image_url": {
                                "type": "string",
                                "description": "URL of the badge image"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name for the badge"
                            }
                        },
                        "description": "Updates a badge of a group."
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Updates a badge of a group.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Badge"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "badges"
            ],
            "operationId": "putApiV4GroupsIdBadgesBadgeId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/badges/{badge_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "badge_id",
                    "description": "The badge ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Removes a badge from the group."
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "badges"
            ],
            "operationId": "deleteApiV4GroupsIdBadgesBadgeId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/custom_attributes/{key}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the custom attribute",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdCustomAttributesKey",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "The value of the custom attribute"
                            }
                        },
                        "required": [
                            "value"
                        ],
                        "description": "Set a custom attribute on a group"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Set a custom attribute on a group"
                }
            },
            "request_body_parameters": {},
            "description": "Set a custom attribute on a group",
            "tags": [
                "groups"
            ],
            "operationId": "putApiV4GroupsIdCustomAttributesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/custom_attributes/{key}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the custom attribute",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a custom attribute on a group"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a custom attribute on a group",
            "tags": [
                "groups"
            ],
            "operationId": "deleteApiV4GroupsIdCustomAttributesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4Groups",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the group"
                            },
                            "path": {
                                "type": "string",
                                "description": "The path of the group"
                            },
                            "parent_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The parent group id for creating nested group"
                            },
                            "organization_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The organization id for the group",
                                "default": {}
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the group"
                            },
                            "visibility": {
                                "type": "string",
                                "description": "The visibility of the group",
                                "enum": [
                                    "private",
                                    "internal",
                                    "public"
                                ]
                            },
                            "avatar": {
                                "type": "file",
                                "description": "Avatar image for the group"
                            },
                            "share_with_group_lock": {
                                "type": "boolean",
                                "description": "Prevent sharing a project with another group within this group"
                            },
                            "require_two_factor_authentication": {
                                "type": "boolean",
                                "description": "Require all users in this group to setup Two-factor authentication"
                            },
                            "two_factor_grace_period": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Time before Two-factor authentication is enforced"
                            },
                            "project_creation_level": {
                                "type": "string",
                                "description": "Determine if developers can create projects in the group",
                                "enum": [
                                    "noone",
                                    "owner",
                                    "maintainer",
                                    "developer",
                                    "administrator"
                                ]
                            },
                            "auto_devops_enabled": {
                                "type": "boolean",
                                "description": "Default to Auto DevOps pipeline for all projects within this group"
                            },
                            "subgroup_creation_level": {
                                "type": "string",
                                "description": "Allowed to create subgroups",
                                "enum": [
                                    "owner",
                                    "maintainer"
                                ]
                            },
                            "emails_disabled": {
                                "type": "boolean",
                                "description": "_(Deprecated)_ Disable email notifications. Use: emails_enabled"
                            },
                            "emails_enabled": {
                                "type": "boolean",
                                "description": "Enable email notifications"
                            },
                            "show_diff_preview_in_email": {
                                "type": "boolean",
                                "description": "Include the code diff preview in merge request notification emails"
                            },
                            "mentions_disabled": {
                                "type": "boolean",
                                "description": "Disable a group from getting mentioned"
                            },
                            "lfs_enabled": {
                                "type": "boolean",
                                "description": "Enable/disable LFS for the projects in this group"
                            },
                            "request_access_enabled": {
                                "type": "boolean",
                                "description": "Allow users to request member access"
                            },
                            "default_branch": {
                                "type": "string",
                                "description": "The default branch of group's projects",
                                "example": "main"
                            },
                            "default_branch_protection": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Determine if developers can push to default branch",
                                "enum": [
                                    0,
                                    3,
                                    1,
                                    2,
                                    4
                                ]
                            },
                            "default_branch_protection_defaults": {
                                "type": "object",
                                "description": "Determine if developers can push to default branch",
                                "properties": {
                                    "allowed_to_push": {
                                        "type": "array",
                                        "description": "An array of access levels allowed to push",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "access_level": {
                                                    "type": "integer",
                                                    "format": "int32",
                                                    "description": "A valid access level",
                                                    "enum": [
                                                        30,
                                                        40,
                                                        60,
                                                        0
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "access_level"
                                            ]
                                        }
                                    },
                                    "allow_force_push": {
                                        "type": "boolean",
                                        "description": "Allow force push for all users with push access."
                                    },
                                    "allowed_to_merge": {
                                        "type": "array",
                                        "description": "An array of access levels allowed to merge",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "access_level": {
                                                    "type": "integer",
                                                    "format": "int32",
                                                    "description": "A valid access level",
                                                    "enum": [
                                                        30,
                                                        40,
                                                        60,
                                                        0
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "access_level"
                                            ]
                                        }
                                    },
                                    "code_owner_approval_required": {
                                        "type": "boolean",
                                        "description": "Require approval from code owners"
                                    },
                                    "developer_can_initial_push": {
                                        "type": "boolean",
                                        "description": "Allow developers to initial push"
                                    }
                                }
                            },
                            "shared_runners_setting": {
                                "type": "string",
                                "description": "Enable/disable shared runners for the group and its subgroups and projects",
                                "enum": [
                                    "disabled_and_unoverridable",
                                    "disabled_and_overridable",
                                    "enabled"
                                ]
                            },
                            "enabled_git_access_protocol": {
                                "type": "string",
                                "description": "Allow only the selected protocols to be used for Git access.",
                                "enum": [
                                    "ssh",
                                    "http",
                                    "all"
                                ]
                            },
                            "membership_lock": {
                                "type": "boolean",
                                "description": "Prevent adding new members to projects within this group"
                            },
                            "ldap_cn": {
                                "type": "string",
                                "description": "LDAP Common Name"
                            },
                            "ldap_access": {
                                "type": "integer",
                                "format": "int32",
                                "description": "A valid access level"
                            },
                            "shared_runners_minutes_limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "(admin-only) compute minutes quota for this group"
                            },
                            "extra_shared_runners_minutes_limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "(admin-only) Extra compute minutes quota for this group"
                            },
                            "wiki_access_level": {
                                "type": "string",
                                "description": "Wiki access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "duo_availability": {
                                "type": "string",
                                "description": "Duo availability. One of `default_on`, `default_off` or `never_on`",
                                "enum": [
                                    "default_on",
                                    "default_off",
                                    "never_on"
                                ]
                            },
                            "amazon_q_auto_review_enabled": {
                                "type": "boolean",
                                "description": "Enable Amazon Q auto review for merge request"
                            },
                            "experiment_features_enabled": {
                                "type": "boolean",
                                "description": "Enable experiment features for this group"
                            }
                        },
                        "required": [
                            "name",
                            "path"
                        ],
                        "description": "Create a group. Available only for users who can create groups."
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a group. Available only for users who can create groups.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Group"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Create a group. Available only for users who can create groups.",
            "tags": [
                "groups"
            ],
            "operationId": "postApiV4Groups"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the group"
                            },
                            "path": {
                                "type": "string",
                                "description": "The path of the group"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the group"
                            },
                            "visibility": {
                                "type": "string",
                                "description": "The visibility of the group",
                                "enum": [
                                    "private",
                                    "internal",
                                    "public"
                                ]
                            },
                            "avatar": {
                                "type": "file",
                                "description": "Avatar image for the group"
                            },
                            "share_with_group_lock": {
                                "type": "boolean",
                                "description": "Prevent sharing a project with another group within this group"
                            },
                            "require_two_factor_authentication": {
                                "type": "boolean",
                                "description": "Require all users in this group to setup Two-factor authentication"
                            },
                            "two_factor_grace_period": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Time before Two-factor authentication is enforced"
                            },
                            "project_creation_level": {
                                "type": "string",
                                "description": "Determine if developers can create projects in the group",
                                "enum": [
                                    "noone",
                                    "owner",
                                    "maintainer",
                                    "developer",
                                    "administrator"
                                ]
                            },
                            "auto_devops_enabled": {
                                "type": "boolean",
                                "description": "Default to Auto DevOps pipeline for all projects within this group"
                            },
                            "subgroup_creation_level": {
                                "type": "string",
                                "description": "Allowed to create subgroups",
                                "enum": [
                                    "owner",
                                    "maintainer"
                                ]
                            },
                            "emails_disabled": {
                                "type": "boolean",
                                "description": "_(Deprecated)_ Disable email notifications. Use: emails_enabled"
                            },
                            "emails_enabled": {
                                "type": "boolean",
                                "description": "Enable email notifications"
                            },
                            "show_diff_preview_in_email": {
                                "type": "boolean",
                                "description": "Include the code diff preview in merge request notification emails"
                            },
                            "mentions_disabled": {
                                "type": "boolean",
                                "description": "Disable a group from getting mentioned"
                            },
                            "lfs_enabled": {
                                "type": "boolean",
                                "description": "Enable/disable LFS for the projects in this group"
                            },
                            "request_access_enabled": {
                                "type": "boolean",
                                "description": "Allow users to request member access"
                            },
                            "default_branch": {
                                "type": "string",
                                "description": "The default branch of group's projects",
                                "example": "main"
                            },
                            "default_branch_protection": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Determine if developers can push to default branch",
                                "enum": [
                                    0,
                                    3,
                                    1,
                                    2,
                                    4
                                ]
                            },
                            "default_branch_protection_defaults": {
                                "type": "object",
                                "description": "Determine if developers can push to default branch",
                                "properties": {
                                    "allowed_to_push": {
                                        "type": "array",
                                        "description": "An array of access levels allowed to push",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "access_level": {
                                                    "type": "integer",
                                                    "format": "int32",
                                                    "description": "A valid access level",
                                                    "enum": [
                                                        30,
                                                        40,
                                                        60,
                                                        0
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "access_level"
                                            ]
                                        }
                                    },
                                    "allow_force_push": {
                                        "type": "boolean",
                                        "description": "Allow force push for all users with push access."
                                    },
                                    "allowed_to_merge": {
                                        "type": "array",
                                        "description": "An array of access levels allowed to merge",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "access_level": {
                                                    "type": "integer",
                                                    "format": "int32",
                                                    "description": "A valid access level",
                                                    "enum": [
                                                        30,
                                                        40,
                                                        60,
                                                        0
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "access_level"
                                            ]
                                        }
                                    },
                                    "code_owner_approval_required": {
                                        "type": "boolean",
                                        "description": "Require approval from code owners"
                                    },
                                    "developer_can_initial_push": {
                                        "type": "boolean",
                                        "description": "Allow developers to initial push"
                                    }
                                }
                            },
                            "shared_runners_setting": {
                                "type": "string",
                                "description": "Enable/disable shared runners for the group and its subgroups and projects",
                                "enum": [
                                    "disabled_and_unoverridable",
                                    "disabled_and_overridable",
                                    "enabled"
                                ]
                            },
                            "enabled_git_access_protocol": {
                                "type": "string",
                                "description": "Allow only the selected protocols to be used for Git access.",
                                "enum": [
                                    "ssh",
                                    "http",
                                    "all"
                                ]
                            },
                            "membership_lock": {
                                "type": "boolean",
                                "description": "Prevent adding new members to projects within this group"
                            },
                            "ldap_cn": {
                                "type": "string",
                                "description": "LDAP Common Name"
                            },
                            "ldap_access": {
                                "type": "integer",
                                "format": "int32",
                                "description": "A valid access level"
                            },
                            "shared_runners_minutes_limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "(admin-only) compute minutes quota for this group"
                            },
                            "extra_shared_runners_minutes_limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "(admin-only) Extra compute minutes quota for this group"
                            },
                            "wiki_access_level": {
                                "type": "string",
                                "description": "Wiki access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "duo_availability": {
                                "type": "string",
                                "description": "Duo availability. One of `default_on`, `default_off` or `never_on`",
                                "enum": [
                                    "default_on",
                                    "default_off",
                                    "never_on"
                                ]
                            },
                            "amazon_q_auto_review_enabled": {
                                "type": "boolean",
                                "description": "Enable Amazon Q auto review for merge request"
                            },
                            "experiment_features_enabled": {
                                "type": "boolean",
                                "description": "Enable experiment features for this group"
                            },
                            "prevent_sharing_groups_outside_hierarchy": {
                                "type": "boolean",
                                "description": "Prevent sharing groups within this namespace with any groups outside the namespace. Only available on top-level groups."
                            },
                            "lock_math_rendering_limits_enabled": {
                                "type": "boolean",
                                "description": "Indicates if math rendering limits are locked for all descendent groups."
                            },
                            "math_rendering_limits_enabled": {
                                "type": "boolean",
                                "description": "Indicates if math rendering limits are used for this group."
                            },
                            "max_artifacts_size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Set the maximum file size for each job's artifacts"
                            },
                            "file_template_project_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of a project to use for custom templates in this group"
                            },
                            "prevent_forking_outside_group": {
                                "type": "boolean",
                                "description": "Prevent forking projects inside this group to external namespaces"
                            },
                            "unique_project_download_limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of unique projects a user can download in the specified time period before they are banned."
                            },
                            "unique_project_download_limit_interval_in_seconds": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Time period during which a user can download a maximum amount of projects before they are banned."
                            },
                            "unique_project_download_limit_allowlist": {
                                "type": "array",
                                "description": "List of usernames excluded from the unique project download limit",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "unique_project_download_limit_alertlist": {
                                "type": "array",
                                "description": "List of user ids who will be emailed when Git abuse rate limit is exceeded",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "auto_ban_user_on_excessive_projects_download": {
                                "type": "boolean",
                                "description": "Ban users from the group when they exceed maximum number of unique projects download in the specified time period"
                            },
                            "ip_restriction_ranges": {
                                "type": "string",
                                "description": "List of IP addresses which need to be restricted for group"
                            },
                            "allowed_email_domains_list": {
                                "type": "string",
                                "description": "List of allowed email domains for group"
                            },
                            "service_access_tokens_expiration_enforced": {
                                "type": "boolean",
                                "description": "To enforce token expiration for Service accounts users for group"
                            },
                            "duo_core_features_enabled": {
                                "type": "boolean",
                                "description": "[Experimental] Indicates whether GitLab Duo Core features are enabled for the group"
                            },
                            "duo_features_enabled": {
                                "type": "boolean",
                                "description": "Indicates whether GitLab Duo features are enabled for the group"
                            },
                            "lock_duo_features_enabled": {
                                "type": "boolean",
                                "description": "Indicates if the GitLab Duo features enabled setting is enforced for all subgroups"
                            }
                        },
                        "description": "Update a group. Available only for users who can administrate groups."
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a group. Available only for users who can administrate groups.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Group"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Update a group. Available only for users who can administrate groups.",
            "tags": [
                "groups"
            ],
            "operationId": "putApiV4GroupsId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Remove a group."
                }
            },
            "request_body_parameters": {},
            "description": "Remove a group.",
            "tags": [
                "groups"
            ],
            "operationId": "deleteApiV4GroupsId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/archive",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Archive a group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Group"
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                }
            },
            "request_body_parameters": {},
            "description": "Archive a group",
            "tags": [
                "groups"
            ],
            "operationId": "postApiV4GroupsIdArchive"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/unarchive",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Unarchive a group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Group"
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                }
            },
            "request_body_parameters": {},
            "description": "Unarchive a group",
            "tags": [
                "groups"
            ],
            "operationId": "postApiV4GroupsIdUnarchive"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/restore",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Restore a group."
                }
            },
            "request_body_parameters": {},
            "description": "Restore a group.",
            "tags": [
                "groups"
            ],
            "operationId": "postApiV4GroupsIdRestore"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/projects/{project_id}",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "project_id",
                    "description": "The ID or path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Transfer a project to the group namespace. Available only for admin.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_GroupDetail"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Transfer a project to the group namespace. Available only for admin.",
            "tags": [
                "groups"
            ],
            "operationId": "postApiV4GroupsIdProjectsProjectId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/transfer",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdTransfer",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "group_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the target group to which the group needs to be transferred to.If not provided, the source group will be promoted to a top-level group."
                            }
                        },
                        "description": "Transfer a group to a new parent group or promote a subgroup to a top-level group"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Transfer a group to a new parent group or promote a subgroup to a top-level group"
                }
            },
            "request_body_parameters": {},
            "description": "Transfer a group to a new parent group or promote a subgroup to a top-level group",
            "tags": [
                "groups"
            ],
            "operationId": "postApiV4GroupsIdTransfer"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/share",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdShare",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "group_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the group to share"
                            },
                            "group_access": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The group access level",
                                "enum": [
                                    10,
                                    15,
                                    20,
                                    30,
                                    40,
                                    50
                                ]
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date",
                                "description": "Share expiration date"
                            },
                            "member_role_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the Member Role to be assigned to the group"
                            }
                        },
                        "required": [
                            "group_id",
                            "group_access"
                        ],
                        "description": "Share a group with a group"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Share a group with a group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_GroupDetail"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Share a group with a group",
            "tags": [
                "groups"
            ],
            "operationId": "postApiV4GroupsIdShare"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/share/{group_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "group_id",
                    "description": "The ID of the shared group",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "deleted Share"
                }
            },
            "request_body_parameters": {},
            "description": "",
            "tags": [
                "groups"
            ],
            "operationId": "deleteApiV4GroupsIdShareGroupId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/tokens/revoke",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a top-level group",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdTokensRevoke",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The token to revoke"
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Revoke a single token"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Revoke a single token"
                }
            },
            "request_body_parameters": {},
            "description": "Revoke a token, if it has access to the group or any of its subgroups\nand projects. If the token is revoked, or was already revoked, its\ndetails are returned in the response.\n\nThe following criteria must be met:\n\n- The group must be a top-level group.\n- You must have Owner permission in the group.\n- The token type is one of:\n  - Personal access token\n  - Group access token\n  - Project access token\n  - Group deploy token\n  - User feed token\n\nThis feature is gated by the :group_agnostic_token_revocation feature flag.\n",
            "tags": [
                "groups"
            ],
            "operationId": "postApiV4GroupsIdTokensRevoke"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/ldap_sync",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Sync a group with LDAP."
                }
            },
            "request_body_parameters": {},
            "description": "Sync a group with LDAP.",
            "tags": [
                "groups"
            ],
            "operationId": "postApiV4GroupsIdLdapSync"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/ssh_certificates",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdSshCertificates",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string",
                                "description": "The title of the ssh certificate"
                            },
                            "key": {
                                "type": "string",
                                "description": "The key of the ssh certificate"
                            }
                        },
                        "required": [
                            "title",
                            "key"
                        ],
                        "description": "Create a ssh certificate for a group."
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a ssh certificate for a group.",
                    "schema": {
                        "$ref": "#/definitions/EE_API_Entities_SshCertificate"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Create a ssh certificate for a group.",
            "tags": [
                "groups"
            ],
            "operationId": "postApiV4GroupsIdSshCertificates"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/ssh_certificates/{ssh_certificates_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "ssh_certificates_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Removes an ssh certificate from a group."
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Removes a Groups::SshCertificate",
            "tags": [
                "groups"
            ],
            "operationId": "deleteApiV4GroupsIdSshCertificatesSshCertificatesId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/runners/reset_registration_token",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Reset runner registration token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_ResetTokenResult"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Group Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Reset runner registration token",
            "tags": [
                "runners",
                "groups"
            ],
            "operationId": "postApiV4GroupsIdRunnersResetRegistrationToken"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/dependency_proxy/cache",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "202": {
                    "description": "Purge the dependency proxy for a group"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Schedules for deletion the cached manifests and blobs for a group.This endpoint requires the Owner role for the group.",
            "tags": [
                "dependency_proxy"
            ],
            "operationId": "deleteApiV4GroupsIdDependencyProxyCache"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/deploy_tokens",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdDeployTokens",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "New deploy token's name"
                            },
                            "scopes": {
                                "type": "array",
                                "description": "Indicates the deploy token scopes. Must be at least one of `read_repository`, `read_registry`, `write_registry`, `read_package_registry`, or `write_package_registry`",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "read_repository",
                                        "read_registry",
                                        "write_registry",
                                        "read_package_registry",
                                        "write_package_registry",
                                        "read_virtual_registry",
                                        "write_virtual_registry"
                                    ]
                                }
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Expiration date for the deploy token. Does not expire if no value is provided. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`)"
                            },
                            "username": {
                                "type": "string",
                                "description": "Username for deploy token. Default is `gitlab+deploy-token-{n}`"
                            }
                        },
                        "required": [
                            "name",
                            "scopes"
                        ],
                        "description": "Create a group deploy token"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a group deploy token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DeployTokenWithToken"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Creates a new deploy token for a group. This feature was introduced in GitLab 12.9.",
            "tags": [
                "deploy_tokens"
            ],
            "operationId": "postApiV4GroupsIdDeployTokens"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/deploy_tokens/{token_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group owned by the authenticated user",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "token_id",
                    "description": "The ID of the deploy token",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a group deploy token"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Removes a deploy token from the group. This feature was introduced in GitLab 12.9.",
            "tags": [
                "deploy_tokens"
            ],
            "operationId": "deleteApiV4GroupsIdDeployTokensTokenId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/clusters/{cluster_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "cluster_id",
                    "description": "The cluster ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdClustersClusterId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Cluster name"
                            },
                            "enabled": {
                                "type": "boolean",
                                "description": "Determines if cluster is active or not"
                            },
                            "domain": {
                                "type": "string",
                                "description": "Cluster base domain"
                            },
                            "environment_scope": {
                                "type": "string",
                                "description": "The associated environment to the cluster"
                            },
                            "namespace_per_environment": {
                                "type": "boolean",
                                "description": "Deploy each environment to a separate Kubernetes namespace",
                                "default": true
                            },
                            "management_project_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the management project"
                            },
                            "managed": {
                                "type": "boolean",
                                "description": "Determines if GitLab will manage namespaces and service accounts for this cluster"
                            },
                            "platform_kubernetes_attributes": {
                                "type": "object",
                                "description": "Platform Kubernetes data",
                                "properties": {
                                    "api_url": {
                                        "type": "string",
                                        "description": "URL to access the Kubernetes API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "Token to authenticate against Kubernetes"
                                    },
                                    "ca_cert": {
                                        "type": "string",
                                        "description": "TLS certificate (needed if API is using a self-signed TLS certificate)"
                                    },
                                    "namespace": {
                                        "type": "string",
                                        "description": "Unique namespace related to Group"
                                    }
                                }
                            }
                        },
                        "description": "Edit group cluster"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Edit group cluster",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ClusterGroup"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.1. Updates an existing group cluster.",
            "tags": [
                "clusters"
            ],
            "operationId": "putApiV4GroupsIdClustersClusterId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/clusters/{cluster_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "cluster_id",
                    "description": "The Cluster ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "403": {
                    "description": "Forbidden"
                },
                "204": {
                    "description": "Delete group cluster",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ClusterGroup"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.1. Deletes an existing group cluster. Does not remove existing resources within the connected Kubernetes cluster.",
            "tags": [
                "clusters"
            ],
            "operationId": "deleteApiV4GroupsIdClustersClusterId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/clusters/user",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdClustersUser",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Cluster name"
                            },
                            "enabled": {
                                "type": "boolean",
                                "description": "Determines if cluster is active or not, defaults to true",
                                "default": true
                            },
                            "environment_scope": {
                                "type": "string",
                                "description": "The associated environment to the cluster",
                                "default": "*"
                            },
                            "namespace_per_environment": {
                                "type": "boolean",
                                "description": "Deploy each environment to a separate Kubernetes namespace",
                                "default": true
                            },
                            "domain": {
                                "type": "string",
                                "description": "Cluster base domain"
                            },
                            "management_project_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the management project"
                            },
                            "managed": {
                                "type": "boolean",
                                "description": "Determines if GitLab will manage namespaces and service accounts for this cluster, defaults to true",
                                "default": true
                            },
                            "platform_kubernetes_attributes": {
                                "type": "object",
                                "description": "Platform Kubernetes data",
                                "properties": {
                                    "api_url": {
                                        "type": "string",
                                        "description": "URL to access the Kubernetes API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "Token to authenticate against Kubernetes"
                                    },
                                    "ca_cert": {
                                        "type": "string",
                                        "description": "TLS certificate (needed if API is using a self-signed TLS certificate)"
                                    },
                                    "namespace": {
                                        "type": "string",
                                        "description": "Unique namespace related to Group"
                                    },
                                    "authorization_type": {
                                        "type": "string",
                                        "description": "Cluster authorization type, defaults to RBAC",
                                        "enum": [
                                            "unknown_authorization",
                                            "rbac",
                                            "abac"
                                        ],
                                        "default": "rbac"
                                    }
                                },
                                "required": [
                                    "api_url",
                                    "token"
                                ]
                            }
                        },
                        "required": [
                            "name",
                            "platform_kubernetes_attributes"
                        ],
                        "description": "Add existing cluster to group"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add existing cluster to group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ClusterGroup"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.1. Adds an existing Kubernetes cluster to the group.",
            "tags": [
                "clusters"
            ],
            "operationId": "postApiV4GroupsIdClustersUser"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/debian_distributions",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdDebianDistributions",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "codename": {
                                "type": "string",
                                "description": "The Debian Codename",
                                "example": "sid"
                            },
                            "suite": {
                                "type": "string",
                                "description": "The Debian Suite",
                                "example": "unstable"
                            },
                            "origin": {
                                "type": "string",
                                "description": "The Debian Origin",
                                "example": "Grep"
                            },
                            "label": {
                                "type": "string",
                                "description": "The Debian Label",
                                "example": "grep.be"
                            },
                            "version": {
                                "type": "string",
                                "description": "The Debian Version",
                                "example": "12"
                            },
                            "description": {
                                "type": "string",
                                "description": "The Debian Description",
                                "example": "My description"
                            },
                            "valid_time_duration_seconds": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The duration before the Release file should be considered expired by the client",
                                "example": 604800
                            },
                            "components": {
                                "type": "array",
                                "description": "The list of Components",
                                "example": "main",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "architectures": {
                                "type": "array",
                                "description": "The list of Architectures",
                                "example": "amd64",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "required": [
                            "codename"
                        ],
                        "description": "Create a Debian Distribution"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a Debian Distribution",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Debian_Distribution"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in 14.0",
            "tags": [
                "debian_distribution"
            ],
            "operationId": "postApiV4GroupsIdDebianDistributions"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/debian_distributions/{codename}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "codename",
                    "description": "The Debian Codename",
                    "type": "string",
                    "required": true,
                    "example": "sid"
                },
                {
                    "name": "putApiV4GroupsIdDebianDistributionsCodename",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "suite": {
                                "type": "string",
                                "description": "The Debian Suite",
                                "example": "unstable"
                            },
                            "origin": {
                                "type": "string",
                                "description": "The Debian Origin",
                                "example": "Grep"
                            },
                            "label": {
                                "type": "string",
                                "description": "The Debian Label",
                                "example": "grep.be"
                            },
                            "version": {
                                "type": "string",
                                "description": "The Debian Version",
                                "example": "12"
                            },
                            "description": {
                                "type": "string",
                                "description": "The Debian Description",
                                "example": "My description"
                            },
                            "valid_time_duration_seconds": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The duration before the Release file should be considered expired by the client",
                                "example": 604800
                            },
                            "components": {
                                "type": "array",
                                "description": "The list of Components",
                                "example": "main",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "architectures": {
                                "type": "array",
                                "description": "The list of Architectures",
                                "example": "amd64",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Update a Debian Distribution"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a Debian Distribution",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Debian_Distribution"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in 14.0",
            "tags": [
                "debian_distribution"
            ],
            "operationId": "putApiV4GroupsIdDebianDistributionsCodename"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/debian_distributions/{codename}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "codename",
                    "description": "The Debian Codename",
                    "type": "string",
                    "required": true,
                    "example": "sid"
                },
                {
                    "in": "query",
                    "name": "suite",
                    "description": "The Debian Suite",
                    "type": "string",
                    "required": false,
                    "example": "unstable"
                },
                {
                    "in": "query",
                    "name": "origin",
                    "description": "The Debian Origin",
                    "type": "string",
                    "required": false,
                    "example": "Grep"
                },
                {
                    "in": "query",
                    "name": "label",
                    "description": "The Debian Label",
                    "type": "string",
                    "required": false,
                    "example": "grep.be"
                },
                {
                    "in": "query",
                    "name": "version",
                    "description": "The Debian Version",
                    "type": "string",
                    "required": false,
                    "example": "12"
                },
                {
                    "in": "query",
                    "name": "description",
                    "description": "The Debian Description",
                    "type": "string",
                    "required": false,
                    "example": "My description"
                },
                {
                    "in": "query",
                    "name": "valid_time_duration_seconds",
                    "description": "The duration before the Release file should be considered expired by the client",
                    "type": "integer",
                    "format": "int32",
                    "required": false,
                    "example": 604800
                },
                {
                    "in": "query",
                    "name": "components",
                    "description": "The list of Components",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false,
                    "example": "main"
                },
                {
                    "in": "query",
                    "name": "architectures",
                    "description": "The list of Architectures",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false,
                    "example": "amd64"
                }
            ],
            "responses": {
                "202": {
                    "description": "Delete a Debian Distribution"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in 14.0",
            "tags": [
                "debian_distribution"
            ],
            "operationId": "deleteApiV4GroupsIdDebianDistributionsCodename"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/export",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "202": {
                    "description": "Start export"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "429": {
                    "description": "Too many requests"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5.",
            "tags": [
                "group_export"
            ],
            "operationId": "postApiV4GroupsIdExport"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/export_relations",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdExportRelations",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "batched": {
                                "type": "boolean",
                                "description": "Whether to export in batches"
                            }
                        },
                        "description": "Start relations export"
                    }
                }
            ],
            "responses": {
                "202": {
                    "description": "Start relations export"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.12",
            "tags": [
                "group_export"
            ],
            "operationId": "postApiV4GroupsIdExportRelations"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/import/authorize",
            "method": "post",
            "parameters": [],
            "responses": {
                "201": {
                    "description": "Workhorse authorize the group import upload"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.8",
            "tags": [
                "group_import"
            ],
            "operationId": "postApiV4GroupsImportAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/import",
            "method": "post",
            "parameters": [
                {
                    "in": "formData",
                    "name": "path",
                    "description": "Group path",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "name",
                    "description": "Group name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "file",
                    "description": "The group export file to be imported",
                    "type": "file",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "parent_id",
                    "description": "The ID of the parent group that the group will be imported into. Defaults to the current user's namespace.",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "organization_id",
                    "description": "The ID of the organization that the group will be part of. ",
                    "type": "integer",
                    "format": "int32",
                    "default": {},
                    "required": false
                }
            ],
            "responses": {
                "202": {
                    "description": "Create a new group import"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "400": {
                    "description": "Bad request"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.8",
            "tags": [
                "group_import"
            ],
            "operationId": "postApiV4GroupsImport"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/placeholder_reassignments",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdPlaceholderReassignments",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "file": {
                                "type": "file",
                                "description": "The CSV file containing the reassignments"
                            }
                        },
                        "required": [
                            "file"
                        ]
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "created PlaceholderReassignment"
                }
            },
            "request_body_parameters": {},
            "description": "",
            "tags": [
                "groups"
            ],
            "operationId": "postApiV4GroupsIdPlaceholderReassignments"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/placeholder_reassignments/authorize",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Workhorse authorization for the reassignment CSV file"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.10",
            "tags": [
                "groups"
            ],
            "operationId": "postApiV4GroupsIdPlaceholderReassignmentsAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/variables",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group or URL-encoded path of the group owned by the authenticated\n      user",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdVariables",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string",
                                "description": "The ID of a group or URL-encoded path of the group owned by the\n        authenticated user"
                            },
                            "value": {
                                "type": "string",
                                "description": "The value of a variable"
                            },
                            "protected": {
                                "type": "string",
                                "description": "Whether the variable is protected"
                            },
                            "masked_and_hidden": {
                                "type": "string",
                                "description": "Whether the variable is masked and hidden"
                            },
                            "masked": {
                                "type": "string",
                                "description": "Whether the variable is masked"
                            },
                            "raw": {
                                "type": "string",
                                "description": "Whether the variable will be expanded"
                            },
                            "variable_type": {
                                "type": "string",
                                "description": "The type of the variable. Default: env_var",
                                "enum": [
                                    "env_var",
                                    "file"
                                ]
                            },
                            "environment_scope": {
                                "type": "string",
                                "description": "The environment scope of the variable"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the variable"
                            }
                        },
                        "required": [
                            "key",
                            "value"
                        ],
                        "description": "Create a new variable in a group"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a new variable in a group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                },
                "400": {
                    "description": "400 Bad Request"
                }
            },
            "request_body_parameters": {},
            "description": "Create a new variable in a group",
            "tags": [
                "ci_variables"
            ],
            "operationId": "postApiV4GroupsIdVariables"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/variables/{key}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group or URL-encoded path of the group owned by the authenticated\n      user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of a variable",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdVariablesKey",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "The value of a variable"
                            },
                            "protected": {
                                "type": "string",
                                "description": "Whether the variable is protected"
                            },
                            "masked": {
                                "type": "string",
                                "description": "Whether the variable is masked"
                            },
                            "raw": {
                                "type": "string",
                                "description": "Whether the variable will be expanded"
                            },
                            "variable_type": {
                                "type": "string",
                                "description": "The type of the variable. Default: env_var",
                                "enum": [
                                    "env_var",
                                    "file"
                                ]
                            },
                            "environment_scope": {
                                "type": "string",
                                "description": "The environment scope of the variable"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the variable"
                            }
                        },
                        "description": "Update an existing variable from a group"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update an existing variable from a group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                },
                "400": {
                    "description": "400 Bad Request"
                },
                "404": {
                    "description": "Group Variable Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Update an existing variable from a group",
            "tags": [
                "ci_variables"
            ],
            "operationId": "putApiV4GroupsIdVariablesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/variables/{key}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group or URL-encoded path of the group owned by the authenticated\n      user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of a variable",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "404": {
                    "description": "Group Variable Not Found"
                },
                "204": {
                    "description": "Delete an existing variable from a group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Delete an existing variable from a group",
            "tags": [
                "ci_variables"
            ],
            "operationId": "deleteApiV4GroupsIdVariablesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/apple-app-store",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsAppleAppStore",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "app_store_issuer_id": {
                                "type": "string",
                                "description": "Apple App Store Connect issuer ID."
                            },
                            "app_store_key_id": {
                                "type": "string",
                                "description": "Apple App Store Connect key ID."
                            },
                            "app_store_private_key_file_name": {
                                "type": "string",
                                "description": "Apple App Store Connect private key file name."
                            },
                            "app_store_private_key": {
                                "type": "string",
                                "description": "Apple App Store Connect private key."
                            },
                            "app_store_protected_refs": {
                                "type": "boolean",
                                "description": "Set variables on protected branches and tags only."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "app_store_issuer_id",
                            "app_store_key_id",
                            "app_store_private_key_file_name",
                            "app_store_private_key"
                        ],
                        "description": "Create/Edit Apple App Store integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Apple App Store integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Apple App Store integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsAppleAppStore"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/asana",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsAsana",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "api_key": {
                                "type": "string",
                                "description": "User API token. The user must have access to the task. All comments are attributed to this user."
                            },
                            "restrict_to_branch": {
                                "type": "string",
                                "description": "Comma-separated list of branches to be automatically inspected. Leave blank to include all branches."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "api_key"
                        ],
                        "description": "Create/Edit Asana integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Asana integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Asana integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsAsana"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/assembla",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsAssembla",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The authentication token."
                            },
                            "subdomain": {
                                "type": "string",
                                "description": "The subdomain setting."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Assembla integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Assembla integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Assembla integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsAssembla"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/bamboo",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsBamboo",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Enable SSL verification. Defaults to `true` (enabled)."
                            },
                            "bamboo_url": {
                                "type": "string",
                                "description": "Bamboo root URL (for example, `https://bamboo.example.com`)."
                            },
                            "build_key": {
                                "type": "string",
                                "description": "Bamboo build plan key (for example, `KEY`)."
                            },
                            "username": {
                                "type": "string",
                                "description": "User with API access to the Bamboo server."
                            },
                            "password": {
                                "type": "string",
                                "description": "Password of the user."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "bamboo_url",
                            "build_key",
                            "username",
                            "password"
                        ],
                        "description": "Create/Edit Bamboo integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Bamboo integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Bamboo integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsBamboo"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/bugzilla",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsBugzilla",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "new_issue_url": {
                                "type": "string",
                                "description": "URL of the new issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url",
                            "new_issue_url"
                        ],
                        "description": "Create/Edit Bugzilla integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Bugzilla integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Bugzilla integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsBugzilla"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/buildkite",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsBuildkite",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "Pipeline URL (for example, `https://buildkite.com/example/pipeline`)."
                            },
                            "token": {
                                "type": "string",
                                "description": "Token you get after you create a Buildkite pipeline with a GitLab repository."
                            },
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "DEPRECATED: This parameter has no effect because SSL verification is always enabled."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "token"
                        ],
                        "description": "Create/Edit Buildkite integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Buildkite integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Buildkite integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsBuildkite"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/campfire",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsCampfire",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "API authentication token from Campfire. To get the token, sign in to Campfire and select **My info**."
                            },
                            "subdomain": {
                                "type": "string",
                                "description": "`.campfirenow.com` subdomain when you're signed in."
                            },
                            "room": {
                                "type": "string",
                                "description": "ID portion of the Campfire room URL."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Campfire integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Campfire integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Campfire integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsCampfire"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/confluence",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsConfluence",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "confluence_url": {
                                "type": "string",
                                "description": "URL of the Confluence Workspace hosted on `atlassian.net`."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "confluence_url"
                        ],
                        "description": "Create/Edit Confluence integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Confluence integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Confluence integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsConfluence"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/custom-issue-tracker",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsCustomIssueTracker",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "new_issue_url": {
                                "type": "string",
                                "description": "URL of the new issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url",
                            "new_issue_url"
                        ],
                        "description": "Create/Edit Custom Issue Tracker integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Custom Issue Tracker integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Custom Issue Tracker integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsCustomIssueTracker"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/datadog",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsDatadog",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "datadog_site": {
                                "type": "string",
                                "description": "Datadog site to send data to. Learn more about Datadog sites in the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.datadoghq.com/getting_started/site/\">documentation</a>."
                            },
                            "api_url": {
                                "type": "string",
                                "description": "Full URL of your Datadog site. Only required if you do not use a standard Datadog site."
                            },
                            "api_key": {
                                "type": "string",
                                "description": "<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.datadoghq.com/account_management/api-app-keys/\">API key</a> used for authentication with Datadog."
                            },
                            "datadog_ci_visibility": {
                                "type": "boolean",
                                "description": "Enable CI Visibility"
                            },
                            "archive_trace_events": {
                                "type": "boolean",
                                "description": "When enabled, job logs are collected by Datadog and displayed along with pipeline execution traces."
                            },
                            "datadog_service": {
                                "type": "string",
                                "description": "Tag all pipeline data from this GitLab instance in Datadog. Can be used when managing several self-managed deployments."
                            },
                            "datadog_env": {
                                "type": "string",
                                "description": "For self-managed deployments, `env` tag for all the data sent to Datadog."
                            },
                            "datadog_tags": {
                                "type": "string",
                                "description": "Custom tags in Datadog. Specify one tag per line in the format `key:value\\nkey2:value2`."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "build_events": {
                                "type": "boolean",
                                "description": "Trigger event when a build is created."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "subgroup_events": {
                                "type": "boolean"
                            },
                            "project_events": {
                                "type": "boolean"
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "api_key"
                        ],
                        "description": "Create/Edit Datadog integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Datadog integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Datadog integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsDatadog"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/diffblue-cover",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsDiffblueCover",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "diffblue_license_key": {
                                "type": "string",
                                "description": "Diffblue Cover license key."
                            },
                            "diffblue_access_token_name": {
                                "type": "string",
                                "description": "Access token name used by Diffblue Cover in pipelines."
                            },
                            "diffblue_access_token_secret": {
                                "type": "string",
                                "description": "Access token secret used by Diffblue Cover in pipelines."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "diffblue_license_key",
                            "diffblue_access_token_name",
                            "diffblue_access_token_secret"
                        ],
                        "description": "Create/Edit Diffblue Cover integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Diffblue Cover integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Diffblue Cover integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsDiffblueCover"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/discord",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsDiscord",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "Discord webhook (for example, `https://discord.com/api/webhooks/\u2026`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive push_events notifications"
                            },
                            "issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive issues_events notifications"
                            },
                            "incident_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive incident_events notifications"
                            },
                            "alert_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive alert_events notifications"
                            },
                            "confidential_issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_issues_events notifications"
                            },
                            "merge_request_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive merge_requests_events notifications"
                            },
                            "note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive note_events notifications"
                            },
                            "confidential_note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_note_events notifications"
                            },
                            "tag_push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive tag_push_events notifications"
                            },
                            "deployment_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive deployment_events notifications"
                            },
                            "pipeline_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive pipeline_events notifications"
                            },
                            "wiki_page_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive wiki_page_events notifications"
                            },
                            "vulnerability_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive vulnerability_events notifications"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "deployment_events": {
                                "type": "boolean",
                                "description": "Trigger event when a deployment starts or finishes."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Discord integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Discord integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Discord integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsDiscord"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/drone-ci",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsDroneCi",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Enable SSL verification. Defaults to `true` (enabled)."
                            },
                            "drone_url": {
                                "type": "string",
                                "description": "Drone CI URL (for example, `http://drone.example.com`)."
                            },
                            "token": {
                                "type": "string",
                                "description": "Drone CI token."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "drone_url",
                            "token"
                        ],
                        "description": "Create/Edit Drone Ci integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Drone Ci integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Drone Ci integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsDroneCi"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/emails-on-push",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsEmailsOnPush",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "send_from_committer_email": {
                                "type": "boolean",
                                "description": "Send from committer"
                            },
                            "disable_diffs": {
                                "type": "boolean",
                                "description": "Disable code diffs"
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "recipients": {
                                "type": "string",
                                "description": "Emails separated by whitespace."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "recipients"
                        ],
                        "description": "Create/Edit Emails On Push integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Emails On Push integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Emails On Push integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsEmailsOnPush"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/external-wiki",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsExternalWiki",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "external_wiki_url": {
                                "type": "string",
                                "description": "URL of the external wiki."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "external_wiki_url"
                        ],
                        "description": "Create/Edit External Wiki integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit External Wiki integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set External Wiki integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsExternalWiki"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/gitlab-slack-application",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsGitlabSlackApplication",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "channel": {
                                "type": "string",
                                "description": "Default channel to use if no other channel is configured."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "labels_to_be_notified": {
                                "type": "string",
                                "description": "Labels to send notifications for. Leave blank to receive notifications for all events."
                            },
                            "labels_to_be_notified_behavior": {
                                "type": "string",
                                "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`."
                            },
                            "push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive push_events notifications"
                            },
                            "issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive issues_events notifications"
                            },
                            "incident_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive incident_events notifications"
                            },
                            "alert_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive alert_events notifications"
                            },
                            "confidential_issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_issues_events notifications"
                            },
                            "merge_request_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive merge_requests_events notifications"
                            },
                            "note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive note_events notifications"
                            },
                            "confidential_note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_note_events notifications"
                            },
                            "tag_push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive tag_push_events notifications"
                            },
                            "deployment_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive deployment_events notifications"
                            },
                            "pipeline_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive pipeline_events notifications"
                            },
                            "wiki_page_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive wiki_page_events notifications"
                            },
                            "vulnerability_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive vulnerability_events notifications"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "deployment_events": {
                                "type": "boolean",
                                "description": "Trigger event when a deployment starts or finishes."
                            },
                            "incident_events": {
                                "type": "boolean",
                                "description": "Trigger event when an incident is created."
                            },
                            "vulnerability_events": {
                                "type": "boolean"
                            },
                            "alert_events": {
                                "type": "boolean",
                                "description": "Trigger event when a new, unique alert is recorded."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "description": "Create/Edit Gitlab Slack Application integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Gitlab Slack Application integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Gitlab Slack Application integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsGitlabSlackApplication"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/google-play",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsGooglePlay",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "package_name": {
                                "type": "string",
                                "description": "Package name of the app in Google Play."
                            },
                            "service_account_key_file_name": {
                                "type": "string",
                                "description": "File name of the Google Play service account key."
                            },
                            "service_account_key": {
                                "type": "string",
                                "description": "Google Play service account key."
                            },
                            "google_play_protected_refs": {
                                "type": "boolean",
                                "description": "Set variables on protected branches and tags only."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "package_name",
                            "service_account_key_file_name",
                            "service_account_key"
                        ],
                        "description": "Create/Edit Google Play integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Google Play integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Google Play integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsGooglePlay"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/hangouts-chat",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsHangoutsChat",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "The Hangouts Chat webhook (for example, `https://chat.googleapis.com/v1/spaces...`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Hangouts Chat integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Hangouts Chat integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Hangouts Chat integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsHangoutsChat"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/harbor",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsHarbor",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "The base URL to the Harbor instance linked to the GitLab project. For example, `https://demo.goharbor.io`."
                            },
                            "project_name": {
                                "type": "string",
                                "description": "The name of the project in the Harbor instance. For example, `testproject`."
                            },
                            "username": {
                                "type": "string",
                                "description": "The username created in the Harbor interface."
                            },
                            "password": {
                                "type": "string",
                                "description": "The password of the user."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "url",
                            "project_name",
                            "username",
                            "password"
                        ],
                        "description": "Create/Edit Harbor integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Harbor integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Harbor integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsHarbor"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/irker",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsIrker",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "server_host": {
                                "type": "string",
                                "description": "irker daemon hostname. The default value is `localhost`."
                            },
                            "server_port": {
                                "type": "integer",
                                "format": "int32",
                                "description": "irker daemon port. The default value is `6659`."
                            },
                            "default_irc_uri": {
                                "type": "string",
                                "description": "URI to add before each recipient. The default value is `irc://irc.network.net:6697/`."
                            },
                            "recipients": {
                                "type": "string",
                                "description": "Comma-separated list of channels or email addresses."
                            },
                            "colorize_messages": {
                                "type": "boolean",
                                "description": "Colorize messages"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "recipients"
                        ],
                        "description": "Create/Edit Irker integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Irker integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Irker integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsIrker"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/jenkins",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsJenkins",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Enable SSL verification. Defaults to `true` (enabled)."
                            },
                            "jenkins_url": {
                                "type": "string",
                                "description": "URL of the Jenkins server."
                            },
                            "project_name": {
                                "type": "string",
                                "description": "Name of the Jenkins project."
                            },
                            "username": {
                                "type": "string",
                                "description": "Username of the Jenkins server."
                            },
                            "password": {
                                "type": "string",
                                "description": "Password of the Jenkins server."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "jenkins_url",
                            "project_name"
                        ],
                        "description": "Create/Edit Jenkins integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Jenkins integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Jenkins integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsJenkins"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/jira",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsJira",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "The URL to the Jira project which is being linked to this GitLab project (for example, `https://jira.example.com`)."
                            },
                            "api_url": {
                                "type": "string",
                                "description": "The base URL to the Jira instance API. Web URL value is used if not set (for example, `https://jira-api.example.com`)."
                            },
                            "jira_auth_type": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The authentication method to use with Jira. Use `0` for Basic Authentication, and `1` for Jira personal access token. Defaults to `0`."
                            },
                            "username": {
                                "type": "string",
                                "description": "The email or username to use with Jira. Use an email for Jira Cloud, and a username for Jira Data Center and Jira Server. Required when using Basic Authentication (`jira_auth_type` is `0`)."
                            },
                            "password": {
                                "type": "string",
                                "description": "The Jira API token, password, or personal access token to use with Jira. When using Basic Authentication (`jira_auth_type` is `0`), use an API token for Jira Cloud, and a password for Jira Data Center or Jira Server. For a Jira personal access token (`jira_auth_type` is `1`), use the personal access token."
                            },
                            "jira_issue_regex": {
                                "type": "string",
                                "description": "Regular expression to match Jira issue keys."
                            },
                            "jira_issue_prefix": {
                                "type": "string",
                                "description": "Prefix to match Jira issue keys."
                            },
                            "jira_issue_transition_id": {
                                "type": "string",
                                "description": "The ID of one or more transitions for [custom issue transitions](../integration/jira/issues.md#custom-issue-transitions).Ignored when `jira_issue_transition_automatic` is enabled. Defaults to a blank string,which disables custom transitions."
                            },
                            "issues_enabled": {
                                "type": "string",
                                "description": "Enable viewing Jira issues in GitLab."
                            },
                            "project_keys": {
                                "type": "array",
                                "description": "Keys of Jira projects. When `issues_enabled` is `true`, this setting specifies which Jira projects to view issues from in GitLab.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "commit_events": {
                                "type": "boolean",
                                "description": "Trigger event when a commit is created or updated."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "url",
                            "password"
                        ],
                        "description": "Create/Edit Jira integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Jira integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Jira integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsJira"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/jira-cloud-app",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsJiraCloudApp",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "jira_cloud_app_service_ids": {
                                "type": "string",
                                "description": "Copy and paste your JSM Service ID here. Use comma (,) to separate multiple IDs."
                            },
                            "jira_cloud_app_enable_deployment_gating": {
                                "type": "boolean",
                                "description": "Enable to approve or reject blocked GitLab deployments from Jira Service Management."
                            },
                            "jira_cloud_app_deployment_gating_environments": {
                                "type": "string",
                                "description": "Enter the environment (production,staging,testing,development) where you want to enable deployment gating. Use comma (,) to separate multiple environments."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "description": "Create/Edit Jira Cloud App integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Jira Cloud App integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Jira Cloud App integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsJiraCloudApp"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/matrix",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsMatrix",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "hostname": {
                                "type": "string",
                                "description": "Custom hostname of the Matrix server. The default value is `https://matrix-client.matrix.org`."
                            },
                            "token": {
                                "type": "string",
                                "description": "The Matrix access token (for example, `syt-zyx57W2v1u123ew11`)."
                            },
                            "room": {
                                "type": "string",
                                "description": "Unique identifier for the target room (in the format `!qPKKM111FFKKsfoCVy:matrix.org`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "incident_events": {
                                "type": "boolean",
                                "description": "Trigger event when an incident is created."
                            },
                            "vulnerability_events": {
                                "type": "boolean"
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token",
                            "room"
                        ],
                        "description": "Create/Edit Matrix integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Matrix integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Matrix integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsMatrix"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/mattermost-slash-commands",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsMattermostSlashCommands",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The Mattermost token."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Mattermost Slash Commands integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Mattermost Slash Commands integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Mattermost Slash Commands integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsMattermostSlashCommands"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/slack-slash-commands",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsSlackSlashCommands",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The Slack token."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Slack Slash Commands integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Slack Slash Commands integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Slack Slash Commands integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsSlackSlashCommands"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/packagist",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsPackagist",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "username": {
                                "type": "string",
                                "description": "Username of a Packagist account."
                            },
                            "token": {
                                "type": "string",
                                "description": "API token of the Packagist server."
                            },
                            "server": {
                                "type": "string",
                                "description": "URL of the Packagist server. The default value is `https://packagist.org`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "username",
                            "token"
                        ],
                        "description": "Create/Edit Packagist integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Packagist integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Packagist integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsPackagist"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/phorge",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsPhorge",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url"
                        ],
                        "description": "Create/Edit Phorge integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Phorge integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Phorge integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsPhorge"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/pipelines-email",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsPipelinesEmail",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "recipients": {
                                "type": "string",
                                "description": "Comma-separated list of recipient email addresses."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "notify_only_default_branch": {
                                "type": "boolean",
                                "description": "Send notifications for the default branch."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "recipients"
                        ],
                        "description": "Create/Edit Pipelines Email integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Pipelines Email integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Pipelines Email integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsPipelinesEmail"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/pivotaltracker",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsPivotaltracker",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The Pivotal Tracker token."
                            },
                            "restrict_to_branch": {
                                "type": "string",
                                "description": "Comma-separated list of branches to automatically inspect. Leave blank to include all branches."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Pivotaltracker integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Pivotaltracker integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Pivotaltracker integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsPivotaltracker"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/pumble",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsPumble",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "The Pumble webhook (for example, `https://api.pumble.com/workspaces/x/...`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Pumble integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Pumble integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Pumble integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsPumble"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/pushover",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsPushover",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "api_key": {
                                "type": "string",
                                "description": "The application key."
                            },
                            "user_key": {
                                "type": "string",
                                "description": "The user key."
                            },
                            "device": {
                                "type": "string",
                                "description": "Leave blank for all active devices."
                            },
                            "priority": {
                                "type": "string",
                                "description": "The priority."
                            },
                            "sound": {
                                "type": "string",
                                "description": "The sound of the notification."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "api_key",
                            "user_key",
                            "priority"
                        ],
                        "description": "Create/Edit Pushover integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Pushover integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Pushover integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsPushover"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/redmine",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsRedmine",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "new_issue_url": {
                                "type": "string",
                                "description": "URL of the new issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url",
                            "new_issue_url"
                        ],
                        "description": "Create/Edit Redmine integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Redmine integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Redmine integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsRedmine"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/ewm",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsEwm",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "new_issue_url": {
                                "type": "string",
                                "description": "URL of the new issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url",
                            "new_issue_url"
                        ],
                        "description": "Create/Edit Ewm integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Ewm integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Ewm integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsEwm"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/youtrack",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsYoutrack",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url"
                        ],
                        "description": "Create/Edit Youtrack integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Youtrack integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Youtrack integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsYoutrack"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/clickup",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsClickup",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url"
                        ],
                        "description": "Create/Edit Clickup integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Clickup integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Clickup integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsClickup"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/slack",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsSlack",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "Slack notifications webhook (for example, `https://hooks.slack.com/services/...`)."
                            },
                            "username": {
                                "type": "string",
                                "description": "Slack notifications username."
                            },
                            "channel": {
                                "type": "string",
                                "description": "Default channel to use if no other channel is configured."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "labels_to_be_notified": {
                                "type": "string",
                                "description": "Labels to send notifications for. Leave blank to receive notifications for all events."
                            },
                            "labels_to_be_notified_behavior": {
                                "type": "string",
                                "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`."
                            },
                            "push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive push_events notifications"
                            },
                            "issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive issues_events notifications"
                            },
                            "incident_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive incident_events notifications"
                            },
                            "alert_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive alert_events notifications"
                            },
                            "confidential_issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_issues_events notifications"
                            },
                            "merge_request_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive merge_requests_events notifications"
                            },
                            "note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive note_events notifications"
                            },
                            "confidential_note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_note_events notifications"
                            },
                            "tag_push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive tag_push_events notifications"
                            },
                            "deployment_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive deployment_events notifications"
                            },
                            "pipeline_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive pipeline_events notifications"
                            },
                            "wiki_page_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive wiki_page_events notifications"
                            },
                            "vulnerability_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive vulnerability_events notifications"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "deployment_events": {
                                "type": "boolean",
                                "description": "Trigger event when a deployment starts or finishes."
                            },
                            "incident_events": {
                                "type": "boolean",
                                "description": "Trigger event when an incident is created."
                            },
                            "vulnerability_events": {
                                "type": "boolean"
                            },
                            "alert_events": {
                                "type": "boolean",
                                "description": "Trigger event when a new, unique alert is recorded."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Slack integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Slack integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Slack integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsSlack"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/microsoft-teams",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsMicrosoftTeams",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "The Microsoft Teams webhook (for example, `https://outlook.office.com/webhook/...`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Microsoft Teams integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Microsoft Teams integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Microsoft Teams integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsMicrosoftTeams"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/mattermost",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsMattermost",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "Mattermost notifications webhook (for example, `http://mattermost.example.com/hooks/...`)."
                            },
                            "username": {
                                "type": "string",
                                "description": "Mattermost notifications username."
                            },
                            "channel": {
                                "type": "string",
                                "description": "Default channel to use if no other channel is configured."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "labels_to_be_notified": {
                                "type": "string",
                                "description": "Labels to send notifications for. Leave blank to receive notifications for all events."
                            },
                            "labels_to_be_notified_behavior": {
                                "type": "string",
                                "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`."
                            },
                            "push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive push_events notifications"
                            },
                            "issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive issues_events notifications"
                            },
                            "incident_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive incident_events notifications"
                            },
                            "alert_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive alert_events notifications"
                            },
                            "confidential_issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_issues_events notifications"
                            },
                            "merge_request_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive merge_requests_events notifications"
                            },
                            "note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive note_events notifications"
                            },
                            "confidential_note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_note_events notifications"
                            },
                            "tag_push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive tag_push_events notifications"
                            },
                            "deployment_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive deployment_events notifications"
                            },
                            "pipeline_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive pipeline_events notifications"
                            },
                            "wiki_page_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive wiki_page_events notifications"
                            },
                            "vulnerability_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive vulnerability_events notifications"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "deployment_events": {
                                "type": "boolean",
                                "description": "Trigger event when a deployment starts or finishes."
                            },
                            "incident_events": {
                                "type": "boolean",
                                "description": "Trigger event when an incident is created."
                            },
                            "vulnerability_events": {
                                "type": "boolean"
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Mattermost integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Mattermost integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Mattermost integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsMattermost"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/teamcity",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsTeamcity",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Enable SSL verification. Defaults to `true` (enabled)."
                            },
                            "teamcity_url": {
                                "type": "string",
                                "description": "TeamCity root URL (for example, `https://teamcity.example.com`)."
                            },
                            "build_type": {
                                "type": "string",
                                "description": "The build configuration ID of the TeamCity project."
                            },
                            "username": {
                                "type": "string",
                                "description": "A user with permissions to trigger a manual build."
                            },
                            "password": {
                                "type": "string",
                                "description": "The password of the user."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "teamcity_url",
                            "build_type",
                            "username",
                            "password"
                        ],
                        "description": "Create/Edit Teamcity integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Teamcity integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Teamcity integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsTeamcity"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/telegram",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsTelegram",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "hostname": {
                                "type": "string",
                                "description": "Custom hostname of the Telegram API. The default value is `https://api.telegram.org`."
                            },
                            "token": {
                                "type": "string",
                                "description": "The Telegram bot token (for example, `123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11`)."
                            },
                            "room": {
                                "type": "string",
                                "description": "Unique identifier for the target chat or the username of the target channel (in the format `@channelusername`)."
                            },
                            "thread": {
                                "type": "string",
                                "description": "Unique identifier for the target message thread (topic in a forum supergroup)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "incident_events": {
                                "type": "boolean",
                                "description": "Trigger event when an incident is created."
                            },
                            "vulnerability_events": {
                                "type": "boolean"
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token",
                            "room"
                        ],
                        "description": "Create/Edit Telegram integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Telegram integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Telegram integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsTelegram"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/unify-circuit",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsUnifyCircuit",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "The Unify Circuit webhook (for example, `https://circuit.com/rest/v2/webhooks/incoming/...`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Unify Circuit integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Unify Circuit integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Unify Circuit integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsUnifyCircuit"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/webex-teams",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsWebexTeams",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "The Webex Teams webhook. For example, https://api.ciscospark.com/v1/webhooks/incoming/..."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Webex Teams integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Webex Teams integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Webex Teams integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsWebexTeams"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/zentao",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsZentao",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "Base URL of the ZenTao instance."
                            },
                            "api_url": {
                                "type": "string",
                                "description": "If different from Web URL."
                            },
                            "api_token": {
                                "type": "string"
                            },
                            "zentao_product_xid": {
                                "type": "string"
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "url",
                            "api_token",
                            "zentao_product_xid"
                        ],
                        "description": "Create/Edit Zentao integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Zentao integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Zentao integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsZentao"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/squash-tm",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsSquashTm",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "URL of the Squash TM webhook."
                            },
                            "token": {
                                "type": "string",
                                "description": "Secret token."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "url"
                        ],
                        "description": "Create/Edit Squash Tm integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Squash Tm integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Squash Tm integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsSquashTm"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/github",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsGithub",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "GitHub API token with `repo:status` OAuth scope."
                            },
                            "repository_url": {
                                "type": "string",
                                "description": "GitHub repository URL."
                            },
                            "static_context": {
                                "type": "boolean",
                                "description": "Append the hostname of your GitLab instance to the status check name."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token",
                            "repository_url"
                        ],
                        "description": "Create/Edit Github integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Github integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Github integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsGithub"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/git-guardian",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsGitGuardian",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "Personal access token to authenticate calls to the GitGuardian API."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Git Guardian integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Git Guardian integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Git Guardian integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsGitGuardian"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/google-cloud-platform-artifact-registry",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistry",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "artifact_registry_project_id": {
                                "type": "string",
                                "description": "ID of the Google Cloud project."
                            },
                            "artifact_registry_repositories": {
                                "type": "string",
                                "description": "Repository of Artifact Registry."
                            },
                            "artifact_registry_location": {
                                "type": "string",
                                "description": "Location of the Artifact Registry repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "artifact_registry_project_id",
                            "artifact_registry_repositories",
                            "artifact_registry_location"
                        ],
                        "description": "Create/Edit Google Cloud Platform Artifact Registry integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Google Cloud Platform Artifact Registry integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Google Cloud Platform Artifact Registry integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistry"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/google-cloud-platform-workload-identity-federation",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederation",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "workload_identity_federation_project_id": {
                                "type": "string",
                                "description": "Google Cloud project ID for the Workload Identity Federation."
                            },
                            "workload_identity_federation_project_number": {
                                "type": "string",
                                "description": "Google Cloud project number for the Workload Identity Federation."
                            },
                            "workload_identity_pool_id": {
                                "type": "string",
                                "description": "ID of the Workload Identity Pool."
                            },
                            "workload_identity_pool_provider_id": {
                                "type": "string",
                                "description": "ID of the Workload Identity Pool provider."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "workload_identity_federation_project_id",
                            "workload_identity_federation_project_number",
                            "workload_identity_pool_id",
                            "workload_identity_pool_provider_id"
                        ],
                        "description": "Create/Edit Google Cloud Platform Workload Identity Federation integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Google Cloud Platform Workload Identity Federation integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Google Cloud Platform Workload Identity Federation integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederation"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/mock-ci",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsMockCi",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Enable SSL verification. Defaults to `true` (enabled)."
                            },
                            "mock_service_url": {
                                "type": "string",
                                "description": "URL of the Mock CI integration."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "mock_service_url"
                        ],
                        "description": "Create/Edit Mock Ci integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Mock Ci integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Mock Ci integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsMockCi"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/mock-monitoring",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdIntegrationsMockMonitoring",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "description": "Create/Edit Mock Monitoring integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Mock Monitoring integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Mock Monitoring integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4GroupsIdIntegrationsMockMonitoring"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/integrations/{slug}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "slug",
                    "description": "The name of the integration",
                    "type": "string",
                    "enum": [
                        "apple-app-store",
                        "asana",
                        "assembla",
                        "bamboo",
                        "bugzilla",
                        "buildkite",
                        "campfire",
                        "confluence",
                        "custom-issue-tracker",
                        "datadog",
                        "diffblue-cover",
                        "discord",
                        "drone-ci",
                        "emails-on-push",
                        "external-wiki",
                        "gitlab-slack-application",
                        "google-play",
                        "hangouts-chat",
                        "harbor",
                        "irker",
                        "jenkins",
                        "jira",
                        "jira-cloud-app",
                        "matrix",
                        "mattermost-slash-commands",
                        "slack-slash-commands",
                        "packagist",
                        "phorge",
                        "pipelines-email",
                        "pivotaltracker",
                        "pumble",
                        "pushover",
                        "redmine",
                        "ewm",
                        "youtrack",
                        "clickup",
                        "slack",
                        "microsoft-teams",
                        "mattermost",
                        "teamcity",
                        "telegram",
                        "unify-circuit",
                        "webex-teams",
                        "zentao",
                        "squash-tm",
                        "github",
                        "git-guardian",
                        "google-cloud-platform-artifact-registry",
                        "google-cloud-platform-workload-identity-federation",
                        "mock-ci",
                        "mock-monitoring"
                    ],
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Disable an integration"
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Disable the integration. Integration settings are preserved.",
            "tags": [
                "integrations"
            ],
            "operationId": "deleteApiV4GroupsIdIntegrationsSlug"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/invitations",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdInvitations",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "access_level": {
                                "type": "integer",
                                "format": "int32",
                                "description": "A valid access level (defaults: `30`, developer access level)",
                                "enum": [
                                    10,
                                    15,
                                    20,
                                    30,
                                    40,
                                    50,
                                    5
                                ]
                            },
                            "email": {
                                "type": "array",
                                "description": "The email address to invite, or multiple emails separated by comma",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "user_id": {
                                "type": "array",
                                "description": "The user ID of the new member or multiple IDs separated by commas.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date string in the format YEAR-MONTH-DAY"
                            },
                            "invite_source": {
                                "type": "string",
                                "description": "Source that triggered the member creation process",
                                "default": "invitations-api"
                            },
                            "member_role_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of a member role for the invited user"
                            }
                        },
                        "required": [
                            "access_level"
                        ],
                        "description": "Invite non-members by email address to a group or project."
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Invite non-members by email address to a group or project.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Invitation"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.6",
            "tags": [
                "invitations"
            ],
            "operationId": "postApiV4GroupsIdInvitations"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/invitations/{email}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "email",
                    "description": "The email address of the invitation",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdInvitationsEmail",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "access_level": {
                                "type": "integer",
                                "format": "int32",
                                "description": "A valid access level (defaults: `30`, developer access level)",
                                "enum": [
                                    10,
                                    15,
                                    20,
                                    30,
                                    40,
                                    50
                                ]
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date string in ISO 8601 format (`YYYY-MM-DDTHH:MM:SSZ`)"
                            },
                            "member_role_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of a member role for the invited user"
                            }
                        },
                        "description": "Updates a group or project invitation."
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Updates a group or project invitation.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Invitation"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Updates a group or project invitation.",
            "tags": [
                "invitations"
            ],
            "operationId": "putApiV4GroupsIdInvitationsEmail"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/invitations/{email}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "email",
                    "description": "The email address of the invitation",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Removes an invitation from a group or project."
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "409": {
                    "description": "Could not delete invitation"
                }
            },
            "request_body_parameters": {},
            "description": "Removes an invitation from a group or project.",
            "tags": [
                "invitations"
            ],
            "operationId": "deleteApiV4GroupsIdInvitationsEmail"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/uploads/{upload_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "upload_id",
                    "description": "The ID of a group upload",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a single group upload"
                },
                "400": {
                    "description": "Bad request"
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a single group upload",
            "tags": [
                "groups"
            ],
            "operationId": "deleteApiV4GroupsIdUploadsUploadId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/uploads/{secret}/{filename}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "secret",
                    "description": "The 32-character secret of a group upload",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "filename",
                    "description": "The filename of a group upload",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a single group upload by secret and filename"
                },
                "400": {
                    "description": "Bad request"
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a single group upload by secret and filename",
            "tags": [
                "groups"
            ],
            "operationId": "deleteApiV4GroupsIdUploadsSecretFilename"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/members",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdMembers",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "access_level": {
                                "type": "integer",
                                "format": "int32",
                                "description": "A valid access level."
                            },
                            "user_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The user ID of the new member or multiple IDs separated by commas."
                            },
                            "username": {
                                "type": "string",
                                "description": "The username of the new member or multiple usernames separated by commas."
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date string in the format YEAR-MONTH-DAY"
                            },
                            "invite_source": {
                                "type": "string",
                                "description": "Source that triggered the member creation process",
                                "default": "members-api"
                            }
                        },
                        "required": [
                            "access_level"
                        ],
                        "description": "Adds a member to a group or project."
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Adds a member to a group or project.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Member"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Adds a member to a group or project.",
            "tags": [
                "members"
            ],
            "operationId": "postApiV4GroupsIdMembers"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/members/{user_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the new member",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdMembersUserId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "access_level": {
                                "type": "integer",
                                "format": "int32",
                                "description": "A valid access level"
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date string in the format YEAR-MONTH-DAY"
                            },
                            "member_role_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the Member Role to be updated"
                            }
                        },
                        "required": [
                            "access_level"
                        ],
                        "description": "Updates a member of a group or project."
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Updates a member of a group or project.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Member"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Updates a member of a group or project.",
            "tags": [
                "members"
            ],
            "operationId": "putApiV4GroupsIdMembersUserId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/members/{user_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the member",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "skip_subresources",
                    "description": "Flag indicating if the deletion of direct memberships of the removed member in subgroups and projects should be skipped",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "unassign_issuables",
                    "description": "Flag indicating if the removed member should be unassigned from any issues or merge requests within given group or project",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "204": {
                    "description": "Removes a user from a group or project."
                }
            },
            "request_body_parameters": {},
            "description": "Removes a user from a group or project.",
            "tags": [
                "members"
            ],
            "operationId": "deleteApiV4GroupsIdMembersUserId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/members/{user_id}/override",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the member",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Overrides the access level of an LDAP group member.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Member"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Overrides the access level of an LDAP group member.",
            "tags": [
                "groups"
            ],
            "operationId": "postApiV4GroupsIdMembersUserIdOverride"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/members/{user_id}/override",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the member",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Remove an LDAP group member access level override.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Member"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Remove an LDAP group member access level override.",
            "tags": [
                "groups"
            ],
            "operationId": "deleteApiV4GroupsIdMembersUserIdOverride"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/members/{member_id}/approve",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "member_id",
                    "description": "The ID of the member requiring approval",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Approves a pending member"
                }
            },
            "request_body_parameters": {},
            "description": "Approves a pending member",
            "tags": [
                "groups"
            ],
            "operationId": "putApiV4GroupsIdMembersMemberIdApprove"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/members/approve_all",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Approves all pending members"
                }
            },
            "request_body_parameters": {},
            "description": "Approves all pending members",
            "tags": [
                "groups"
            ],
            "operationId": "postApiV4GroupsIdMembersApproveAll"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/members/{user_id}/state",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the user",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdMembersUserIdState",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "state": {
                                "type": "string",
                                "description": "The new state for the memberships of the user",
                                "enum": [
                                    "awaiting",
                                    "active"
                                ]
                            }
                        },
                        "required": [
                            "state"
                        ],
                        "description": "Changes the state of the memberships of a user in the group"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Changes the state of the memberships of a user in the group"
                }
            },
            "request_body_parameters": {},
            "description": "Changes the state of the memberships of a user in the group",
            "tags": [
                "groups"
            ],
            "operationId": "putApiV4GroupsIdMembersUserIdState"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/billable_members/{user_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the member",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Removes a billable member from a group or project."
                }
            },
            "request_body_parameters": {},
            "description": "Removes a billable member from a group or project.",
            "tags": [
                "groups"
            ],
            "operationId": "deleteApiV4GroupsIdBillableMembersUserId"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/npm/-/package/*package_name/dist-tags/{tag}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag",
                    "description": "Package dist-tag",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdPackagesNpmPackage*packageNameDistTagsTag",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "package_name": {
                                "type": "string",
                                "description": "Package name"
                            }
                        },
                        "required": [
                            "package_name"
                        ],
                        "description": "Create or Update the given tag for the given NPM package and version"
                    }
                }
            ],
            "responses": {
                "204": {
                    "description": "Create or Update the given tag for the given NPM package and version"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.7",
            "tags": [
                "npm_packages"
            ],
            "operationId": "putApiV4GroupsIdPackagesNpmPackage*packageNameDistTagsTag"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/npm/-/package/*package_name/dist-tags/{tag}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag",
                    "description": "Package dist-tag",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Deletes the given tag"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.7",
            "tags": [
                "npm_packages"
            ],
            "operationId": "deleteApiV4GroupsIdPackagesNpmPackage*packageNameDistTagsTag"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/npm/-/npm/v1/security/advisories/bulk",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Ok"
                },
                "307": {
                    "description": "Temporary Redirect"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.6",
            "tags": [
                "npm_packages"
            ],
            "operationId": "postApiV4GroupsIdPackagesNpmNpmV1SecurityAdvisoriesBulk"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/-/packages/npm/-/npm/v1/security/audits/quick",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the group",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Ok"
                },
                "307": {
                    "description": "Temporary Redirect"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.6",
            "tags": [
                "npm_packages"
            ],
            "operationId": "postApiV4GroupsIdPackagesNpmNpmV1SecurityAuditsQuick"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/access_tokens/self/rotate",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The group ID",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdAccessTokensSelfRotate",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "expires_at": {
                                "type": "string",
                                "format": "date",
                                "description": "The expiration date of the token",
                                "example": "2021-01-31"
                            }
                        },
                        "description": "Rotate a resource access token"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Rotate a resource access token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ResourceAccessTokenWithToken"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "405": {
                    "description": "Method not allowed"
                }
            },
            "request_body_parameters": {},
            "description": "Rotates a resource access token by passing it to the API in a header",
            "tags": [
                "personal_access_tokens"
            ],
            "operationId": "postApiV4GroupsIdAccessTokensSelfRotate"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/wikis",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdWikis",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string",
                                "description": "Title of a wiki page"
                            },
                            "front_matter": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "Front matter title of a wiki page"
                                    }
                                }
                            },
                            "content": {
                                "type": "string",
                                "description": "Content of a wiki page"
                            },
                            "format": {
                                "type": "string",
                                "description": "Format of a wiki page. Available formats are markdown, rdoc, asciidoc and org",
                                "enum": [
                                    "markdown",
                                    "rdoc",
                                    "asciidoc",
                                    "org"
                                ],
                                "default": "markdown"
                            }
                        },
                        "required": [
                            "title",
                            "content"
                        ],
                        "description": "Create a wiki page"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a wiki page",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_WikiPage"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Create a wiki page",
            "tags": [
                "wikis"
            ],
            "operationId": "postApiV4GroupsIdWikis"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/wikis/{slug}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "slug",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4GroupsIdWikisSlug",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string",
                                "description": "Title of a wiki page"
                            },
                            "front_matter": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "Front matter title of a wiki page"
                                    }
                                }
                            },
                            "content": {
                                "type": "string",
                                "description": "Content of a wiki page"
                            },
                            "format": {
                                "type": "string",
                                "description": "Format of a wiki page. Available formats are markdown, rdoc, asciidoc and org",
                                "enum": [
                                    "markdown",
                                    "rdoc",
                                    "asciidoc",
                                    "org"
                                ],
                                "default": "markdown"
                            }
                        },
                        "description": "Update a wiki page"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a wiki page",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_WikiPage"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Update a wiki page",
            "tags": [
                "wikis"
            ],
            "operationId": "putApiV4GroupsIdWikisSlug"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/wikis/{slug}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "slug",
                    "description": "The slug of a wiki page",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a wiki page"
                },
                "400": {
                    "description": "Validation error"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a wiki page",
            "tags": [
                "wikis"
            ],
            "operationId": "deleteApiV4GroupsIdWikisSlug"
        },
        {
            "server_url": "",
            "path": "/api/v4/groups/{id}/wikis/attachments",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4GroupsIdWikisAttachments",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "file": {
                                "type": "file",
                                "description": "The attachment file to be uploaded"
                            },
                            "branch": {
                                "type": "string",
                                "description": "The name of the branch"
                            }
                        },
                        "required": [
                            "file"
                        ],
                        "description": "Upload an attachment to the wiki repository"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Upload an attachment to the wiki repository",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_WikiAttachment"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.3.",
            "tags": [
                "wikis"
            ],
            "operationId": "postApiV4GroupsIdWikisAttachments"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/access_requests",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AccessRequester"
                    },
                    "examples": {
                        "successfull_response": {
                            "id": 1,
                            "username": "raymond_smith",
                            "name": "Raymond Smith",
                            "state": "active",
                            "created_at": "2012-10-22T14:13:35Z",
                            "access_level": 20
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.11.",
            "tags": [
                "access_requests"
            ],
            "operationId": "postApiV4ProjectsIdAccessRequests"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/access_requests/{user_id}/approve",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the access requester",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdAccessRequestsUserIdApprove",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "access_level": {
                                "type": "integer",
                                "format": "int32",
                                "description": "A valid access level (defaults: `30`, the Developer role)",
                                "default": 30
                            }
                        },
                        "description": "Approves an access request for the given user."
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AccessRequester"
                    },
                    "examples": {
                        "successfull_response": {
                            "id": 1,
                            "username": "raymond_smith",
                            "name": "Raymond Smith",
                            "state": "active",
                            "created_at": "2012-10-22T14:13:35Z",
                            "access_level": 20
                        }
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.11.",
            "tags": [
                "access_requests"
            ],
            "operationId": "putApiV4ProjectsIdAccessRequestsUserIdApprove"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/access_requests/{user_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the access requester",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Denies an access request for the given user."
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.11.",
            "tags": [
                "access_requests"
            ],
            "operationId": "deleteApiV4ProjectsIdAccessRequestsUserId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/authorize",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 17
                },
                {
                    "in": "path",
                    "name": "alert_iid",
                    "description": "The IID of the Alert",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 23
                }
            ],
            "responses": {
                "200": {
                    "description": "Workhorse authorize metric image file upload"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Workhorse authorize metric image file upload",
            "tags": [
                "alert_management"
            ],
            "operationId": "postApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 17
                },
                {
                    "in": "path",
                    "name": "alert_iid",
                    "description": "The IID of the Alert",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 23
                },
                {
                    "in": "formData",
                    "name": "file",
                    "description": "The image file to be uploaded",
                    "type": "file",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "url",
                    "description": "The url to view more metric info",
                    "type": "string",
                    "required": false,
                    "example": "https://example.com/metric"
                },
                {
                    "in": "formData",
                    "name": "url_text",
                    "description": "A description of the image or URL",
                    "type": "string",
                    "required": false,
                    "example": "An example metric"
                }
            ],
            "responses": {
                "200": {
                    "description": "Upload a metric image for an alert",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MetricImage"
                    }
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Upload a metric image for an alert",
            "tags": [
                "alert_management"
            ],
            "operationId": "postApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/{metric_image_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 17
                },
                {
                    "in": "path",
                    "name": "alert_iid",
                    "description": "The IID of the Alert",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 23
                },
                {
                    "in": "path",
                    "name": "metric_image_id",
                    "description": "The ID of metric image",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 42
                },
                {
                    "in": "formData",
                    "name": "url",
                    "description": "The url to view more metric info",
                    "type": "string",
                    "required": false,
                    "example": "https://example.com/metric"
                },
                {
                    "in": "formData",
                    "name": "url_text",
                    "description": "A description of the image or URL",
                    "type": "string",
                    "required": false,
                    "example": "An example metric"
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a metric image for an alert",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MetricImage"
                    }
                },
                "403": {
                    "description": "Forbidden"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Update a metric image for an alert",
            "tags": [
                "alert_management"
            ],
            "operationId": "putApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/{metric_image_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 17
                },
                {
                    "in": "path",
                    "name": "alert_iid",
                    "description": "The IID of the Alert",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 23
                },
                {
                    "in": "path",
                    "name": "metric_image_id",
                    "description": "The ID of metric image",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 42
                }
            ],
            "responses": {
                "204": {
                    "description": "Remove a metric image for an alert",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MetricImage"
                    }
                },
                "403": {
                    "description": "Forbidden"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Remove a metric image for an alert",
            "tags": [
                "alert_management"
            ],
            "operationId": "deleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/issues/{issue_iid}/award_emoji",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "issue_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdIssuesIssueIidAwardEmoji",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the emoji without colons."
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Add a new emoji reaction"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add a new emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "postApiV4ProjectsIdIssuesIssueIidAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/issues/{issue_iid}/award_emoji/{award_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of an emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "issue_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete an emoji reaction"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "deleteApiV4ProjectsIdIssuesIssueIidAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/issues/{issue_iid}/notes/{note_id}/award_emoji",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "issue_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdIssuesIssueIidNotesNoteIdAwardEmoji",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the emoji without colons."
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Add a new emoji reaction"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add a new emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "postApiV4ProjectsIdIssuesIssueIidNotesNoteIdAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/issues/{issue_iid}/notes/{note_id}/award_emoji/{award_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of an emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "issue_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete an emoji reaction"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "deleteApiV4ProjectsIdIssuesIssueIidNotesNoteIdAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/award_emoji",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidAwardEmoji",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the emoji without colons."
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Add a new emoji reaction"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add a new emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "postApiV4ProjectsIdMergeRequestsMergeRequestIidAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/award_emoji/{award_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of an emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete an emoji reaction"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "deleteApiV4ProjectsIdMergeRequestsMergeRequestIidAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/notes/{note_id}/award_emoji",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidNotesNoteIdAwardEmoji",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the emoji without colons."
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Add a new emoji reaction"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add a new emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "postApiV4ProjectsIdMergeRequestsMergeRequestIidNotesNoteIdAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/notes/{note_id}/award_emoji/{award_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of an emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete an emoji reaction"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "deleteApiV4ProjectsIdMergeRequestsMergeRequestIidNotesNoteIdAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets/{snippet_id}/award_emoji",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "snippet_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdSnippetsSnippetIdAwardEmoji",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the emoji without colons."
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Add a new emoji reaction"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add a new emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "postApiV4ProjectsIdSnippetsSnippetIdAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets/{snippet_id}/award_emoji/{award_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of an emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "snippet_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete an emoji reaction"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "deleteApiV4ProjectsIdSnippetsSnippetIdAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "snippet_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the emoji without colons."
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Add a new emoji reaction"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add a new emoji reaction",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_AwardEmoji"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "postApiV4ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji/{award_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "award_id",
                    "description": "ID of an emoji reaction.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "snippet_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "note_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete an emoji reaction"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
            "tags": [
                "award_emoji"
            ],
            "operationId": "deleteApiV4ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/badges",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdBadges",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "link_url": {
                                "type": "string",
                                "description": "URL of the badge link"
                            },
                            "image_url": {
                                "type": "string",
                                "description": "URL of the badge image"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name for the badge"
                            }
                        },
                        "required": [
                            "link_url",
                            "image_url"
                        ],
                        "description": "Adds a badge to a project."
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Adds a badge to a project.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Badge"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "badges"
            ],
            "operationId": "postApiV4ProjectsIdBadges"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/badges/{badge_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "badge_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdBadgesBadgeId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "link_url": {
                                "type": "string",
                                "description": "URL of the badge link"
                            },
                            "image_url": {
                                "type": "string",
                                "description": "URL of the badge image"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name for the badge"
                            }
                        },
                        "description": "Updates a badge of a project."
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Updates a badge of a project.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Badge"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "badges"
            ],
            "operationId": "putApiV4ProjectsIdBadgesBadgeId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/badges/{badge_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "badge_id",
                    "description": "The badge ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Removes a badge from the project."
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "badges"
            ],
            "operationId": "deleteApiV4ProjectsIdBadgesBadgeId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/branches",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdRepositoryBranches",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "branch": {
                                "type": "string",
                                "description": "The name of the branch"
                            },
                            "ref": {
                                "type": "string",
                                "description": "Create branch from commit sha or existing branch"
                            }
                        },
                        "required": [
                            "branch",
                            "ref"
                        ],
                        "description": "Create branch"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create branch",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Branch"
                    }
                },
                "400": {
                    "description": "Failed to create branch"
                }
            },
            "request_body_parameters": {},
            "description": "Create branch",
            "tags": [
                "branches"
            ],
            "operationId": "postApiV4ProjectsIdRepositoryBranches"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/branches/{branch}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "branch",
                    "description": "The name of the branch",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a branch"
                },
                "404": {
                    "description": "Branch Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a branch",
            "tags": [
                "branches"
            ],
            "operationId": "deleteApiV4ProjectsIdRepositoryBranchesBranch"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/branches/{branch}/protect",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "branch",
                    "description": "The name of the branch",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdRepositoryBranchesBranchProtect",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "developers_can_push": {
                                "type": "boolean",
                                "description": "Flag if developers can push to that branch"
                            },
                            "developers_can_merge": {
                                "type": "boolean",
                                "description": "Flag if developers can merge to that branch"
                            }
                        },
                        "description": "Protect a single branch"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Protect a single branch",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Branch"
                    }
                },
                "404": {
                    "description": "404 Branch Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Protect a single branch",
            "tags": [
                "branches"
            ],
            "operationId": "putApiV4ProjectsIdRepositoryBranchesBranchProtect"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/branches/{branch}/unprotect",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "branch",
                    "description": "The name of the branch",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Unprotect a single branch",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Branch"
                    }
                },
                "404": {
                    "description": "404 Project Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Unprotect a single branch",
            "tags": [
                "branches"
            ],
            "operationId": "putApiV4ProjectsIdRepositoryBranchesBranchUnprotect"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/merged_branches",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "202": {
                    "description": "202 Accepted"
                },
                "404": {
                    "description": "404 Project Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete all merged branches",
            "tags": [
                "branches"
            ],
            "operationId": "deleteApiV4ProjectsIdRepositoryMergedBranches"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/catalog/publish",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdCatalogPublish",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "description": "The version of the catalog resource / tag of the release to publish"
                            },
                            "metadata": {
                                "type": "object",
                                "description": "The metadata for the release"
                            }
                        },
                        "required": [
                            "version",
                            "metadata"
                        ],
                        "description": "Publish a new component project release as version to the CI/CD catalog"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Publish a new component project release as version to the CI/CD catalog",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Catalog_Resources_Version"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Publishes a release of a catalog resource as version to the CI/CD catalog.",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdCatalogPublish"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/jobs/{job_id}/artifacts",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "job_id",
                    "description": "The ID of a job",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete the artifacts files from a job"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "409": {
                    "description": "Conflict"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.9",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdJobsJobIdArtifacts"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/jobs/{job_id}/artifacts/keep",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "job_id",
                    "description": "The ID of a job",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Keep the artifacts to prevent them from being deleted",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Job"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Keep the artifacts to prevent them from being deleted",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdJobsJobIdArtifactsKeep"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/artifacts",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "202": {
                    "description": "Expire the artifacts files from a project"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "409": {
                    "description": "Conflict"
                }
            },
            "request_body_parameters": {},
            "description": "Expire the artifacts files from a project",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdArtifacts"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/jobs/{job_id}/cancel",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "job_id",
                    "description": "The ID of a job",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 88
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdJobsJobIdCancel",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "force": {
                                "type": "boolean",
                                "description": "Force cancellation for a job with a state of `canceling`",
                                "example": true
                            }
                        },
                        "description": "Cancel a specific job of a project"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Cancel a specific job of a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Job"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Cancel a specific job of a project",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdJobsJobIdCancel"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/jobs/{job_id}/retry",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "job_id",
                    "description": "The ID of a job",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 88
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Retry a specific job of a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Job"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Retry a specific job of a project",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdJobsJobIdRetry"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/jobs/{job_id}/erase",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "job_id",
                    "description": "The ID of a build",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 88
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Erase job (remove artifacts and the trace)",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Job"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "409": {
                    "description": "Conflict"
                }
            },
            "request_body_parameters": {},
            "description": "Erase job (remove artifacts and the trace)",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdJobsJobIdErase"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/jobs/{job_id}/play",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "job_id",
                    "description": "The ID of a Job",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 88
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdJobsJobIdPlay",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "job_variables_attributes": {
                                "type": "array",
                                "description": "User defined variables that will be included when running the job",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "description": "The name of the variable",
                                            "example": "foo"
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "The value of the variable",
                                            "example": "bar"
                                        }
                                    },
                                    "required": [
                                        "key",
                                        "value"
                                    ]
                                }
                            }
                        },
                        "description": "Trigger an actionable job (manual, delayed, etc)"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Trigger an actionable job (manual, delayed, etc)",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_JobBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was added in GitLab 8.11",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdJobsJobIdPlay"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/resource_groups/{key}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the resource group",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdResourceGroupsKey",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "process_mode": {
                                "type": "string",
                                "description": "The process mode of the resource group",
                                "enum": [
                                    "unordered",
                                    "oldest_first",
                                    "newest_first",
                                    "newest_ready_first"
                                ]
                            }
                        },
                        "description": "Edit an existing resource group"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Edit an existing resource group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_ResourceGroup"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Updates an existing resource group's properties.",
            "tags": [
                "ci_resource_groups"
            ],
            "operationId": "putApiV4ProjectsIdResourceGroupsKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/runners",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdRunners",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "runner_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of a runner"
                            }
                        },
                        "required": [
                            "runner_id"
                        ],
                        "description": "Assign a runner to project"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Assign a runner to project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Runner"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "No access granted"
                },
                "404": {
                    "description": "Runner not found"
                }
            },
            "request_body_parameters": {},
            "description": "Assign an available project runner to the project.",
            "tags": [
                "runners",
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdRunners"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/runners/{runner_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "runner_id",
                    "description": "The ID of a runner",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "400": {
                    "description": "Bad Request"
                },
                "204": {
                    "description": "Unassign a runner from project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Runner"
                    }
                },
                "403": {
                    "description": "You cannot unassign a runner from the owner project. Delete the runner instead"
                },
                "404": {
                    "description": "Runner not found"
                },
                "412": {
                    "description": "Precondition Failed"
                }
            },
            "request_body_parameters": {},
            "description": "It is not possible to unassign a runner from the owner project. If so, an error is returned. Use the call to delete a runner instead.",
            "tags": [
                "runners",
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdRunnersRunnerId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/runners/reset_registration_token",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Reset runner registration token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_ResetTokenResult"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Project Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Reset runner registration token",
            "tags": [
                "runners",
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdRunnersResetRegistrationToken"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/secure_files",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the\n        authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdSecureFiles",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the file being uploaded. The filename must be unique within\n            the project"
                            },
                            "file": {
                                "type": "file",
                                "description": "The secure file being uploaded"
                            }
                        },
                        "required": [
                            "name",
                            "file"
                        ],
                        "description": "Create a secure file"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a secure file",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_SecureFile"
                    }
                },
                "400": {
                    "description": "400 Bad Request"
                }
            },
            "request_body_parameters": {},
            "description": "Create a secure file",
            "tags": [
                "secure_files"
            ],
            "operationId": "postApiV4ProjectsIdSecureFiles"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/secure_files/{secure_file_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the\n        authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "secure_file_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Remove a secure file"
                },
                "404": {
                    "description": "404 Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Remove a secure file",
            "tags": [
                "secure_files"
            ],
            "operationId": "deleteApiV4ProjectsIdSecureFilesSecureFileId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipeline",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or URL-encoded path",
                    "type": "string",
                    "required": true,
                    "example": 11
                },
                {
                    "name": "postApiV4ProjectsIdPipeline",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "ref": {
                                "type": "string",
                                "description": "Reference",
                                "example": "develop"
                            },
                            "variables": {
                                "type": "array",
                                "description": "Array of variables available in the pipeline",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "description": "The key of the variable",
                                            "example": "UPLOAD_TO_S3"
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "The value of the variable",
                                            "example": "true"
                                        },
                                        "variable_type": {
                                            "type": "string",
                                            "description": "The type of variable, must be one of env_var or file. Defaults to env_var",
                                            "enum": [
                                                "env_var",
                                                "file"
                                            ],
                                            "default": "env_var"
                                        }
                                    }
                                }
                            },
                            "inputs": {
                                "type": "object",
                                "description": "The list of inputs to be used to create the pipeline."
                            }
                        },
                        "required": [
                            "ref"
                        ],
                        "description": "Create a new pipeline"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a new pipeline",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Pipeline"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.14",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdPipeline"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipelines/{pipeline_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or URL-encoded path",
                    "type": "string",
                    "required": true,
                    "example": 11
                },
                {
                    "in": "path",
                    "name": "pipeline_id",
                    "description": "The pipeline ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 18
                }
            ],
            "responses": {
                "204": {
                    "description": "Pipeline was deleted"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.6",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdPipelinesPipelineId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipelines/{pipeline_id}/metadata",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or URL-encoded path",
                    "type": "string",
                    "required": true,
                    "example": 11
                },
                {
                    "in": "path",
                    "name": "pipeline_id",
                    "description": "The pipeline ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 18
                },
                {
                    "name": "putApiV4ProjectsIdPipelinesPipelineIdMetadata",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the pipeline",
                                "example": "Deployment to production"
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Updates pipeline metadata"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Updates pipeline metadata",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_PipelineWithMetadata"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.6",
            "tags": [
                "projects"
            ],
            "operationId": "putApiV4ProjectsIdPipelinesPipelineIdMetadata"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipelines/{pipeline_id}/retry",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or URL-encoded path",
                    "type": "string",
                    "required": true,
                    "example": 11
                },
                {
                    "in": "path",
                    "name": "pipeline_id",
                    "description": "The pipeline ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 18
                }
            ],
            "responses": {
                "201": {
                    "description": "Retry builds in the pipeline",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Pipeline"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.11.",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdPipelinesPipelineIdRetry"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipelines/{pipeline_id}/cancel",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID or URL-encoded path",
                    "type": "string",
                    "required": true,
                    "example": 11
                },
                {
                    "in": "path",
                    "name": "pipeline_id",
                    "description": "The pipeline ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 18
                }
            ],
            "responses": {
                "201": {
                    "description": "Cancel all builds in the pipeline",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Pipeline"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.11.",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdPipelinesPipelineIdCancel"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipeline_schedules",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "name": "postApiV4ProjectsIdPipelineSchedules",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "description": {
                                "type": "string",
                                "description": "The description of pipeline schedule",
                                "example": "Test schedule pipeline"
                            },
                            "ref": {
                                "type": "string",
                                "description": "The branch/tag name will be triggered",
                                "example": "develop"
                            },
                            "cron": {
                                "type": "string",
                                "description": "The cron",
                                "example": "* * * * *"
                            },
                            "cron_timezone": {
                                "type": "string",
                                "description": "The timezone",
                                "default": "UTC",
                                "example": "Asia/Tokyo"
                            },
                            "active": {
                                "type": "boolean",
                                "description": "The activation of pipeline schedule",
                                "default": true,
                                "example": true
                            },
                            "inputs": {
                                "type": "array",
                                "description": "Inputs for the pipeline schedule",
                                "example": [
                                    {
                                        "name": "array_input",
                                        "value": [
                                            1,
                                            2
                                        ]
                                    },
                                    {
                                        "name": "boolean_input",
                                        "value": true
                                    }
                                ],
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "The name of the input",
                                            "example": "deploy_strategy"
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "The value of the input",
                                            "example": "blue-green"
                                        }
                                    },
                                    "required": [
                                        "name",
                                        "value"
                                    ]
                                }
                            }
                        },
                        "required": [
                            "description",
                            "ref",
                            "cron"
                        ],
                        "description": "Create a new pipeline schedule"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a new pipeline schedule",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_PipelineScheduleDetails"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Create a new pipeline schedule",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdPipelineSchedules"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipeline_schedules/{pipeline_schedule_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "path",
                    "name": "pipeline_schedule_id",
                    "description": "The pipeline schedule id",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 13
                },
                {
                    "name": "putApiV4ProjectsIdPipelineSchedulesPipelineScheduleId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "description": {
                                "type": "string",
                                "description": "The description of pipeline schedule",
                                "example": "Test schedule pipeline"
                            },
                            "ref": {
                                "type": "string",
                                "description": "The branch/tag name will be triggered",
                                "example": "develop"
                            },
                            "cron": {
                                "type": "string",
                                "description": "The cron",
                                "example": "* * * * *"
                            },
                            "cron_timezone": {
                                "type": "string",
                                "description": "The timezone",
                                "example": "Asia/Tokyo"
                            },
                            "active": {
                                "type": "boolean",
                                "description": "The activation of pipeline schedule",
                                "example": true
                            },
                            "inputs": {
                                "type": "array",
                                "description": "Inputs for the pipeline schedule",
                                "example": [
                                    {
                                        "name": "deploy_strategy",
                                        "value": "blue-green"
                                    }
                                ],
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "The name of the input",
                                            "example": "deploy_strategy"
                                        },
                                        "destroy": {
                                            "type": "boolean",
                                            "description": "Whether to delete the input",
                                            "default": false
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "The value of the input",
                                            "example": "blue-green"
                                        }
                                    },
                                    "required": [
                                        "name",
                                        "value"
                                    ]
                                }
                            }
                        },
                        "description": "Edit a pipeline schedule"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Edit a pipeline schedule",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_PipelineScheduleDetails"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Edit a pipeline schedule",
            "tags": [
                "projects"
            ],
            "operationId": "putApiV4ProjectsIdPipelineSchedulesPipelineScheduleId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipeline_schedules/{pipeline_schedule_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "path",
                    "name": "pipeline_schedule_id",
                    "description": "The pipeline schedule id",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 13
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a pipeline schedule"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "412": {
                    "description": "Precondition Failed"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a pipeline schedule",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdPipelineSchedulesPipelineScheduleId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipeline_schedules/{pipeline_schedule_id}/take_ownership",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "path",
                    "name": "pipeline_schedule_id",
                    "description": "The pipeline schedule id",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 13
                }
            ],
            "responses": {
                "201": {
                    "description": "Take ownership of a pipeline schedule",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_PipelineScheduleDetails"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Take ownership of a pipeline schedule",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdTakeOwnership"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipeline_schedules/{pipeline_schedule_id}/play",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "path",
                    "name": "pipeline_schedule_id",
                    "description": "The pipeline schedule id",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 13
                }
            ],
            "responses": {
                "201": {
                    "description": "Play a scheduled pipeline immediately"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was added in GitLab 12.8",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdPlay"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipeline_schedules/{pipeline_schedule_id}/variables",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "path",
                    "name": "pipeline_schedule_id",
                    "description": "The pipeline schedule id",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 13
                },
                {
                    "name": "postApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdVariables",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string",
                                "description": "The key of the variable",
                                "example": "NEW_VARIABLE"
                            },
                            "value": {
                                "type": "string",
                                "description": "The value of the variable",
                                "example": "new value"
                            },
                            "variable_type": {
                                "type": "string",
                                "description": "The type of variable, must be one of env_var or file. Defaults to env_var",
                                "enum": [
                                    "env_var",
                                    "file"
                                ],
                                "default": "env_var"
                            }
                        },
                        "required": [
                            "key",
                            "value"
                        ],
                        "description": "Create a new pipeline schedule variable"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a new pipeline schedule variable",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Create a new pipeline schedule variable",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdVariables"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipeline_schedules/{pipeline_schedule_id}/variables/{key}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "path",
                    "name": "pipeline_schedule_id",
                    "description": "The pipeline schedule id",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 13
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the variable",
                    "type": "string",
                    "required": true,
                    "example": "NEW_VARIABLE"
                },
                {
                    "name": "putApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdVariablesKey",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "The value of the variable",
                                "example": "new value"
                            },
                            "variable_type": {
                                "type": "string",
                                "description": "The type of variable, must be one of env_var or file",
                                "enum": [
                                    "env_var",
                                    "file"
                                ],
                                "default": "env_var"
                            }
                        },
                        "description": "Edit a pipeline schedule variable"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Edit a pipeline schedule variable",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Edit a pipeline schedule variable",
            "tags": [
                "projects"
            ],
            "operationId": "putApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdVariablesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pipeline_schedules/{pipeline_schedule_id}/variables/{key}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "path",
                    "name": "pipeline_schedule_id",
                    "description": "The pipeline schedule id",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 13
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the variable",
                    "type": "string",
                    "required": true,
                    "example": "NEW_VARIABLE"
                }
            ],
            "responses": {
                "202": {
                    "description": "Delete a pipeline schedule variable",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a pipeline schedule variable",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdVariablesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/(ref/{ref}/)trigger/pipeline",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "path",
                    "name": "ref",
                    "description": "The commit sha or name of a branch or tag",
                    "type": "string",
                    "required": true,
                    "example": "develop"
                },
                {
                    "name": "postApiV4ProjectsId(refRef)triggerPipeline",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The unique token of trigger or job token",
                                "example": "6d056f63e50fe6f8c5f8f4aa10edb7"
                            },
                            "variables": {
                                "type": "object",
                                "description": "The list of variables to be injected into build",
                                "example": {
                                    "VAR1": "value1",
                                    "VAR2": "value2"
                                }
                            },
                            "inputs": {
                                "type": "object",
                                "description": "The list of inputs to be used to create the pipeline."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Trigger a GitLab project pipeline"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Trigger a GitLab project pipeline",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Pipeline"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Trigger a GitLab project pipeline",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsId(refRef)triggerPipeline"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/triggers",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "name": "postApiV4ProjectsIdTriggers",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "description": {
                                "type": "string",
                                "description": "The trigger token description",
                                "example": "my trigger token description"
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp of when the pipeline trigger token expires.",
                                "example": "2024-07-01"
                            }
                        },
                        "required": [
                            "description"
                        ],
                        "description": "Create a trigger token"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a trigger token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Trigger"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Create a trigger token",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdTriggers"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/triggers/{trigger_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "path",
                    "name": "trigger_id",
                    "description": "The trigger token ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdTriggersTriggerId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "description": {
                                "type": "string",
                                "description": "The trigger token description"
                            }
                        },
                        "description": "Update a trigger token"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a trigger token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Trigger"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Update a trigger token",
            "tags": [
                "projects"
            ],
            "operationId": "putApiV4ProjectsIdTriggersTriggerId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/triggers/{trigger_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 18
                },
                {
                    "in": "path",
                    "name": "trigger_id",
                    "description": "The trigger token ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 10
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a trigger token"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "412": {
                    "description": "Precondition Failed"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a trigger token",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdTriggersTriggerId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/variables",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a project or URL-encoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdVariables",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string",
                                "description": "The key of a variable"
                            },
                            "value": {
                                "type": "string",
                                "description": "The value of a variable"
                            },
                            "protected": {
                                "type": "boolean",
                                "description": "Whether the variable is protected"
                            },
                            "masked": {
                                "type": "boolean",
                                "description": "Whether the variable is masked"
                            },
                            "masked_and_hidden": {
                                "type": "boolean",
                                "description": "Whether the variable is masked and hidden"
                            },
                            "raw": {
                                "type": "boolean",
                                "description": "Whether the variable will be expanded"
                            },
                            "variable_type": {
                                "type": "string",
                                "description": "The type of the variable. Default: env_var",
                                "enum": [
                                    "env_var",
                                    "file"
                                ]
                            },
                            "environment_scope": {
                                "type": "string",
                                "description": "The environment_scope of the variable"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the variable"
                            }
                        },
                        "required": [
                            "key",
                            "value"
                        ],
                        "description": "Create a new variable in a project"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a new variable in a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                },
                "400": {
                    "description": "400 Bad Request"
                }
            },
            "request_body_parameters": {},
            "description": "Create a new variable in a project",
            "tags": [
                "ci_variables"
            ],
            "operationId": "postApiV4ProjectsIdVariables"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/variables/{key}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a project or URL-encoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of a variable",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdVariablesKey",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "The value of a variable"
                            },
                            "protected": {
                                "type": "boolean",
                                "description": "Whether the variable is protected"
                            },
                            "masked": {
                                "type": "boolean",
                                "description": "Whether the variable is masked"
                            },
                            "environment_scope": {
                                "type": "string",
                                "description": "The environment_scope of a variable"
                            },
                            "raw": {
                                "type": "boolean",
                                "description": "Whether the variable will be expanded"
                            },
                            "variable_type": {
                                "type": "string",
                                "description": "The type of the variable. Default: env_var",
                                "enum": [
                                    "env_var",
                                    "file"
                                ]
                            },
                            "filter": {
                                "type": "object",
                                "description": "Available filters: [environment_scope]. Example: filter[environment_scope]=production",
                                "properties": {
                                    "environment_scope": {
                                        "type": "string",
                                        "description": "The environment scope of a variable"
                                    }
                                }
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the variable"
                            }
                        },
                        "description": "Update an existing variable from a project"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update an existing variable from a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                },
                "404": {
                    "description": "Variable Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Update an existing variable from a project",
            "tags": [
                "ci_variables"
            ],
            "operationId": "putApiV4ProjectsIdVariablesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/variables/{key}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a project or URL-encoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of a variable",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "filter[environment_scope]",
                    "description": "The environment scope of the variable",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "404": {
                    "description": "Variable Not Found"
                },
                "204": {
                    "description": "Delete an existing variable from a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Delete an existing variable from a project",
            "tags": [
                "ci_variables"
            ],
            "operationId": "deleteApiV4ProjectsIdVariablesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/cluster_agents/{agent_id}/tokens",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "agent_id",
                    "description": "The ID of an agent",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdClusterAgentsAgentIdTokens",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name for the token"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description for the token"
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Create an agent token"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create an agent token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Clusters_AgentTokenWithToken"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.0. Creates a new token for an agent.",
            "tags": [
                "cluster_agents"
            ],
            "operationId": "postApiV4ProjectsIdClusterAgentsAgentIdTokens"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/cluster_agents/{agent_id}/tokens/{token_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "agent_id",
                    "description": "The ID of an agent",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "token_id",
                    "description": "The ID of the agent token",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Revoke an agent token"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.0. Revokes an agent token.",
            "tags": [
                "cluster_agents"
            ],
            "operationId": "deleteApiV4ProjectsIdClusterAgentsAgentIdTokensTokenId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/cluster_agents",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdClusterAgents",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the agent"
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Register an agent with a project"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Register an agent with a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Clusters_Agent"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.10. Registers an agent to the project.",
            "tags": [
                "cluster_agents"
            ],
            "operationId": "postApiV4ProjectsIdClusterAgents"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/cluster_agents/{agent_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "agent_id",
                    "description": "The ID of an agent",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a registered agent"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.10. Deletes an existing agent registration.",
            "tags": [
                "cluster_agents"
            ],
            "operationId": "deleteApiV4ProjectsIdClusterAgentsAgentId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/commits",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdRepositoryCommits",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "branch": {
                                "type": "string",
                                "description": "Name of the branch to commit into. To create a new branch, also provide either `start_branch` or `start_sha`, and optionally `start_project`.",
                                "example": "master"
                            },
                            "commit_message": {
                                "type": "string",
                                "description": "Commit message",
                                "example": "initial commit"
                            },
                            "actions": {
                                "type": "array",
                                "description": "Actions to perform in commit",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "action": {
                                            "type": "string",
                                            "description": "The action to perform, `create`, `delete`, `move`, `update`, `chmod`",
                                            "enum": [
                                                "create",
                                                "update",
                                                "move",
                                                "delete",
                                                "chmod"
                                            ]
                                        },
                                        "file_path": {
                                            "type": "string",
                                            "description": "Full path to the file.",
                                            "example": "lib/class.rb"
                                        },
                                        "previous_path": {
                                            "type": "string",
                                            "description": "Original full path to the file being moved.",
                                            "example": "lib/class.rb"
                                        },
                                        "content": {
                                            "type": "string",
                                            "description": "File content",
                                            "example": "Some file content"
                                        },
                                        "encoding": {
                                            "type": "string",
                                            "description": "`text` or `base64`",
                                            "enum": [
                                                "text",
                                                "base64"
                                            ],
                                            "default": "text"
                                        },
                                        "last_commit_id": {
                                            "type": "string",
                                            "description": "Last known file commit id",
                                            "example": "2695effb5807a22ff3d138d593fd856244e155e7"
                                        },
                                        "execute_filemode": {
                                            "type": "boolean",
                                            "description": "When `true/false` enables/disables the execute flag on the file."
                                        }
                                    },
                                    "required": [
                                        "action",
                                        "file_path",
                                        "previous_path",
                                        "content",
                                        "execute_filemode"
                                    ]
                                }
                            },
                            "start_branch": {
                                "type": "string",
                                "description": "Name of the branch to start the new branch from",
                                "example": "staging"
                            },
                            "start_sha": {
                                "type": "string",
                                "description": "SHA of the commit to start the new branch from",
                                "example": "2695effb5807a22ff3d138d593fd856244e155e7"
                            },
                            "start_project": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID or path of the project to start the new branch from",
                                "example": 1
                            },
                            "author_email": {
                                "type": "string",
                                "description": "Author email for commit",
                                "example": "janedoe@example.com"
                            },
                            "author_name": {
                                "type": "string",
                                "description": "Author name for commit",
                                "example": "Jane Doe"
                            },
                            "stats": {
                                "type": "boolean",
                                "description": "Include commit stats",
                                "default": true
                            },
                            "force": {
                                "type": "boolean",
                                "description": "When `true` overwrites the target branch with a new commit based on the `start_branch` or `start_sha`",
                                "default": false
                            }
                        },
                        "required": [
                            "branch",
                            "commit_message",
                            "actions"
                        ],
                        "description": "Commit multiple file changes as one commit"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Commit multiple file changes as one commit",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_CommitDetail"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.13",
            "tags": [
                "commits"
            ],
            "operationId": "postApiV4ProjectsIdRepositoryCommits"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/commits/{sha}/comments",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "sha",
                    "description": "A commit sha, or the name of a branch or tag on which to post a comment",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdRepositoryCommitsShaComments",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "note": {
                                "type": "string",
                                "description": "The text of the comment",
                                "example": "Nice code!"
                            },
                            "path": {
                                "type": "string",
                                "description": "The file path",
                                "example": "doc/update/5.4-to-6.0.md"
                            },
                            "line": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The line number",
                                "example": 11
                            },
                            "line_type": {
                                "type": "string",
                                "description": "The type of the line",
                                "enum": [
                                    "new",
                                    "old"
                                ],
                                "default": "new"
                            }
                        },
                        "required": [
                            "note",
                            "line",
                            "line_type"
                        ],
                        "description": "Post comment to commit"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Post comment to commit",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_CommitNote"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Post comment to commit",
            "tags": [
                "commits"
            ],
            "operationId": "postApiV4ProjectsIdRepositoryCommitsShaComments"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/commits/{sha}/cherry_pick",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "sha",
                    "description": "A commit sha, or the name of a branch or tag to be cherry-picked",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdRepositoryCommitsShaCherryPick",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "branch": {
                                "type": "string",
                                "description": "The name of the branch",
                                "example": "master"
                            },
                            "dry_run": {
                                "type": "boolean",
                                "description": "Does not commit any changes",
                                "default": false
                            },
                            "message": {
                                "type": "string",
                                "description": "A custom commit message to use for the picked commit",
                                "example": "Initial commit"
                            }
                        },
                        "required": [
                            "branch"
                        ],
                        "description": "Cherry pick commit into a branch"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Cherry pick commit into a branch",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Commit"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.15",
            "tags": [
                "commits"
            ],
            "operationId": "postApiV4ProjectsIdRepositoryCommitsShaCherryPick"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/commits/{sha}/revert",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "sha",
                    "description": "Commit SHA to revert",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdRepositoryCommitsShaRevert",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "branch": {
                                "type": "string",
                                "description": "Target branch name",
                                "example": "master"
                            },
                            "dry_run": {
                                "type": "boolean",
                                "description": "Does not commit any changes",
                                "default": false
                            }
                        },
                        "required": [
                            "branch"
                        ],
                        "description": "Revert a commit in a branch"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Revert a commit in a branch",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Commit"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.5",
            "tags": [
                "commits"
            ],
            "operationId": "postApiV4ProjectsIdRepositoryCommitsShaRevert"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/statuses/{sha}",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "sha",
                    "description": "The commit hash",
                    "type": "string",
                    "required": true,
                    "example": "18f3e63d05582537db6d183d9d557be09e1f90c8"
                },
                {
                    "name": "postApiV4ProjectsIdStatusesSha",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "state": {
                                "type": "string",
                                "description": "The state of the status",
                                "enum": [
                                    "pending",
                                    "running",
                                    "success",
                                    "failed",
                                    "canceled",
                                    "skipped"
                                ],
                                "example": "pending"
                            },
                            "ref": {
                                "type": "string",
                                "description": "The ref",
                                "example": "develop"
                            },
                            "target_url": {
                                "type": "string",
                                "description": "The target URL to associate with this status",
                                "example": "https://gitlab.example.com/janedoe/gitlab-foss/builds/91"
                            },
                            "description": {
                                "type": "string",
                                "description": "A short description of the status"
                            },
                            "name": {
                                "type": "string",
                                "description": "A string label to differentiate this status from the status of other systems",
                                "default": "default",
                                "example": "coverage"
                            },
                            "context": {
                                "type": "string",
                                "description": "A string label to differentiate this status from the status of other systems",
                                "default": "default",
                                "example": "coverage"
                            },
                            "coverage": {
                                "type": "number",
                                "format": "float",
                                "description": "The total code coverage",
                                "example": 100.0
                            },
                            "pipeline_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "An existing pipeline ID, when multiple pipelines on the same commit SHA have been triggered"
                            }
                        },
                        "required": [
                            "state"
                        ],
                        "description": "Post status to a commit"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Post status to a commit",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_CommitStatus"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Post status to a commit",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdStatusesSha"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/composer",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdPackagesComposer",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "branch": {
                                "type": "string",
                                "description": "The name of the branch",
                                "example": "release"
                            },
                            "tag": {
                                "type": "string",
                                "description": "The name of the tag",
                                "example": "v1.0.0"
                            }
                        },
                        "description": "Composer packages endpoint for registering packages"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Composer packages endpoint for registering packages"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.1",
            "tags": [
                "composer_packages"
            ],
            "operationId": "postApiV4ProjectsIdPackagesComposer"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete Package"
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "deleteApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannel"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/packages/{conan_package_reference}/upload_urls",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Conan package ID",
                    "type": "string",
                    "required": true,
                    "example": "103f6067a947f366ef91fc1b7da351c588d1827f"
                }
            ],
            "responses": {
                "200": {
                    "description": "Package Upload Urls",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_UploadUrls"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.4",
            "tags": [
                "conan_packages"
            ],
            "operationId": "postApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelPackagesConanPackageReferenceUploadUrls"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/upload_urls",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                }
            ],
            "responses": {
                "200": {
                    "description": "Recipe Upload Urls",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_UploadUrls"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.4",
            "tags": [
                "conan_packages"
            ],
            "operationId": "postApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelUploadUrls"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/export/{file_name}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Conan Recipe Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conanfile.py"
                },
                {
                    "name": "putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionExportFileName",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "file": {
                                "type": "file",
                                "description": "The package file to be published (generated by Multipart middleware)"
                            }
                        },
                        "required": [
                            "file"
                        ],
                        "description": "Upload recipe package files"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Upload recipe package files"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.6",
            "tags": [
                "conan_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionExportFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/export/{file_name}/authorize",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Conan Recipe Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conanfile.py"
                }
            ],
            "responses": {
                "200": {
                    "description": "Workhorse authorize the conan recipe file"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.6",
            "tags": [
                "conan_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionExportFileNameAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/package/{conan_package_reference}/{package_revision}/{file_name}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Conan Recipe Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Conan Package ID",
                    "type": "string",
                    "required": true,
                    "example": "103f6067a947f366ef91fc1b7da351c588d1827f"
                },
                {
                    "in": "path",
                    "name": "package_revision",
                    "description": "Conan Package Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conaninfo.txt"
                },
                {
                    "name": "putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionPackageConanPackageReferencePackageRevisionFileName",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "file": {
                                "type": "file",
                                "description": "The package file to be published (generated by Multipart middleware)"
                            }
                        },
                        "required": [
                            "file"
                        ],
                        "description": "Upload package files"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Upload package files"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.6",
            "tags": [
                "conan_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionPackageConanPackageReferencePackageRevisionFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/package/{conan_package_reference}/{package_revision}/{file_name}/authorize",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Conan Recipe Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Conan Package ID",
                    "type": "string",
                    "required": true,
                    "example": "103f6067a947f366ef91fc1b7da351c588d1827f"
                },
                {
                    "in": "path",
                    "name": "package_revision",
                    "description": "Conan Package Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conaninfo.txt"
                }
            ],
            "responses": {
                "200": {
                    "description": "Workhorse authorize the conan package file"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.6",
            "tags": [
                "conan_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionPackageConanPackageReferencePackageRevisionFileNameAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v2/conans/{package_name}/{package_version}/{package_username}/{package_channel}/revisions/{recipe_revision}/files/{file_name}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Recipe revision",
                    "type": "string",
                    "required": true,
                    "example": "df28fd816be3a119de5ce4d374436b25"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conanfile.py"
                },
                {
                    "name": "putApiV4ProjectsIdPackagesConanV2ConansPackageNamePackageVersionPackageUsernamePackageChannelRevisionsRecipeRevisionFilesFileName",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "file": {
                                "type": "file",
                                "description": "The package file to be published (generated by Multipart middleware)"
                            }
                        },
                        "required": [
                            "file"
                        ],
                        "description": "Upload recipe package files"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Upload recipe package files"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.10",
            "tags": [
                "conan_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesConanV2ConansPackageNamePackageVersionPackageUsernamePackageChannelRevisionsRecipeRevisionFilesFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v2/conans/{package_name}/{package_version}/{package_username}/{package_channel}/revisions/{recipe_revision}/files/{file_name}/authorize",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Recipe revision",
                    "type": "string",
                    "required": true,
                    "example": "df28fd816be3a119de5ce4d374436b25"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conanfile.py"
                }
            ],
            "responses": {
                "200": {
                    "description": "Workhorse authorize the conan recipe file"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.10",
            "tags": [
                "conan_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesConanV2ConansPackageNamePackageVersionPackageUsernamePackageChannelRevisionsRecipeRevisionFilesFileNameAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v2/conans/{package_name}/{package_version}/{package_username}/{package_channel}/revisions/{recipe_revision}/packages/{conan_package_reference}/revisions/{package_revision}/files/{file_name}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Recipe revision",
                    "type": "string",
                    "required": true,
                    "example": "df28fd816be3a119de5ce4d374436b25"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Package reference",
                    "type": "string",
                    "required": true,
                    "example": "5ab84d6acfe1f23c4fae0ab88f26e3a396351ac9"
                },
                {
                    "in": "path",
                    "name": "package_revision",
                    "description": "Package revision",
                    "type": "string",
                    "required": true,
                    "example": "3bdd2d8c8e76c876ebd1ac0469a4e72c"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conaninfo.txt"
                },
                {
                    "name": "putApiV4ProjectsIdPackagesConanV2ConansPackageNamePackageVersionPackageUsernamePackageChannelRevisionsRecipeRevisionPackagesConanPackageReferenceRevisionsPackageRevisionFilesFileName",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "file": {
                                "type": "file",
                                "description": "The package file to be published (generated by Multipart middleware)"
                            }
                        },
                        "required": [
                            "file"
                        ],
                        "description": "Upload package files"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Upload package files"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.11",
            "tags": [
                "conan_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesConanV2ConansPackageNamePackageVersionPackageUsernamePackageChannelRevisionsRecipeRevisionPackagesConanPackageReferenceRevisionsPackageRevisionFilesFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/conan/v2/conans/{package_name}/{package_version}/{package_username}/{package_channel}/revisions/{recipe_revision}/packages/{conan_package_reference}/revisions/{package_revision}/files/{file_name}/authorize",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Recipe revision",
                    "type": "string",
                    "required": true,
                    "example": "df28fd816be3a119de5ce4d374436b25"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Package reference",
                    "type": "string",
                    "required": true,
                    "example": "5ab84d6acfe1f23c4fae0ab88f26e3a396351ac9"
                },
                {
                    "in": "path",
                    "name": "package_revision",
                    "description": "Package revision",
                    "type": "string",
                    "required": true,
                    "example": "3bdd2d8c8e76c876ebd1ac0469a4e72c"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conaninfo.txt"
                }
            ],
            "responses": {
                "200": {
                    "description": "Workhorse authorize the conan package file"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.11",
            "tags": [
                "conan_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesConanV2ConansPackageNamePackageVersionPackageUsernamePackageChannelRevisionsRecipeRevisionPackagesConanPackageReferenceRevisionsPackageRevisionFilesFileNameAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/debian/{file_name}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "The filename",
                    "type": "string",
                    "required": true,
                    "example": "example_1.0.0~alpha2_amd64.deb"
                },
                {
                    "name": "putApiV4ProjectsIdPackagesDebianFileName",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "file": {
                                "type": "file",
                                "description": "The package file to be published (generated by Multipart middleware)"
                            },
                            "distribution": {
                                "type": "string",
                                "description": "The Debian Codename or Suite"
                            },
                            "component": {
                                "type": "string",
                                "description": "The Debian Component"
                            }
                        },
                        "required": [
                            "file",
                            "component"
                        ],
                        "description": "Upload Debian package"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Upload Debian package"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.0",
            "tags": [
                "debian_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesDebianFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/debian/{file_name}/authorize",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "The filename",
                    "type": "string",
                    "required": true,
                    "example": "example_1.0.0~alpha2_amd64.deb"
                },
                {
                    "name": "putApiV4ProjectsIdPackagesDebianFileNameAuthorize",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "distribution": {
                                "type": "string",
                                "description": "The Debian Codename or Suite"
                            },
                            "component": {
                                "type": "string",
                                "description": "The Debian Component"
                            }
                        },
                        "required": [
                            "component"
                        ],
                        "description": "Authorize Debian package upload"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Authorize Debian package upload"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.5",
            "tags": [
                "debian_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesDebianFileNameAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deploy_keys",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdDeployKeys",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string",
                                "description": "New deploy key"
                            },
                            "title": {
                                "type": "string",
                                "description": "New deploy key's title"
                            },
                            "can_push": {
                                "type": "boolean",
                                "description": "Can deploy key push to the project's repository"
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)"
                            }
                        },
                        "required": [
                            "key",
                            "title"
                        ],
                        "description": "Add deploy key"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add deploy key",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DeployKeysProject"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Creates a new deploy key for a project. If the deploy key already exists in another project, it's joined to the current project only if the original one is accessible by the same user.",
            "tags": [
                "deploy_keys"
            ],
            "operationId": "postApiV4ProjectsIdDeployKeys"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deploy_keys/{key_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key_id",
                    "description": "The ID of the deploy key",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdDeployKeysKeyId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string",
                                "description": "New deploy key's title"
                            },
                            "can_push": {
                                "type": "boolean",
                                "description": "Can deploy key push to the project's repository"
                            }
                        },
                        "description": "Update deploy key"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update deploy key",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DeployKey"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Updates a deploy key for a project.",
            "tags": [
                "deploy_keys"
            ],
            "operationId": "putApiV4ProjectsIdDeployKeysKeyId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deploy_keys/{key_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key_id",
                    "description": "The ID of the deploy key",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete deploy key"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Removes a deploy key from the project. If the deploy key is used only for this project, it's deleted from the system.",
            "tags": [
                "deploy_keys"
            ],
            "operationId": "deleteApiV4ProjectsIdDeployKeysKeyId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deploy_keys/{key_id}/enable",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key_id",
                    "description": "The ID of the deploy key",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Enable a deploy key",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DeployKey"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Enables a deploy key for a project so this can be used. Returns the enabled key, with a status code 201 when successful. This feature was added in GitLab 8.11.",
            "tags": [
                "deploy_keys"
            ],
            "operationId": "postApiV4ProjectsIdDeployKeysKeyIdEnable"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deploy_tokens",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdDeployTokens",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "New deploy token's name"
                            },
                            "scopes": {
                                "type": "array",
                                "description": "Indicates the deploy token scopes. Must be at least one of `read_repository`, `read_registry`, `write_registry`, `read_package_registry`, `write_package_registry`, `read_virtual_registry`, or `write_virtual_registry`.",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "read_repository",
                                        "read_registry",
                                        "write_registry",
                                        "read_package_registry",
                                        "write_package_registry",
                                        "read_virtual_registry",
                                        "write_virtual_registry"
                                    ]
                                }
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Expiration date for the deploy token. Does not expire if no value is provided. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`)."
                            },
                            "username": {
                                "type": "string",
                                "description": "Username for deploy token. Default is `gitlab+deploy-token-{n}`"
                            }
                        },
                        "required": [
                            "name",
                            "scopes"
                        ],
                        "description": "Create a project deploy token"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a project deploy token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DeployTokenWithToken"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Creates a new deploy token for a project. This feature was introduced in GitLab 12.9.",
            "tags": [
                "deploy_tokens"
            ],
            "operationId": "postApiV4ProjectsIdDeployTokens"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deploy_tokens/{token_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "token_id",
                    "description": "The ID of the deploy token",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a project deploy token"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.9.",
            "tags": [
                "deploy_tokens"
            ],
            "operationId": "deleteApiV4ProjectsIdDeployTokensTokenId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deployments",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdDeployments",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "environment": {
                                "type": "string",
                                "description": "The name of the environment to create the deployment for"
                            },
                            "sha": {
                                "type": "string",
                                "description": "The SHA of the commit that is deployed"
                            },
                            "ref": {
                                "type": "string",
                                "description": "The name of the branch or tag that is deployed"
                            },
                            "tag": {
                                "type": "boolean",
                                "description": "A boolean that indicates if the deployed ref is a tag (`true`) or not (`false`)"
                            },
                            "status": {
                                "type": "string",
                                "description": "The status of the deployment that is created. One of `running`, `success`, `failed`, or `canceled`",
                                "enum": [
                                    "running",
                                    "success",
                                    "failed",
                                    "canceled"
                                ]
                            }
                        },
                        "required": [
                            "environment",
                            "sha",
                            "ref",
                            "tag",
                            "status"
                        ],
                        "description": "Create a deployment"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a deployment",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DeploymentExtended"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.4.",
            "tags": [
                "deployments"
            ],
            "operationId": "postApiV4ProjectsIdDeployments"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deployments/{deployment_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "deployment_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdDeploymentsDeploymentId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "description": "The new status of the deployment. One of `running`, `success`, `failed`, or `canceled`",
                                "enum": [
                                    "running",
                                    "success",
                                    "failed",
                                    "canceled"
                                ]
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "description": "Update a deployment"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a deployment",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DeploymentExtended"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.4.",
            "tags": [
                "deployments"
            ],
            "operationId": "putApiV4ProjectsIdDeploymentsDeploymentId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deployments/{deployment_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "deployment_id",
                    "description": "The ID of the deployment",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Deployment destroyed"
                },
                "403": {
                    "description": "Forbidden"
                },
                "400": {
                    "description": "\"Cannot destroy running deployment\" or \"Deployment currently deployed to environment\""
                }
            },
            "request_body_parameters": {},
            "description": "Delete a specific deployment that is not currently the last deployment for an environment or in a running state. This feature was introduced in GitLab 15.3.",
            "tags": [
                "deployments"
            ],
            "operationId": "deleteApiV4ProjectsIdDeploymentsDeploymentId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/deployments/{deployment_id}/approval",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "deployment_id",
                    "description": "The ID of the deployment",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdDeploymentsDeploymentIdApproval",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "description": "The status of the approval (either `approved` or `rejected`)",
                                "enum": [
                                    "approved",
                                    "rejected"
                                ]
                            },
                            "comment": {
                                "type": "string",
                                "description": "A comment to go with the approval"
                            },
                            "represented_as": {
                                "type": "string",
                                "description": "The name of the User/Group/Role to use for the approval, when the user belongs to multiple approval rules"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "description": "Approve or reject a blocked deployment"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Approve or reject a blocked deployment",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Deployments_Approval"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.8.",
            "tags": [
                "deployments"
            ],
            "operationId": "postApiV4ProjectsIdDeploymentsDeploymentIdApproval"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/draft_notes",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The ID of a merge request.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotes",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "note": {
                                "type": "string",
                                "description": "The content of a note."
                            },
                            "in_reply_to_discussion_id": {
                                "type": "string",
                                "description": "The ID of a discussion the draft note replies to."
                            },
                            "commit_id": {
                                "type": "string",
                                "description": "The sha of a commit to associate the draft note to."
                            },
                            "resolve_discussion": {
                                "type": "boolean",
                                "description": "The associated discussion should be resolved."
                            },
                            "position": {
                                "type": "object",
                                "properties": {
                                    "base_sha": {
                                        "type": "string",
                                        "description": "Base commit SHA in the source branch"
                                    },
                                    "start_sha": {
                                        "type": "string",
                                        "description": "SHA referencing commit in target branch"
                                    },
                                    "head_sha": {
                                        "type": "string",
                                        "description": "SHA referencing HEAD of this merge request"
                                    },
                                    "position_type": {
                                        "type": "string",
                                        "description": "Type of the position reference",
                                        "enum": [
                                            "text",
                                            "image",
                                            "file"
                                        ]
                                    },
                                    "new_path": {
                                        "type": "string",
                                        "description": "File path after change"
                                    },
                                    "new_line": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Line number after change"
                                    },
                                    "old_path": {
                                        "type": "string",
                                        "description": "File path before change"
                                    },
                                    "old_line": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Line number before change"
                                    },
                                    "width": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Width of the image"
                                    },
                                    "height": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Height of the image"
                                    },
                                    "x": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "X coordinate in the image"
                                    },
                                    "y": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Y coordinate in the image"
                                    },
                                    "line_range": {
                                        "type": "object",
                                        "description": "Multi-line start and end",
                                        "properties": {
                                            "start": {
                                                "type": "object",
                                                "properties": {
                                                    "line_code": {
                                                        "type": "string",
                                                        "description": "Start line code for multi-line note"
                                                    },
                                                    "type": {
                                                        "type": "string",
                                                        "description": "Start line type for multi-line note"
                                                    },
                                                    "old_line": {
                                                        "type": "string",
                                                        "description": "Start old_line line number"
                                                    },
                                                    "new_line": {
                                                        "type": "string",
                                                        "description": "Start new_line line number"
                                                    }
                                                }
                                            },
                                            "end": {
                                                "type": "object",
                                                "properties": {
                                                    "line_code": {
                                                        "type": "string",
                                                        "description": "End line code for multi-line note"
                                                    },
                                                    "type": {
                                                        "type": "string",
                                                        "description": "End line type for multi-line note"
                                                    },
                                                    "old_line": {
                                                        "type": "string",
                                                        "description": "End old_line line number"
                                                    },
                                                    "new_line": {
                                                        "type": "string",
                                                        "description": "End new_line line number"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "required": [
                                    "base_sha",
                                    "start_sha",
                                    "head_sha",
                                    "position_type"
                                ]
                            }
                        },
                        "required": [
                            "note"
                        ],
                        "description": "Create a new draft note"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a new draft note",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DraftNote"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Create a new draft note",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotes"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/draft_notes/{draft_note_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The ID of a merge request.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "draft_note_id",
                    "description": "The ID of a draft note",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotesDraftNoteId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "note": {
                                "type": "string",
                                "description": "The content of a note."
                            },
                            "position": {
                                "type": "object",
                                "properties": {
                                    "base_sha": {
                                        "type": "string",
                                        "description": "Base commit SHA in the source branch"
                                    },
                                    "start_sha": {
                                        "type": "string",
                                        "description": "SHA referencing commit in target branch"
                                    },
                                    "head_sha": {
                                        "type": "string",
                                        "description": "SHA referencing HEAD of this merge request"
                                    },
                                    "position_type": {
                                        "type": "string",
                                        "description": "Type of the position reference",
                                        "enum": [
                                            "text",
                                            "image",
                                            "file"
                                        ]
                                    },
                                    "new_path": {
                                        "type": "string",
                                        "description": "File path after change"
                                    },
                                    "new_line": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Line number after change"
                                    },
                                    "old_path": {
                                        "type": "string",
                                        "description": "File path before change"
                                    },
                                    "old_line": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Line number before change"
                                    },
                                    "width": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Width of the image"
                                    },
                                    "height": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Height of the image"
                                    },
                                    "x": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "X coordinate in the image"
                                    },
                                    "y": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Y coordinate in the image"
                                    },
                                    "line_range": {
                                        "type": "object",
                                        "description": "Multi-line start and end",
                                        "properties": {
                                            "start": {
                                                "type": "object",
                                                "properties": {
                                                    "line_code": {
                                                        "type": "string",
                                                        "description": "Start line code for multi-line note"
                                                    },
                                                    "type": {
                                                        "type": "string",
                                                        "description": "Start line type for multi-line note"
                                                    },
                                                    "old_line": {
                                                        "type": "string",
                                                        "description": "Start old_line line number"
                                                    },
                                                    "new_line": {
                                                        "type": "string",
                                                        "description": "Start new_line line number"
                                                    }
                                                }
                                            },
                                            "end": {
                                                "type": "object",
                                                "properties": {
                                                    "line_code": {
                                                        "type": "string",
                                                        "description": "End line code for multi-line note"
                                                    },
                                                    "type": {
                                                        "type": "string",
                                                        "description": "End line type for multi-line note"
                                                    },
                                                    "old_line": {
                                                        "type": "string",
                                                        "description": "End old_line line number"
                                                    },
                                                    "new_line": {
                                                        "type": "string",
                                                        "description": "End new_line line number"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "required": [
                                    "base_sha",
                                    "start_sha",
                                    "head_sha",
                                    "position_type"
                                ]
                            }
                        },
                        "description": "Modify an existing draft note"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Modify an existing draft note",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DraftNote"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Modify an existing draft note",
            "tags": [
                "projects"
            ],
            "operationId": "putApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotesDraftNoteId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/draft_notes/{draft_note_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The ID of a merge request",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "draft_note_id",
                    "description": "The ID of a draft note",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a draft note",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotesDraftNoteId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/draft_notes/{draft_note_id}/publish",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The ID of a merge request",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "draft_note_id",
                    "description": "The ID of a draft note",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Publish a pending draft note"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Publish a pending draft note",
            "tags": [
                "projects"
            ],
            "operationId": "putApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotesDraftNoteIdPublish"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/draft_notes/bulk_publish",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The ID of a merge request",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Bulk publish all pending draft notes"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Bulk publish all pending draft notes",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotesBulkPublish"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/environments",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdEnvironments",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the environment"
                            },
                            "external_url": {
                                "type": "string",
                                "description": "Place to link to for this environment"
                            },
                            "tier": {
                                "type": "string",
                                "description": "The tier of the new environment. Allowed values are `production`, `staging`, `testing`, `development`, and `other`",
                                "enum": [
                                    "production",
                                    "staging",
                                    "testing",
                                    "development",
                                    "other"
                                ]
                            },
                            "cluster_agent_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the Cluster Agent to associate with this environment"
                            },
                            "kubernetes_namespace": {
                                "type": "string",
                                "description": "The Kubernetes namespace to associate with this environment"
                            },
                            "flux_resource_path": {
                                "type": "string",
                                "description": "The Flux resource path to associate with this environment"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the environment"
                            },
                            "auto_stop_setting": {
                                "type": "string",
                                "description": "The auto stop setting for the environment. Allowed values are `always` and `with_action`",
                                "enum": [
                                    "always",
                                    "with_action"
                                ]
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Create a new environment"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a new environment",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Environment"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Creates a new environment with the given name and `external_url`. It returns `201` if the environment was successfully created, `400` for wrong parameters. This feature was introduced in GitLab 8.11.",
            "tags": [
                "environments"
            ],
            "operationId": "postApiV4ProjectsIdEnvironments"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/environments/{environment_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "environment_id",
                    "description": "The ID of the environment",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdEnvironmentsEnvironmentId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "external_url": {
                                "type": "string",
                                "description": "The new URL on which this deployment is viewable"
                            },
                            "tier": {
                                "type": "string",
                                "description": "The tier of the new environment. Allowed values are `production`, `staging`, `testing`, `development`, and `other`",
                                "enum": [
                                    "production",
                                    "staging",
                                    "testing",
                                    "development",
                                    "other"
                                ]
                            },
                            "cluster_agent_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the Cluster Agent to associate with this environment"
                            },
                            "kubernetes_namespace": {
                                "type": "string",
                                "description": "The Kubernetes namespace to associate with this environment"
                            },
                            "flux_resource_path": {
                                "type": "string",
                                "description": "The Flux resource path to associate with this environment"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the environment"
                            },
                            "auto_stop_setting": {
                                "type": "string",
                                "description": "The auto stop setting for the environment. Allowed values are `always` and `with_action`",
                                "enum": [
                                    "always",
                                    "with_action"
                                ]
                            }
                        },
                        "description": "Update an existing environment"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update an existing environment",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Environment"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Updates an existing environment name and/or `external_url`. It returns `200` if the environment was successfully updated. In case of an error, a status code `400` is returned. This feature was introduced in GitLab 8.11.",
            "tags": [
                "environments"
            ],
            "operationId": "putApiV4ProjectsIdEnvironmentsEnvironmentId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/environments/{environment_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "environment_id",
                    "description": "The ID of the environment",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "401": {
                    "description": "Unauthorized"
                },
                "204": {
                    "description": "Delete an environment",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Environment"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "It returns 204 if the environment was successfully deleted, and 404 if the environment does not exist. This feature was introduced in GitLab 8.11.",
            "tags": [
                "environments"
            ],
            "operationId": "deleteApiV4ProjectsIdEnvironmentsEnvironmentId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/environments/review_apps",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "before",
                    "description": "The date before which environments can be deleted. Defaults to 30 days ago. Expected in ISO 8601 format (`YYYY-MM-DDTHH:MM:SSZ`)",
                    "type": "string",
                    "format": "date-time",
                    "default": {},
                    "required": false
                },
                {
                    "in": "query",
                    "name": "limit",
                    "description": "Maximum number of environments to delete. Defaults to 100",
                    "type": "integer",
                    "format": "int32",
                    "default": 100,
                    "minimum": 1,
                    "maximum": 1000,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "dry_run",
                    "description": "Defaults to true for safety reasons. It performs a dry run where no actual deletion will be performed. Set to false to actually delete the environment",
                    "type": "boolean",
                    "default": true,
                    "required": false
                }
            ],
            "responses": {
                "400": {
                    "description": "Bad request"
                },
                "204": {
                    "description": "Delete multiple stopped review apps",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_EnvironmentBasic"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "409": {
                    "description": "Conflict"
                }
            },
            "request_body_parameters": {},
            "description": "It schedules for deletion multiple environments that have already been stopped and are in the review app folder. The actual deletion is performed after 1 week from the time of execution. By default, it only deletes environments 30 days or older. You can change this default using the `before` parameter.",
            "tags": [
                "environments"
            ],
            "operationId": "deleteApiV4ProjectsIdEnvironmentsReviewApps"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/environments/{environment_id}/stop",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "environment_id",
                    "description": "The ID of the environment",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdEnvironmentsEnvironmentIdStop",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "force": {
                                "type": "boolean",
                                "description": "Force environment to stop without executing `on_stop` actions",
                                "default": false
                            }
                        },
                        "description": "Stop an environment"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Stop an environment",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Environment"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "It returns 200 if the environment was successfully stopped.",
            "tags": [
                "environments"
            ],
            "operationId": "postApiV4ProjectsIdEnvironmentsEnvironmentIdStop"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/environments/stop_stale",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdEnvironmentsStopStale",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "before": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Stop all environments that were last modified or deployed to before this date."
                            }
                        },
                        "required": [
                            "before"
                        ],
                        "description": "Stop stale environments"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Stop stale environments"
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "It returns `200` if stale environment check was scheduled successfully",
            "tags": [
                "environments"
            ],
            "operationId": "postApiV4ProjectsIdEnvironmentsStopStale"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/error_tracking/client_keys",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a client key",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ErrorTracking_ClientKey"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Creates a new client key for a project. The public key attribute is generated automatically.This feature was introduced in GitLab 14.3.",
            "tags": [
                "error_tracking_client_keys"
            ],
            "operationId": "postApiV4ProjectsIdErrorTrackingClientKeys"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/error_tracking/client_keys/{key_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Removes a client key from the project. This feature was introduced in GitLab 14.3.",
            "tags": [
                "error_tracking_client_keys"
            ],
            "operationId": "deleteApiV4ProjectsIdErrorTrackingClientKeysKeyId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/error_tracking/settings",
            "method": "patch",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "patchApiV4ProjectsIdErrorTrackingSettings",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "active": {
                                "type": "boolean",
                                "description": "Pass true to enable the already configured Error Tracking settings or false to disable it."
                            },
                            "integrated": {
                                "type": "boolean",
                                "description": "Pass true to enable the integrated Error Tracking backend. Available in GitLab 14.2 and later."
                            }
                        },
                        "required": [
                            "active"
                        ],
                        "description": "Enable or disable the Error Tracking project settings"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Enable or disable the Error Tracking project settings",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ErrorTracking_ProjectSetting"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "The API allows you to enable or disable the Error Tracking settings for a project.Only for users with the Maintainer role for the project.",
            "tags": [
                "error_tracking_project_settings"
            ],
            "operationId": "patchApiV4ProjectsIdErrorTrackingSettings"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/error_tracking/settings",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdErrorTrackingSettings",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "active": {
                                "type": "boolean",
                                "description": "Pass true to enable the configured Error Tracking settings or false to disable it."
                            },
                            "integrated": {
                                "type": "boolean",
                                "description": "Pass true to enable the integrated Error Tracking backend."
                            }
                        },
                        "required": [
                            "active",
                            "integrated"
                        ],
                        "description": "Update Error Tracking project settings. Available in GitLab 15.10 and later."
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update Error Tracking project settings. Available in GitLab 15.10 and later.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ErrorTracking_ProjectSetting"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Update Error Tracking settings for a project. Only for users with Maintainer role for the project.",
            "tags": [
                "error_tracking_project_settings"
            ],
            "operationId": "putApiV4ProjectsIdErrorTrackingSettings"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/feature_flags",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdFeatureFlags",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the feature flag"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the feature flag"
                            },
                            "active": {
                                "type": "boolean",
                                "description": "The active state of the flag. Defaults to `true`. Supported in GitLab 13.3 and later"
                            },
                            "version": {
                                "type": "string",
                                "description": "The version of the feature flag. Must be `new_version_flag`. Omit to create a Legacy feature flag."
                            },
                            "strategies": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "The strategy name. Can be `default`, `gradualRolloutUserId`, `userWithId`, or `gitlabUserList`. In GitLab 13.5 and later, can be `flexibleRollout`"
                                        },
                                        "parameters": {
                                            "type": "string",
                                            "description": "The strategy parameters as a JSON-formatted string e.g. `{\"userIds\":\"user1\"}`"
                                        },
                                        "user_list_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "description": "The ID of the feature flag user list. If strategy is `gitlabUserList`."
                                        },
                                        "scopes": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "environment_scope": {
                                                        "type": "string",
                                                        "description": "The environment scope of the scope"
                                                    }
                                                },
                                                "required": [
                                                    "environment_scope"
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "name"
                                    ]
                                }
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Create a new feature flag"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a new feature flag",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_FeatureFlag"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Creates a new feature flag. This feature was introduced in GitLab 12.5.",
            "tags": [
                "feature_flags"
            ],
            "operationId": "postApiV4ProjectsIdFeatureFlags"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/feature_flags/{feature_flag_name}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "feature_flag_name",
                    "description": "The name of the feature flag",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdFeatureFlagsFeatureFlagName",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The new name of the feature flag. Supported in GitLab 13.3 and later"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the feature flag"
                            },
                            "active": {
                                "type": "boolean",
                                "description": "The active state of the flag. Supported in GitLab 13.3 and later"
                            },
                            "strategies": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "description": "The feature flag strategy ID"
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "The strategy name"
                                        },
                                        "parameters": {
                                            "type": "string",
                                            "description": "The strategy parameters as a JSON-formatted string e.g. `{\"userIds\":\"user1\"}`"
                                        },
                                        "user_list_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "description": "The ID of the feature flag user list"
                                        },
                                        "_destroy": {
                                            "type": "boolean",
                                            "description": "Delete the strategy when true"
                                        },
                                        "scopes": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "description": "The scope id"
                                                    },
                                                    "environment_scope": {
                                                        "type": "string",
                                                        "description": "The environment scope of the scope"
                                                    },
                                                    "_destroy": {
                                                        "type": "boolean",
                                                        "description": "Delete the scope when true"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Update a feature flag"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a feature flag",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_FeatureFlag"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Updates a feature flag. This feature was introduced in GitLab 13.2.",
            "tags": [
                "feature_flags"
            ],
            "operationId": "putApiV4ProjectsIdFeatureFlagsFeatureFlagName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/feature_flags/{feature_flag_name}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "feature_flag_name",
                    "description": "The name of the feature flag",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Deletes a feature flag. This feature was introduced in GitLab 12.5.",
            "tags": [
                "feature_flags"
            ],
            "operationId": "deleteApiV4ProjectsIdFeatureFlagsFeatureFlagName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/feature_flags_user_lists",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdFeatureFlagsUserLists",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the list"
                            },
                            "user_xids": {
                                "type": "string",
                                "description": "A comma separated list of external user ids"
                            }
                        },
                        "required": [
                            "name",
                            "user_xids"
                        ],
                        "description": "Create a feature flag user list"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a feature flag user list",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_FeatureFlag_UserList"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Creates a feature flag user list. This feature was introduced in GitLab 12.10.",
            "tags": [
                "feature_flags_user_lists"
            ],
            "operationId": "postApiV4ProjectsIdFeatureFlagsUserLists"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/feature_flags_user_lists/{iid}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "iid",
                    "description": "The internal ID of the project's feature flag user list",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdFeatureFlagsUserListsIid",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the list"
                            },
                            "user_xids": {
                                "type": "string",
                                "description": "A comma separated list of external user ids"
                            }
                        },
                        "description": "Update a feature flag user list"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a feature flag user list",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_FeatureFlag_UserList"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Updates a feature flag user list. This feature was introduced in GitLab 12.10.",
            "tags": [
                "feature_flags_user_lists"
            ],
            "operationId": "putApiV4ProjectsIdFeatureFlagsUserListsIid"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/feature_flags_user_lists/{iid}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "iid",
                    "description": "The internal ID of the project's feature flag user list",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete feature flag user list"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "409": {
                    "description": "Conflict"
                }
            },
            "request_body_parameters": {},
            "description": "Deletes a feature flag user list. This feature was introduced in GitLab 12.10.",
            "tags": [
                "feature_flags_user_lists"
            ],
            "operationId": "deleteApiV4ProjectsIdFeatureFlagsUserListsIid"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/files/{file_path}",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true,
                    "example": "gitlab-org/gitlab"
                },
                {
                    "in": "path",
                    "name": "file_path",
                    "description": "The url encoded path to the file.",
                    "type": "string",
                    "required": true,
                    "example": "lib%2Fclass%2Erb"
                },
                {
                    "name": "postApiV4ProjectsIdRepositoryFilesFilePath",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "branch": {
                                "type": "string",
                                "description": "Name of the branch to commit into. To create a new branch, also provide `start_branch`.",
                                "example": "main"
                            },
                            "commit_message": {
                                "type": "string",
                                "description": "Commit message",
                                "example": "Initial commit"
                            },
                            "start_branch": {
                                "type": "string",
                                "description": "Name of the branch to start the new commit from",
                                "example": "main"
                            },
                            "author_email": {
                                "type": "string",
                                "description": "The email of the author",
                                "example": "johndoe@example.com"
                            },
                            "author_name": {
                                "type": "string",
                                "description": "The name of the author",
                                "example": "John Doe"
                            },
                            "content": {
                                "type": "string",
                                "description": "File content",
                                "example": "file content"
                            },
                            "encoding": {
                                "type": "string",
                                "description": "File encoding",
                                "enum": [
                                    "base64",
                                    "text"
                                ],
                                "default": "text"
                            },
                            "last_commit_id": {
                                "type": "string",
                                "description": "Last known commit id for this file",
                                "example": "2695effb5807a22ff3d138d593fd856244e155e7"
                            },
                            "execute_filemode": {
                                "type": "boolean",
                                "description": "Enable / Disable the executable flag on the file path"
                            }
                        },
                        "required": [
                            "branch",
                            "commit_message",
                            "content"
                        ],
                        "description": "Create new file in repository"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create new file in repository"
                }
            },
            "request_body_parameters": {},
            "description": "Create new file in repository",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdRepositoryFilesFilePath"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/files/{file_path}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true,
                    "example": "gitlab-org/gitlab"
                },
                {
                    "in": "path",
                    "name": "file_path",
                    "description": "The url encoded path to the file.",
                    "type": "string",
                    "required": true,
                    "example": "lib%2Fclass%2Erb"
                },
                {
                    "name": "putApiV4ProjectsIdRepositoryFilesFilePath",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "branch": {
                                "type": "string",
                                "description": "Name of the branch to commit into. To create a new branch, also provide `start_branch`.",
                                "example": "main"
                            },
                            "commit_message": {
                                "type": "string",
                                "description": "Commit message",
                                "example": "Initial commit"
                            },
                            "start_branch": {
                                "type": "string",
                                "description": "Name of the branch to start the new commit from",
                                "example": "main"
                            },
                            "author_email": {
                                "type": "string",
                                "description": "The email of the author",
                                "example": "johndoe@example.com"
                            },
                            "author_name": {
                                "type": "string",
                                "description": "The name of the author",
                                "example": "John Doe"
                            },
                            "content": {
                                "type": "string",
                                "description": "File content",
                                "example": "file content"
                            },
                            "encoding": {
                                "type": "string",
                                "description": "File encoding",
                                "enum": [
                                    "base64",
                                    "text"
                                ],
                                "default": "text"
                            },
                            "last_commit_id": {
                                "type": "string",
                                "description": "Last known commit id for this file",
                                "example": "2695effb5807a22ff3d138d593fd856244e155e7"
                            },
                            "execute_filemode": {
                                "type": "boolean",
                                "description": "Enable / Disable the executable flag on the file path"
                            }
                        },
                        "required": [
                            "branch",
                            "commit_message",
                            "content"
                        ],
                        "description": "Update existing file in repository"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update existing file in repository"
                }
            },
            "request_body_parameters": {},
            "description": "Update existing file in repository",
            "tags": [
                "projects"
            ],
            "operationId": "putApiV4ProjectsIdRepositoryFilesFilePath"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/files/{file_path}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true,
                    "example": "gitlab-org/gitlab"
                },
                {
                    "in": "path",
                    "name": "file_path",
                    "description": "The url encoded path to the file.",
                    "type": "string",
                    "required": true,
                    "example": "lib%2Fclass%2Erb"
                },
                {
                    "in": "query",
                    "name": "branch",
                    "description": "Name of the branch to commit into. To create a new branch, also provide `start_branch`.",
                    "type": "string",
                    "required": true,
                    "example": "main"
                },
                {
                    "in": "query",
                    "name": "commit_message",
                    "description": "Commit message",
                    "type": "string",
                    "required": true,
                    "example": "Initial commit"
                },
                {
                    "in": "query",
                    "name": "start_branch",
                    "description": "Name of the branch to start the new commit from",
                    "type": "string",
                    "required": false,
                    "example": "main"
                },
                {
                    "in": "query",
                    "name": "author_email",
                    "description": "The email of the author",
                    "type": "string",
                    "required": false,
                    "example": "johndoe@example.com"
                },
                {
                    "in": "query",
                    "name": "author_name",
                    "description": "The name of the author",
                    "type": "string",
                    "required": false,
                    "example": "John Doe"
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete an existing file in repository"
                }
            },
            "request_body_parameters": {},
            "description": "Delete an existing file in repository",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdRepositoryFilesFilePath"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/freeze_periods",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdFreezePeriods",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "freeze_start": {
                                "type": "string",
                                "description": "Start of the freeze period in cron format."
                            },
                            "freeze_end": {
                                "type": "string",
                                "description": "End of the freeze period in cron format"
                            },
                            "cron_timezone": {
                                "type": "string",
                                "description": "The time zone for the cron fields, defaults to UTC if not provided"
                            }
                        },
                        "required": [
                            "freeze_start",
                            "freeze_end"
                        ],
                        "description": "Create a freeze period"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a freeze period",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_FreezePeriod"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Creates a freeze period. This feature was introduced in GitLab 13.0.",
            "tags": [
                "freeze_periods"
            ],
            "operationId": "postApiV4ProjectsIdFreezePeriods"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/freeze_periods/{freeze_period_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "freeze_period_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdFreezePeriodsFreezePeriodId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "freeze_start": {
                                "type": "string",
                                "description": "Start of the freeze period in cron format"
                            },
                            "freeze_end": {
                                "type": "string",
                                "description": "End of the freeze period in cron format"
                            },
                            "cron_timezone": {
                                "type": "string",
                                "description": "The time zone for the cron fields"
                            }
                        },
                        "description": "Update a freeze period"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a freeze period",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_FreezePeriod"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Updates a freeze period for the given `freeze_period_id`. This feature was introduced in GitLab 13.0.",
            "tags": [
                "freeze_periods"
            ],
            "operationId": "putApiV4ProjectsIdFreezePeriodsFreezePeriodId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/freeze_periods/{freeze_period_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "freeze_period_id",
                    "description": "The ID of the freeze period",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "401": {
                    "description": "Unauthorized"
                },
                "204": {
                    "description": "Delete a freeze period",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_FreezePeriod"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Deletes a freeze period for the given `freeze_period_id`. This feature was introduced in GitLab 13.0.",
            "tags": [
                "freeze_periods"
            ],
            "operationId": "deleteApiV4ProjectsIdFreezePeriodsFreezePeriodId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/generic/{package_name}/*package_version/(*path/){file_name}/authorize",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdPackagesGenericPackageName*packageVersion(*path)FileNameAuthorize",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "package_version": {
                                "type": "string",
                                "description": "Package version"
                            },
                            "status": {
                                "type": "string",
                                "description": "Package status",
                                "enum": [
                                    "default",
                                    "hidden"
                                ]
                            },
                            "path": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "required": [
                            "package_version",
                            "path"
                        ],
                        "description": "Workhorse authorize generic package file"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Workhorse authorize generic package file"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.5",
            "tags": [
                "generic_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesGenericPackageName*packageVersion(*path)FileNameAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/generic/{package_name}/*package_version/(*path/){file_name}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdPackagesGenericPackageName*packageVersion(*path)FileName",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "package_version": {
                                "type": "string",
                                "description": "Package version"
                            },
                            "path": {
                                "type": "string",
                                "description": "File directory path"
                            },
                            "status": {
                                "type": "string",
                                "description": "Package status",
                                "enum": [
                                    "default",
                                    "hidden"
                                ]
                            },
                            "file": {
                                "type": "file",
                                "description": "The package file to be published (generated by Multipart middleware)"
                            },
                            "select": {
                                "type": "string",
                                "enum": [
                                    "package_file"
                                ]
                            }
                        },
                        "required": [
                            "package_version",
                            "file"
                        ],
                        "description": "Upload package file"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Upload package file"
                },
                "201": {
                    "description": "Upload package file"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.5",
            "tags": [
                "generic_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesGenericPackageName*packageVersion(*path)FileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/helm/api/{channel}/charts/authorize",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or full path of a project",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "channel",
                    "description": "Helm channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                }
            ],
            "responses": {
                "200": {
                    "description": "Authorize a chart upload from workhorse"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.0",
            "tags": [
                "helm_packages"
            ],
            "operationId": "postApiV4ProjectsIdPackagesHelmApiChannelChartsAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/helm/api/{channel}/charts",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or full path of a project",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "channel",
                    "description": "Helm channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "name": "postApiV4ProjectsIdPackagesHelmApiChannelCharts",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "chart": {
                                "type": "file",
                                "description": "The chart file to be published (generated by Multipart middleware)"
                            }
                        },
                        "required": [
                            "chart"
                        ],
                        "description": "Upload a chart"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Upload a chart"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.0",
            "tags": [
                "helm_packages"
            ],
            "operationId": "postApiV4ProjectsIdPackagesHelmApiChannelCharts"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/apple-app-store",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesAppleAppStore",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "app_store_issuer_id": {
                                "type": "string",
                                "description": "Apple App Store Connect issuer ID."
                            },
                            "app_store_key_id": {
                                "type": "string",
                                "description": "Apple App Store Connect key ID."
                            },
                            "app_store_private_key_file_name": {
                                "type": "string",
                                "description": "Apple App Store Connect private key file name."
                            },
                            "app_store_private_key": {
                                "type": "string",
                                "description": "Apple App Store Connect private key."
                            },
                            "app_store_protected_refs": {
                                "type": "boolean",
                                "description": "Set variables on protected branches and tags only."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "app_store_issuer_id",
                            "app_store_key_id",
                            "app_store_private_key_file_name",
                            "app_store_private_key"
                        ],
                        "description": "Create/Edit Apple App Store integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Apple App Store integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Apple App Store integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesAppleAppStore"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/asana",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesAsana",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "api_key": {
                                "type": "string",
                                "description": "User API token. The user must have access to the task. All comments are attributed to this user."
                            },
                            "restrict_to_branch": {
                                "type": "string",
                                "description": "Comma-separated list of branches to be automatically inspected. Leave blank to include all branches."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "api_key"
                        ],
                        "description": "Create/Edit Asana integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Asana integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Asana integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesAsana"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/assembla",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesAssembla",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The authentication token."
                            },
                            "subdomain": {
                                "type": "string",
                                "description": "The subdomain setting."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Assembla integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Assembla integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Assembla integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesAssembla"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/bamboo",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesBamboo",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Enable SSL verification. Defaults to `true` (enabled)."
                            },
                            "bamboo_url": {
                                "type": "string",
                                "description": "Bamboo root URL (for example, `https://bamboo.example.com`)."
                            },
                            "build_key": {
                                "type": "string",
                                "description": "Bamboo build plan key (for example, `KEY`)."
                            },
                            "username": {
                                "type": "string",
                                "description": "User with API access to the Bamboo server."
                            },
                            "password": {
                                "type": "string",
                                "description": "Password of the user."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "bamboo_url",
                            "build_key",
                            "username",
                            "password"
                        ],
                        "description": "Create/Edit Bamboo integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Bamboo integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Bamboo integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesBamboo"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/bugzilla",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesBugzilla",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "new_issue_url": {
                                "type": "string",
                                "description": "URL of the new issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url",
                            "new_issue_url"
                        ],
                        "description": "Create/Edit Bugzilla integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Bugzilla integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Bugzilla integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesBugzilla"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/buildkite",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesBuildkite",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "Pipeline URL (for example, `https://buildkite.com/example/pipeline`)."
                            },
                            "token": {
                                "type": "string",
                                "description": "Token you get after you create a Buildkite pipeline with a GitLab repository."
                            },
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "DEPRECATED: This parameter has no effect because SSL verification is always enabled."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "token"
                        ],
                        "description": "Create/Edit Buildkite integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Buildkite integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Buildkite integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesBuildkite"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/campfire",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesCampfire",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "API authentication token from Campfire. To get the token, sign in to Campfire and select **My info**."
                            },
                            "subdomain": {
                                "type": "string",
                                "description": "`.campfirenow.com` subdomain when you're signed in."
                            },
                            "room": {
                                "type": "string",
                                "description": "ID portion of the Campfire room URL."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Campfire integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Campfire integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Campfire integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesCampfire"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/confluence",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesConfluence",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "confluence_url": {
                                "type": "string",
                                "description": "URL of the Confluence Workspace hosted on `atlassian.net`."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "confluence_url"
                        ],
                        "description": "Create/Edit Confluence integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Confluence integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Confluence integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesConfluence"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/custom-issue-tracker",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesCustomIssueTracker",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "new_issue_url": {
                                "type": "string",
                                "description": "URL of the new issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url",
                            "new_issue_url"
                        ],
                        "description": "Create/Edit Custom Issue Tracker integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Custom Issue Tracker integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Custom Issue Tracker integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesCustomIssueTracker"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/datadog",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesDatadog",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "datadog_site": {
                                "type": "string",
                                "description": "Datadog site to send data to. Learn more about Datadog sites in the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.datadoghq.com/getting_started/site/\">documentation</a>."
                            },
                            "api_url": {
                                "type": "string",
                                "description": "Full URL of your Datadog site. Only required if you do not use a standard Datadog site."
                            },
                            "api_key": {
                                "type": "string",
                                "description": "<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.datadoghq.com/account_management/api-app-keys/\">API key</a> used for authentication with Datadog."
                            },
                            "datadog_ci_visibility": {
                                "type": "boolean",
                                "description": "Enable CI Visibility"
                            },
                            "archive_trace_events": {
                                "type": "boolean",
                                "description": "When enabled, job logs are collected by Datadog and displayed along with pipeline execution traces."
                            },
                            "datadog_service": {
                                "type": "string",
                                "description": "Tag all pipeline data from this GitLab instance in Datadog. Can be used when managing several self-managed deployments."
                            },
                            "datadog_env": {
                                "type": "string",
                                "description": "For self-managed deployments, `env` tag for all the data sent to Datadog."
                            },
                            "datadog_tags": {
                                "type": "string",
                                "description": "Custom tags in Datadog. Specify one tag per line in the format `key:value\\nkey2:value2`."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "build_events": {
                                "type": "boolean",
                                "description": "Trigger event when a build is created."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "subgroup_events": {
                                "type": "boolean"
                            },
                            "project_events": {
                                "type": "boolean"
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "api_key"
                        ],
                        "description": "Create/Edit Datadog integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Datadog integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Datadog integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesDatadog"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/diffblue-cover",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesDiffblueCover",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "diffblue_license_key": {
                                "type": "string",
                                "description": "Diffblue Cover license key."
                            },
                            "diffblue_access_token_name": {
                                "type": "string",
                                "description": "Access token name used by Diffblue Cover in pipelines."
                            },
                            "diffblue_access_token_secret": {
                                "type": "string",
                                "description": "Access token secret used by Diffblue Cover in pipelines."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "diffblue_license_key",
                            "diffblue_access_token_name",
                            "diffblue_access_token_secret"
                        ],
                        "description": "Create/Edit Diffblue Cover integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Diffblue Cover integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Diffblue Cover integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesDiffblueCover"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/discord",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesDiscord",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "Discord webhook (for example, `https://discord.com/api/webhooks/\u2026`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive push_events notifications"
                            },
                            "issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive issues_events notifications"
                            },
                            "incident_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive incident_events notifications"
                            },
                            "alert_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive alert_events notifications"
                            },
                            "confidential_issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_issues_events notifications"
                            },
                            "merge_request_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive merge_requests_events notifications"
                            },
                            "note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive note_events notifications"
                            },
                            "confidential_note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_note_events notifications"
                            },
                            "tag_push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive tag_push_events notifications"
                            },
                            "deployment_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive deployment_events notifications"
                            },
                            "pipeline_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive pipeline_events notifications"
                            },
                            "wiki_page_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive wiki_page_events notifications"
                            },
                            "vulnerability_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive vulnerability_events notifications"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "deployment_events": {
                                "type": "boolean",
                                "description": "Trigger event when a deployment starts or finishes."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Discord integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Discord integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Discord integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesDiscord"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/drone-ci",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesDroneCi",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Enable SSL verification. Defaults to `true` (enabled)."
                            },
                            "drone_url": {
                                "type": "string",
                                "description": "Drone CI URL (for example, `http://drone.example.com`)."
                            },
                            "token": {
                                "type": "string",
                                "description": "Drone CI token."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "drone_url",
                            "token"
                        ],
                        "description": "Create/Edit Drone Ci integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Drone Ci integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Drone Ci integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesDroneCi"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/emails-on-push",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesEmailsOnPush",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "send_from_committer_email": {
                                "type": "boolean",
                                "description": "Send from committer"
                            },
                            "disable_diffs": {
                                "type": "boolean",
                                "description": "Disable code diffs"
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "recipients": {
                                "type": "string",
                                "description": "Emails separated by whitespace."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "recipients"
                        ],
                        "description": "Create/Edit Emails On Push integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Emails On Push integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Emails On Push integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesEmailsOnPush"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/external-wiki",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesExternalWiki",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "external_wiki_url": {
                                "type": "string",
                                "description": "URL of the external wiki."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "external_wiki_url"
                        ],
                        "description": "Create/Edit External Wiki integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit External Wiki integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set External Wiki integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesExternalWiki"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/gitlab-slack-application",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesGitlabSlackApplication",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "channel": {
                                "type": "string",
                                "description": "Default channel to use if no other channel is configured."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "labels_to_be_notified": {
                                "type": "string",
                                "description": "Labels to send notifications for. Leave blank to receive notifications for all events."
                            },
                            "labels_to_be_notified_behavior": {
                                "type": "string",
                                "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`."
                            },
                            "push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive push_events notifications"
                            },
                            "issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive issues_events notifications"
                            },
                            "incident_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive incident_events notifications"
                            },
                            "alert_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive alert_events notifications"
                            },
                            "confidential_issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_issues_events notifications"
                            },
                            "merge_request_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive merge_requests_events notifications"
                            },
                            "note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive note_events notifications"
                            },
                            "confidential_note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_note_events notifications"
                            },
                            "tag_push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive tag_push_events notifications"
                            },
                            "deployment_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive deployment_events notifications"
                            },
                            "pipeline_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive pipeline_events notifications"
                            },
                            "wiki_page_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive wiki_page_events notifications"
                            },
                            "vulnerability_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive vulnerability_events notifications"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "deployment_events": {
                                "type": "boolean",
                                "description": "Trigger event when a deployment starts or finishes."
                            },
                            "incident_events": {
                                "type": "boolean",
                                "description": "Trigger event when an incident is created."
                            },
                            "vulnerability_events": {
                                "type": "boolean"
                            },
                            "alert_events": {
                                "type": "boolean",
                                "description": "Trigger event when a new, unique alert is recorded."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "description": "Create/Edit Gitlab Slack Application integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Gitlab Slack Application integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Gitlab Slack Application integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesGitlabSlackApplication"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/google-play",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesGooglePlay",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "package_name": {
                                "type": "string",
                                "description": "Package name of the app in Google Play."
                            },
                            "service_account_key_file_name": {
                                "type": "string",
                                "description": "File name of the Google Play service account key."
                            },
                            "service_account_key": {
                                "type": "string",
                                "description": "Google Play service account key."
                            },
                            "google_play_protected_refs": {
                                "type": "boolean",
                                "description": "Set variables on protected branches and tags only."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "package_name",
                            "service_account_key_file_name",
                            "service_account_key"
                        ],
                        "description": "Create/Edit Google Play integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Google Play integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Google Play integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesGooglePlay"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/hangouts-chat",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesHangoutsChat",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "The Hangouts Chat webhook (for example, `https://chat.googleapis.com/v1/spaces...`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Hangouts Chat integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Hangouts Chat integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Hangouts Chat integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesHangoutsChat"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/harbor",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesHarbor",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "The base URL to the Harbor instance linked to the GitLab project. For example, `https://demo.goharbor.io`."
                            },
                            "project_name": {
                                "type": "string",
                                "description": "The name of the project in the Harbor instance. For example, `testproject`."
                            },
                            "username": {
                                "type": "string",
                                "description": "The username created in the Harbor interface."
                            },
                            "password": {
                                "type": "string",
                                "description": "The password of the user."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "url",
                            "project_name",
                            "username",
                            "password"
                        ],
                        "description": "Create/Edit Harbor integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Harbor integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Harbor integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesHarbor"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/irker",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesIrker",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "server_host": {
                                "type": "string",
                                "description": "irker daemon hostname. The default value is `localhost`."
                            },
                            "server_port": {
                                "type": "integer",
                                "format": "int32",
                                "description": "irker daemon port. The default value is `6659`."
                            },
                            "default_irc_uri": {
                                "type": "string",
                                "description": "URI to add before each recipient. The default value is `irc://irc.network.net:6697/`."
                            },
                            "recipients": {
                                "type": "string",
                                "description": "Comma-separated list of channels or email addresses."
                            },
                            "colorize_messages": {
                                "type": "boolean",
                                "description": "Colorize messages"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "recipients"
                        ],
                        "description": "Create/Edit Irker integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Irker integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Irker integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesIrker"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/jenkins",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesJenkins",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Enable SSL verification. Defaults to `true` (enabled)."
                            },
                            "jenkins_url": {
                                "type": "string",
                                "description": "URL of the Jenkins server."
                            },
                            "project_name": {
                                "type": "string",
                                "description": "Name of the Jenkins project."
                            },
                            "username": {
                                "type": "string",
                                "description": "Username of the Jenkins server."
                            },
                            "password": {
                                "type": "string",
                                "description": "Password of the Jenkins server."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "jenkins_url",
                            "project_name"
                        ],
                        "description": "Create/Edit Jenkins integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Jenkins integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Jenkins integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesJenkins"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/jira",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesJira",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "The URL to the Jira project which is being linked to this GitLab project (for example, `https://jira.example.com`)."
                            },
                            "api_url": {
                                "type": "string",
                                "description": "The base URL to the Jira instance API. Web URL value is used if not set (for example, `https://jira-api.example.com`)."
                            },
                            "jira_auth_type": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The authentication method to use with Jira. Use `0` for Basic Authentication, and `1` for Jira personal access token. Defaults to `0`."
                            },
                            "username": {
                                "type": "string",
                                "description": "The email or username to use with Jira. Use an email for Jira Cloud, and a username for Jira Data Center and Jira Server. Required when using Basic Authentication (`jira_auth_type` is `0`)."
                            },
                            "password": {
                                "type": "string",
                                "description": "The Jira API token, password, or personal access token to use with Jira. When using Basic Authentication (`jira_auth_type` is `0`), use an API token for Jira Cloud, and a password for Jira Data Center or Jira Server. For a Jira personal access token (`jira_auth_type` is `1`), use the personal access token."
                            },
                            "jira_issue_regex": {
                                "type": "string",
                                "description": "Regular expression to match Jira issue keys."
                            },
                            "jira_issue_prefix": {
                                "type": "string",
                                "description": "Prefix to match Jira issue keys."
                            },
                            "jira_issue_transition_id": {
                                "type": "string",
                                "description": "The ID of one or more transitions for [custom issue transitions](../integration/jira/issues.md#custom-issue-transitions).Ignored when `jira_issue_transition_automatic` is enabled. Defaults to a blank string,which disables custom transitions."
                            },
                            "issues_enabled": {
                                "type": "string",
                                "description": "Enable viewing Jira issues in GitLab."
                            },
                            "project_keys": {
                                "type": "array",
                                "description": "Keys of Jira projects. When `issues_enabled` is `true`, this setting specifies which Jira projects to view issues from in GitLab.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "commit_events": {
                                "type": "boolean",
                                "description": "Trigger event when a commit is created or updated."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "url",
                            "password"
                        ],
                        "description": "Create/Edit Jira integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Jira integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Jira integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesJira"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/jira-cloud-app",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesJiraCloudApp",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "jira_cloud_app_service_ids": {
                                "type": "string",
                                "description": "Copy and paste your JSM Service ID here. Use comma (,) to separate multiple IDs."
                            },
                            "jira_cloud_app_enable_deployment_gating": {
                                "type": "boolean",
                                "description": "Enable to approve or reject blocked GitLab deployments from Jira Service Management."
                            },
                            "jira_cloud_app_deployment_gating_environments": {
                                "type": "string",
                                "description": "Enter the environment (production,staging,testing,development) where you want to enable deployment gating. Use comma (,) to separate multiple environments."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "description": "Create/Edit Jira Cloud App integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Jira Cloud App integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Jira Cloud App integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesJiraCloudApp"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/matrix",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesMatrix",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "hostname": {
                                "type": "string",
                                "description": "Custom hostname of the Matrix server. The default value is `https://matrix-client.matrix.org`."
                            },
                            "token": {
                                "type": "string",
                                "description": "The Matrix access token (for example, `syt-zyx57W2v1u123ew11`)."
                            },
                            "room": {
                                "type": "string",
                                "description": "Unique identifier for the target room (in the format `!qPKKM111FFKKsfoCVy:matrix.org`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "incident_events": {
                                "type": "boolean",
                                "description": "Trigger event when an incident is created."
                            },
                            "vulnerability_events": {
                                "type": "boolean"
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token",
                            "room"
                        ],
                        "description": "Create/Edit Matrix integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Matrix integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Matrix integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesMatrix"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/mattermost-slash-commands",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesMattermostSlashCommands",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The Mattermost token."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Mattermost Slash Commands integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Mattermost Slash Commands integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Mattermost Slash Commands integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesMattermostSlashCommands"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/slack-slash-commands",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesSlackSlashCommands",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The Slack token."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Slack Slash Commands integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Slack Slash Commands integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Slack Slash Commands integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesSlackSlashCommands"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/packagist",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesPackagist",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "username": {
                                "type": "string",
                                "description": "Username of a Packagist account."
                            },
                            "token": {
                                "type": "string",
                                "description": "API token of the Packagist server."
                            },
                            "server": {
                                "type": "string",
                                "description": "URL of the Packagist server. The default value is `https://packagist.org`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "username",
                            "token"
                        ],
                        "description": "Create/Edit Packagist integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Packagist integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Packagist integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesPackagist"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/phorge",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesPhorge",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url"
                        ],
                        "description": "Create/Edit Phorge integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Phorge integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Phorge integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesPhorge"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/pipelines-email",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesPipelinesEmail",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "recipients": {
                                "type": "string",
                                "description": "Comma-separated list of recipient email addresses."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "notify_only_default_branch": {
                                "type": "boolean",
                                "description": "Send notifications for the default branch."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "recipients"
                        ],
                        "description": "Create/Edit Pipelines Email integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Pipelines Email integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Pipelines Email integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesPipelinesEmail"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/pivotaltracker",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesPivotaltracker",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The Pivotal Tracker token."
                            },
                            "restrict_to_branch": {
                                "type": "string",
                                "description": "Comma-separated list of branches to automatically inspect. Leave blank to include all branches."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Pivotaltracker integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Pivotaltracker integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Pivotaltracker integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesPivotaltracker"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/pumble",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesPumble",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "The Pumble webhook (for example, `https://api.pumble.com/workspaces/x/...`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Pumble integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Pumble integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Pumble integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesPumble"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/pushover",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesPushover",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "api_key": {
                                "type": "string",
                                "description": "The application key."
                            },
                            "user_key": {
                                "type": "string",
                                "description": "The user key."
                            },
                            "device": {
                                "type": "string",
                                "description": "Leave blank for all active devices."
                            },
                            "priority": {
                                "type": "string",
                                "description": "The priority."
                            },
                            "sound": {
                                "type": "string",
                                "description": "The sound of the notification."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "api_key",
                            "user_key",
                            "priority"
                        ],
                        "description": "Create/Edit Pushover integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Pushover integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Pushover integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesPushover"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/redmine",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesRedmine",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "new_issue_url": {
                                "type": "string",
                                "description": "URL of the new issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url",
                            "new_issue_url"
                        ],
                        "description": "Create/Edit Redmine integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Redmine integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Redmine integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesRedmine"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/ewm",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesEwm",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "new_issue_url": {
                                "type": "string",
                                "description": "URL of the new issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url",
                            "new_issue_url"
                        ],
                        "description": "Create/Edit Ewm integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Ewm integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Ewm integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesEwm"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/youtrack",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesYoutrack",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url"
                        ],
                        "description": "Create/Edit Youtrack integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Youtrack integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Youtrack integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesYoutrack"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/clickup",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesClickup",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url"
                        ],
                        "description": "Create/Edit Clickup integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Clickup integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Clickup integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesClickup"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/slack",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesSlack",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "Slack notifications webhook (for example, `https://hooks.slack.com/services/...`)."
                            },
                            "username": {
                                "type": "string",
                                "description": "Slack notifications username."
                            },
                            "channel": {
                                "type": "string",
                                "description": "Default channel to use if no other channel is configured."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "labels_to_be_notified": {
                                "type": "string",
                                "description": "Labels to send notifications for. Leave blank to receive notifications for all events."
                            },
                            "labels_to_be_notified_behavior": {
                                "type": "string",
                                "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`."
                            },
                            "push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive push_events notifications"
                            },
                            "issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive issues_events notifications"
                            },
                            "incident_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive incident_events notifications"
                            },
                            "alert_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive alert_events notifications"
                            },
                            "confidential_issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_issues_events notifications"
                            },
                            "merge_request_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive merge_requests_events notifications"
                            },
                            "note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive note_events notifications"
                            },
                            "confidential_note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_note_events notifications"
                            },
                            "tag_push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive tag_push_events notifications"
                            },
                            "deployment_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive deployment_events notifications"
                            },
                            "pipeline_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive pipeline_events notifications"
                            },
                            "wiki_page_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive wiki_page_events notifications"
                            },
                            "vulnerability_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive vulnerability_events notifications"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "deployment_events": {
                                "type": "boolean",
                                "description": "Trigger event when a deployment starts or finishes."
                            },
                            "incident_events": {
                                "type": "boolean",
                                "description": "Trigger event when an incident is created."
                            },
                            "vulnerability_events": {
                                "type": "boolean"
                            },
                            "alert_events": {
                                "type": "boolean",
                                "description": "Trigger event when a new, unique alert is recorded."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Slack integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Slack integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Slack integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesSlack"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/microsoft-teams",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesMicrosoftTeams",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "The Microsoft Teams webhook (for example, `https://outlook.office.com/webhook/...`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Microsoft Teams integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Microsoft Teams integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Microsoft Teams integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesMicrosoftTeams"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/mattermost",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesMattermost",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "Mattermost notifications webhook (for example, `http://mattermost.example.com/hooks/...`)."
                            },
                            "username": {
                                "type": "string",
                                "description": "Mattermost notifications username."
                            },
                            "channel": {
                                "type": "string",
                                "description": "Default channel to use if no other channel is configured."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "labels_to_be_notified": {
                                "type": "string",
                                "description": "Labels to send notifications for. Leave blank to receive notifications for all events."
                            },
                            "labels_to_be_notified_behavior": {
                                "type": "string",
                                "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`."
                            },
                            "push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive push_events notifications"
                            },
                            "issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive issues_events notifications"
                            },
                            "incident_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive incident_events notifications"
                            },
                            "alert_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive alert_events notifications"
                            },
                            "confidential_issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_issues_events notifications"
                            },
                            "merge_request_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive merge_requests_events notifications"
                            },
                            "note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive note_events notifications"
                            },
                            "confidential_note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_note_events notifications"
                            },
                            "tag_push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive tag_push_events notifications"
                            },
                            "deployment_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive deployment_events notifications"
                            },
                            "pipeline_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive pipeline_events notifications"
                            },
                            "wiki_page_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive wiki_page_events notifications"
                            },
                            "vulnerability_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive vulnerability_events notifications"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "deployment_events": {
                                "type": "boolean",
                                "description": "Trigger event when a deployment starts or finishes."
                            },
                            "incident_events": {
                                "type": "boolean",
                                "description": "Trigger event when an incident is created."
                            },
                            "vulnerability_events": {
                                "type": "boolean"
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Mattermost integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Mattermost integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Mattermost integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesMattermost"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/teamcity",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesTeamcity",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Enable SSL verification. Defaults to `true` (enabled)."
                            },
                            "teamcity_url": {
                                "type": "string",
                                "description": "TeamCity root URL (for example, `https://teamcity.example.com`)."
                            },
                            "build_type": {
                                "type": "string",
                                "description": "The build configuration ID of the TeamCity project."
                            },
                            "username": {
                                "type": "string",
                                "description": "A user with permissions to trigger a manual build."
                            },
                            "password": {
                                "type": "string",
                                "description": "The password of the user."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "teamcity_url",
                            "build_type",
                            "username",
                            "password"
                        ],
                        "description": "Create/Edit Teamcity integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Teamcity integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Teamcity integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesTeamcity"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/telegram",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesTelegram",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "hostname": {
                                "type": "string",
                                "description": "Custom hostname of the Telegram API. The default value is `https://api.telegram.org`."
                            },
                            "token": {
                                "type": "string",
                                "description": "The Telegram bot token (for example, `123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11`)."
                            },
                            "room": {
                                "type": "string",
                                "description": "Unique identifier for the target chat or the username of the target channel (in the format `@channelusername`)."
                            },
                            "thread": {
                                "type": "string",
                                "description": "Unique identifier for the target message thread (topic in a forum supergroup)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "incident_events": {
                                "type": "boolean",
                                "description": "Trigger event when an incident is created."
                            },
                            "vulnerability_events": {
                                "type": "boolean"
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token",
                            "room"
                        ],
                        "description": "Create/Edit Telegram integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Telegram integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Telegram integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesTelegram"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/unify-circuit",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesUnifyCircuit",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "The Unify Circuit webhook (for example, `https://circuit.com/rest/v2/webhooks/incoming/...`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Unify Circuit integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Unify Circuit integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Unify Circuit integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesUnifyCircuit"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/webex-teams",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesWebexTeams",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "The Webex Teams webhook. For example, https://api.ciscospark.com/v1/webhooks/incoming/..."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Webex Teams integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Webex Teams integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Webex Teams integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesWebexTeams"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/zentao",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesZentao",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "Base URL of the ZenTao instance."
                            },
                            "api_url": {
                                "type": "string",
                                "description": "If different from Web URL."
                            },
                            "api_token": {
                                "type": "string"
                            },
                            "zentao_product_xid": {
                                "type": "string"
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "url",
                            "api_token",
                            "zentao_product_xid"
                        ],
                        "description": "Create/Edit Zentao integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Zentao integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Zentao integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesZentao"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/squash-tm",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesSquashTm",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "URL of the Squash TM webhook."
                            },
                            "token": {
                                "type": "string",
                                "description": "Secret token."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "url"
                        ],
                        "description": "Create/Edit Squash Tm integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Squash Tm integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Squash Tm integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesSquashTm"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/github",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesGithub",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "GitHub API token with `repo:status` OAuth scope."
                            },
                            "repository_url": {
                                "type": "string",
                                "description": "GitHub repository URL."
                            },
                            "static_context": {
                                "type": "boolean",
                                "description": "Append the hostname of your GitLab instance to the status check name."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token",
                            "repository_url"
                        ],
                        "description": "Create/Edit Github integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Github integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Github integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesGithub"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/git-guardian",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesGitGuardian",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "Personal access token to authenticate calls to the GitGuardian API."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Git Guardian integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Git Guardian integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Git Guardian integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesGitGuardian"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/google-cloud-platform-artifact-registry",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesGoogleCloudPlatformArtifactRegistry",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "artifact_registry_project_id": {
                                "type": "string",
                                "description": "ID of the Google Cloud project."
                            },
                            "artifact_registry_repositories": {
                                "type": "string",
                                "description": "Repository of Artifact Registry."
                            },
                            "artifact_registry_location": {
                                "type": "string",
                                "description": "Location of the Artifact Registry repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "artifact_registry_project_id",
                            "artifact_registry_repositories",
                            "artifact_registry_location"
                        ],
                        "description": "Create/Edit Google Cloud Platform Artifact Registry integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Google Cloud Platform Artifact Registry integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Google Cloud Platform Artifact Registry integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesGoogleCloudPlatformArtifactRegistry"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/google-cloud-platform-workload-identity-federation",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesGoogleCloudPlatformWorkloadIdentityFederation",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "workload_identity_federation_project_id": {
                                "type": "string",
                                "description": "Google Cloud project ID for the Workload Identity Federation."
                            },
                            "workload_identity_federation_project_number": {
                                "type": "string",
                                "description": "Google Cloud project number for the Workload Identity Federation."
                            },
                            "workload_identity_pool_id": {
                                "type": "string",
                                "description": "ID of the Workload Identity Pool."
                            },
                            "workload_identity_pool_provider_id": {
                                "type": "string",
                                "description": "ID of the Workload Identity Pool provider."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "workload_identity_federation_project_id",
                            "workload_identity_federation_project_number",
                            "workload_identity_pool_id",
                            "workload_identity_pool_provider_id"
                        ],
                        "description": "Create/Edit Google Cloud Platform Workload Identity Federation integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Google Cloud Platform Workload Identity Federation integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Google Cloud Platform Workload Identity Federation integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesGoogleCloudPlatformWorkloadIdentityFederation"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/mock-ci",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesMockCi",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Enable SSL verification. Defaults to `true` (enabled)."
                            },
                            "mock_service_url": {
                                "type": "string",
                                "description": "URL of the Mock CI integration."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "mock_service_url"
                        ],
                        "description": "Create/Edit Mock Ci integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Mock Ci integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Mock Ci integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesMockCi"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/mock-monitoring",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdServicesMockMonitoring",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "description": "Create/Edit Mock Monitoring integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Mock Monitoring integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Mock Monitoring integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdServicesMockMonitoring"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/{slug}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "slug",
                    "description": "The name of the integration",
                    "type": "string",
                    "enum": [
                        "apple-app-store",
                        "asana",
                        "assembla",
                        "bamboo",
                        "bugzilla",
                        "buildkite",
                        "campfire",
                        "confluence",
                        "custom-issue-tracker",
                        "datadog",
                        "diffblue-cover",
                        "discord",
                        "drone-ci",
                        "emails-on-push",
                        "external-wiki",
                        "gitlab-slack-application",
                        "google-play",
                        "hangouts-chat",
                        "harbor",
                        "irker",
                        "jenkins",
                        "jira",
                        "jira-cloud-app",
                        "matrix",
                        "mattermost-slash-commands",
                        "slack-slash-commands",
                        "packagist",
                        "phorge",
                        "pipelines-email",
                        "pivotaltracker",
                        "pumble",
                        "pushover",
                        "redmine",
                        "ewm",
                        "youtrack",
                        "clickup",
                        "slack",
                        "microsoft-teams",
                        "mattermost",
                        "teamcity",
                        "telegram",
                        "unify-circuit",
                        "webex-teams",
                        "zentao",
                        "squash-tm",
                        "github",
                        "git-guardian",
                        "google-cloud-platform-artifact-registry",
                        "google-cloud-platform-workload-identity-federation",
                        "mock-ci",
                        "mock-monitoring"
                    ],
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Disable an integration"
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Disable the integration. Integration settings are preserved.",
            "tags": [
                "integrations"
            ],
            "operationId": "deleteApiV4ProjectsIdServicesSlug"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/mattermost_slash_commands/trigger",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdServicesMattermostSlashCommandsTrigger",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The Mattermost token."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Trigger a slash command for mattermost-slash-commands"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Trigger a slash command for mattermost-slash-commands"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Added in GitLab 8.13",
            "tags": [
                "integrations"
            ],
            "operationId": "postApiV4ProjectsIdServicesMattermostSlashCommandsTrigger"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/services/slack_slash_commands/trigger",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdServicesSlackSlashCommandsTrigger",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The Slack token."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Trigger a slash command for slack-slash-commands"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Trigger a slash command for slack-slash-commands"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Added in GitLab 8.13",
            "tags": [
                "integrations"
            ],
            "operationId": "postApiV4ProjectsIdServicesSlackSlashCommandsTrigger"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/apple-app-store",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsAppleAppStore",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "app_store_issuer_id": {
                                "type": "string",
                                "description": "Apple App Store Connect issuer ID."
                            },
                            "app_store_key_id": {
                                "type": "string",
                                "description": "Apple App Store Connect key ID."
                            },
                            "app_store_private_key_file_name": {
                                "type": "string",
                                "description": "Apple App Store Connect private key file name."
                            },
                            "app_store_private_key": {
                                "type": "string",
                                "description": "Apple App Store Connect private key."
                            },
                            "app_store_protected_refs": {
                                "type": "boolean",
                                "description": "Set variables on protected branches and tags only."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "app_store_issuer_id",
                            "app_store_key_id",
                            "app_store_private_key_file_name",
                            "app_store_private_key"
                        ],
                        "description": "Create/Edit Apple App Store integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Apple App Store integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Apple App Store integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsAppleAppStore"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/asana",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsAsana",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "api_key": {
                                "type": "string",
                                "description": "User API token. The user must have access to the task. All comments are attributed to this user."
                            },
                            "restrict_to_branch": {
                                "type": "string",
                                "description": "Comma-separated list of branches to be automatically inspected. Leave blank to include all branches."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "api_key"
                        ],
                        "description": "Create/Edit Asana integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Asana integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Asana integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsAsana"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/assembla",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsAssembla",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The authentication token."
                            },
                            "subdomain": {
                                "type": "string",
                                "description": "The subdomain setting."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Assembla integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Assembla integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Assembla integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsAssembla"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/bamboo",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsBamboo",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Enable SSL verification. Defaults to `true` (enabled)."
                            },
                            "bamboo_url": {
                                "type": "string",
                                "description": "Bamboo root URL (for example, `https://bamboo.example.com`)."
                            },
                            "build_key": {
                                "type": "string",
                                "description": "Bamboo build plan key (for example, `KEY`)."
                            },
                            "username": {
                                "type": "string",
                                "description": "User with API access to the Bamboo server."
                            },
                            "password": {
                                "type": "string",
                                "description": "Password of the user."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "bamboo_url",
                            "build_key",
                            "username",
                            "password"
                        ],
                        "description": "Create/Edit Bamboo integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Bamboo integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Bamboo integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsBamboo"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/bugzilla",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsBugzilla",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "new_issue_url": {
                                "type": "string",
                                "description": "URL of the new issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url",
                            "new_issue_url"
                        ],
                        "description": "Create/Edit Bugzilla integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Bugzilla integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Bugzilla integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsBugzilla"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/buildkite",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsBuildkite",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "Pipeline URL (for example, `https://buildkite.com/example/pipeline`)."
                            },
                            "token": {
                                "type": "string",
                                "description": "Token you get after you create a Buildkite pipeline with a GitLab repository."
                            },
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "DEPRECATED: This parameter has no effect because SSL verification is always enabled."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "token"
                        ],
                        "description": "Create/Edit Buildkite integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Buildkite integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Buildkite integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsBuildkite"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/campfire",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsCampfire",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "API authentication token from Campfire. To get the token, sign in to Campfire and select **My info**."
                            },
                            "subdomain": {
                                "type": "string",
                                "description": "`.campfirenow.com` subdomain when you're signed in."
                            },
                            "room": {
                                "type": "string",
                                "description": "ID portion of the Campfire room URL."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Campfire integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Campfire integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Campfire integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsCampfire"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/confluence",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsConfluence",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "confluence_url": {
                                "type": "string",
                                "description": "URL of the Confluence Workspace hosted on `atlassian.net`."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "confluence_url"
                        ],
                        "description": "Create/Edit Confluence integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Confluence integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Confluence integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsConfluence"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/custom-issue-tracker",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsCustomIssueTracker",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "new_issue_url": {
                                "type": "string",
                                "description": "URL of the new issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url",
                            "new_issue_url"
                        ],
                        "description": "Create/Edit Custom Issue Tracker integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Custom Issue Tracker integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Custom Issue Tracker integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsCustomIssueTracker"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/datadog",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsDatadog",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "datadog_site": {
                                "type": "string",
                                "description": "Datadog site to send data to. Learn more about Datadog sites in the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.datadoghq.com/getting_started/site/\">documentation</a>."
                            },
                            "api_url": {
                                "type": "string",
                                "description": "Full URL of your Datadog site. Only required if you do not use a standard Datadog site."
                            },
                            "api_key": {
                                "type": "string",
                                "description": "<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.datadoghq.com/account_management/api-app-keys/\">API key</a> used for authentication with Datadog."
                            },
                            "datadog_ci_visibility": {
                                "type": "boolean",
                                "description": "Enable CI Visibility"
                            },
                            "archive_trace_events": {
                                "type": "boolean",
                                "description": "When enabled, job logs are collected by Datadog and displayed along with pipeline execution traces."
                            },
                            "datadog_service": {
                                "type": "string",
                                "description": "Tag all pipeline data from this GitLab instance in Datadog. Can be used when managing several self-managed deployments."
                            },
                            "datadog_env": {
                                "type": "string",
                                "description": "For self-managed deployments, `env` tag for all the data sent to Datadog."
                            },
                            "datadog_tags": {
                                "type": "string",
                                "description": "Custom tags in Datadog. Specify one tag per line in the format `key:value\\nkey2:value2`."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "build_events": {
                                "type": "boolean",
                                "description": "Trigger event when a build is created."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "subgroup_events": {
                                "type": "boolean"
                            },
                            "project_events": {
                                "type": "boolean"
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "api_key"
                        ],
                        "description": "Create/Edit Datadog integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Datadog integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Datadog integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsDatadog"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/diffblue-cover",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsDiffblueCover",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "diffblue_license_key": {
                                "type": "string",
                                "description": "Diffblue Cover license key."
                            },
                            "diffblue_access_token_name": {
                                "type": "string",
                                "description": "Access token name used by Diffblue Cover in pipelines."
                            },
                            "diffblue_access_token_secret": {
                                "type": "string",
                                "description": "Access token secret used by Diffblue Cover in pipelines."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "diffblue_license_key",
                            "diffblue_access_token_name",
                            "diffblue_access_token_secret"
                        ],
                        "description": "Create/Edit Diffblue Cover integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Diffblue Cover integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Diffblue Cover integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsDiffblueCover"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/discord",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsDiscord",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "Discord webhook (for example, `https://discord.com/api/webhooks/\u2026`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive push_events notifications"
                            },
                            "issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive issues_events notifications"
                            },
                            "incident_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive incident_events notifications"
                            },
                            "alert_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive alert_events notifications"
                            },
                            "confidential_issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_issues_events notifications"
                            },
                            "merge_request_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive merge_requests_events notifications"
                            },
                            "note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive note_events notifications"
                            },
                            "confidential_note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_note_events notifications"
                            },
                            "tag_push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive tag_push_events notifications"
                            },
                            "deployment_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive deployment_events notifications"
                            },
                            "pipeline_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive pipeline_events notifications"
                            },
                            "wiki_page_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive wiki_page_events notifications"
                            },
                            "vulnerability_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive vulnerability_events notifications"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "deployment_events": {
                                "type": "boolean",
                                "description": "Trigger event when a deployment starts or finishes."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Discord integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Discord integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Discord integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsDiscord"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/drone-ci",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsDroneCi",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Enable SSL verification. Defaults to `true` (enabled)."
                            },
                            "drone_url": {
                                "type": "string",
                                "description": "Drone CI URL (for example, `http://drone.example.com`)."
                            },
                            "token": {
                                "type": "string",
                                "description": "Drone CI token."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "drone_url",
                            "token"
                        ],
                        "description": "Create/Edit Drone Ci integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Drone Ci integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Drone Ci integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsDroneCi"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/emails-on-push",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsEmailsOnPush",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "send_from_committer_email": {
                                "type": "boolean",
                                "description": "Send from committer"
                            },
                            "disable_diffs": {
                                "type": "boolean",
                                "description": "Disable code diffs"
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "recipients": {
                                "type": "string",
                                "description": "Emails separated by whitespace."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "recipients"
                        ],
                        "description": "Create/Edit Emails On Push integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Emails On Push integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Emails On Push integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsEmailsOnPush"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/external-wiki",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsExternalWiki",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "external_wiki_url": {
                                "type": "string",
                                "description": "URL of the external wiki."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "external_wiki_url"
                        ],
                        "description": "Create/Edit External Wiki integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit External Wiki integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set External Wiki integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsExternalWiki"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/gitlab-slack-application",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsGitlabSlackApplication",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "channel": {
                                "type": "string",
                                "description": "Default channel to use if no other channel is configured."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "labels_to_be_notified": {
                                "type": "string",
                                "description": "Labels to send notifications for. Leave blank to receive notifications for all events."
                            },
                            "labels_to_be_notified_behavior": {
                                "type": "string",
                                "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`."
                            },
                            "push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive push_events notifications"
                            },
                            "issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive issues_events notifications"
                            },
                            "incident_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive incident_events notifications"
                            },
                            "alert_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive alert_events notifications"
                            },
                            "confidential_issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_issues_events notifications"
                            },
                            "merge_request_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive merge_requests_events notifications"
                            },
                            "note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive note_events notifications"
                            },
                            "confidential_note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_note_events notifications"
                            },
                            "tag_push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive tag_push_events notifications"
                            },
                            "deployment_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive deployment_events notifications"
                            },
                            "pipeline_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive pipeline_events notifications"
                            },
                            "wiki_page_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive wiki_page_events notifications"
                            },
                            "vulnerability_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive vulnerability_events notifications"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "deployment_events": {
                                "type": "boolean",
                                "description": "Trigger event when a deployment starts or finishes."
                            },
                            "incident_events": {
                                "type": "boolean",
                                "description": "Trigger event when an incident is created."
                            },
                            "vulnerability_events": {
                                "type": "boolean"
                            },
                            "alert_events": {
                                "type": "boolean",
                                "description": "Trigger event when a new, unique alert is recorded."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "description": "Create/Edit Gitlab Slack Application integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Gitlab Slack Application integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Gitlab Slack Application integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsGitlabSlackApplication"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/google-play",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsGooglePlay",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "package_name": {
                                "type": "string",
                                "description": "Package name of the app in Google Play."
                            },
                            "service_account_key_file_name": {
                                "type": "string",
                                "description": "File name of the Google Play service account key."
                            },
                            "service_account_key": {
                                "type": "string",
                                "description": "Google Play service account key."
                            },
                            "google_play_protected_refs": {
                                "type": "boolean",
                                "description": "Set variables on protected branches and tags only."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "package_name",
                            "service_account_key_file_name",
                            "service_account_key"
                        ],
                        "description": "Create/Edit Google Play integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Google Play integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Google Play integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsGooglePlay"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/hangouts-chat",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsHangoutsChat",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "The Hangouts Chat webhook (for example, `https://chat.googleapis.com/v1/spaces...`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Hangouts Chat integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Hangouts Chat integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Hangouts Chat integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsHangoutsChat"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/harbor",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsHarbor",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "The base URL to the Harbor instance linked to the GitLab project. For example, `https://demo.goharbor.io`."
                            },
                            "project_name": {
                                "type": "string",
                                "description": "The name of the project in the Harbor instance. For example, `testproject`."
                            },
                            "username": {
                                "type": "string",
                                "description": "The username created in the Harbor interface."
                            },
                            "password": {
                                "type": "string",
                                "description": "The password of the user."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "url",
                            "project_name",
                            "username",
                            "password"
                        ],
                        "description": "Create/Edit Harbor integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Harbor integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Harbor integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsHarbor"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/irker",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsIrker",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "server_host": {
                                "type": "string",
                                "description": "irker daemon hostname. The default value is `localhost`."
                            },
                            "server_port": {
                                "type": "integer",
                                "format": "int32",
                                "description": "irker daemon port. The default value is `6659`."
                            },
                            "default_irc_uri": {
                                "type": "string",
                                "description": "URI to add before each recipient. The default value is `irc://irc.network.net:6697/`."
                            },
                            "recipients": {
                                "type": "string",
                                "description": "Comma-separated list of channels or email addresses."
                            },
                            "colorize_messages": {
                                "type": "boolean",
                                "description": "Colorize messages"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "recipients"
                        ],
                        "description": "Create/Edit Irker integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Irker integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Irker integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsIrker"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/jenkins",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsJenkins",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Enable SSL verification. Defaults to `true` (enabled)."
                            },
                            "jenkins_url": {
                                "type": "string",
                                "description": "URL of the Jenkins server."
                            },
                            "project_name": {
                                "type": "string",
                                "description": "Name of the Jenkins project."
                            },
                            "username": {
                                "type": "string",
                                "description": "Username of the Jenkins server."
                            },
                            "password": {
                                "type": "string",
                                "description": "Password of the Jenkins server."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "jenkins_url",
                            "project_name"
                        ],
                        "description": "Create/Edit Jenkins integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Jenkins integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Jenkins integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsJenkins"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/jira",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsJira",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "The URL to the Jira project which is being linked to this GitLab project (for example, `https://jira.example.com`)."
                            },
                            "api_url": {
                                "type": "string",
                                "description": "The base URL to the Jira instance API. Web URL value is used if not set (for example, `https://jira-api.example.com`)."
                            },
                            "jira_auth_type": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The authentication method to use with Jira. Use `0` for Basic Authentication, and `1` for Jira personal access token. Defaults to `0`."
                            },
                            "username": {
                                "type": "string",
                                "description": "The email or username to use with Jira. Use an email for Jira Cloud, and a username for Jira Data Center and Jira Server. Required when using Basic Authentication (`jira_auth_type` is `0`)."
                            },
                            "password": {
                                "type": "string",
                                "description": "The Jira API token, password, or personal access token to use with Jira. When using Basic Authentication (`jira_auth_type` is `0`), use an API token for Jira Cloud, and a password for Jira Data Center or Jira Server. For a Jira personal access token (`jira_auth_type` is `1`), use the personal access token."
                            },
                            "jira_issue_regex": {
                                "type": "string",
                                "description": "Regular expression to match Jira issue keys."
                            },
                            "jira_issue_prefix": {
                                "type": "string",
                                "description": "Prefix to match Jira issue keys."
                            },
                            "jira_issue_transition_id": {
                                "type": "string",
                                "description": "The ID of one or more transitions for [custom issue transitions](../integration/jira/issues.md#custom-issue-transitions).Ignored when `jira_issue_transition_automatic` is enabled. Defaults to a blank string,which disables custom transitions."
                            },
                            "issues_enabled": {
                                "type": "string",
                                "description": "Enable viewing Jira issues in GitLab."
                            },
                            "project_keys": {
                                "type": "array",
                                "description": "Keys of Jira projects. When `issues_enabled` is `true`, this setting specifies which Jira projects to view issues from in GitLab.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "commit_events": {
                                "type": "boolean",
                                "description": "Trigger event when a commit is created or updated."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "url",
                            "password"
                        ],
                        "description": "Create/Edit Jira integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Jira integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Jira integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsJira"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/jira-cloud-app",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsJiraCloudApp",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "jira_cloud_app_service_ids": {
                                "type": "string",
                                "description": "Copy and paste your JSM Service ID here. Use comma (,) to separate multiple IDs."
                            },
                            "jira_cloud_app_enable_deployment_gating": {
                                "type": "boolean",
                                "description": "Enable to approve or reject blocked GitLab deployments from Jira Service Management."
                            },
                            "jira_cloud_app_deployment_gating_environments": {
                                "type": "string",
                                "description": "Enter the environment (production,staging,testing,development) where you want to enable deployment gating. Use comma (,) to separate multiple environments."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "description": "Create/Edit Jira Cloud App integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Jira Cloud App integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Jira Cloud App integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsJiraCloudApp"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/matrix",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsMatrix",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "hostname": {
                                "type": "string",
                                "description": "Custom hostname of the Matrix server. The default value is `https://matrix-client.matrix.org`."
                            },
                            "token": {
                                "type": "string",
                                "description": "The Matrix access token (for example, `syt-zyx57W2v1u123ew11`)."
                            },
                            "room": {
                                "type": "string",
                                "description": "Unique identifier for the target room (in the format `!qPKKM111FFKKsfoCVy:matrix.org`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "incident_events": {
                                "type": "boolean",
                                "description": "Trigger event when an incident is created."
                            },
                            "vulnerability_events": {
                                "type": "boolean"
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token",
                            "room"
                        ],
                        "description": "Create/Edit Matrix integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Matrix integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Matrix integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsMatrix"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/mattermost-slash-commands",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsMattermostSlashCommands",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The Mattermost token."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Mattermost Slash Commands integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Mattermost Slash Commands integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Mattermost Slash Commands integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsMattermostSlashCommands"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/slack-slash-commands",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsSlackSlashCommands",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The Slack token."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Slack Slash Commands integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Slack Slash Commands integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Slack Slash Commands integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsSlackSlashCommands"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/packagist",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsPackagist",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "username": {
                                "type": "string",
                                "description": "Username of a Packagist account."
                            },
                            "token": {
                                "type": "string",
                                "description": "API token of the Packagist server."
                            },
                            "server": {
                                "type": "string",
                                "description": "URL of the Packagist server. The default value is `https://packagist.org`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "username",
                            "token"
                        ],
                        "description": "Create/Edit Packagist integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Packagist integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Packagist integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsPackagist"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/phorge",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsPhorge",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url"
                        ],
                        "description": "Create/Edit Phorge integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Phorge integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Phorge integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsPhorge"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/pipelines-email",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsPipelinesEmail",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "recipients": {
                                "type": "string",
                                "description": "Comma-separated list of recipient email addresses."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "notify_only_default_branch": {
                                "type": "boolean",
                                "description": "Send notifications for the default branch."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "recipients"
                        ],
                        "description": "Create/Edit Pipelines Email integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Pipelines Email integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Pipelines Email integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsPipelinesEmail"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/pivotaltracker",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsPivotaltracker",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The Pivotal Tracker token."
                            },
                            "restrict_to_branch": {
                                "type": "string",
                                "description": "Comma-separated list of branches to automatically inspect. Leave blank to include all branches."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Pivotaltracker integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Pivotaltracker integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Pivotaltracker integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsPivotaltracker"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/pumble",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsPumble",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "The Pumble webhook (for example, `https://api.pumble.com/workspaces/x/...`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Pumble integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Pumble integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Pumble integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsPumble"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/pushover",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsPushover",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "api_key": {
                                "type": "string",
                                "description": "The application key."
                            },
                            "user_key": {
                                "type": "string",
                                "description": "The user key."
                            },
                            "device": {
                                "type": "string",
                                "description": "Leave blank for all active devices."
                            },
                            "priority": {
                                "type": "string",
                                "description": "The priority."
                            },
                            "sound": {
                                "type": "string",
                                "description": "The sound of the notification."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "api_key",
                            "user_key",
                            "priority"
                        ],
                        "description": "Create/Edit Pushover integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Pushover integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Pushover integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsPushover"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/redmine",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsRedmine",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "new_issue_url": {
                                "type": "string",
                                "description": "URL of the new issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url",
                            "new_issue_url"
                        ],
                        "description": "Create/Edit Redmine integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Redmine integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Redmine integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsRedmine"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/ewm",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsEwm",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "new_issue_url": {
                                "type": "string",
                                "description": "URL of the new issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url",
                            "new_issue_url"
                        ],
                        "description": "Create/Edit Ewm integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Ewm integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Ewm integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsEwm"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/youtrack",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsYoutrack",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url"
                        ],
                        "description": "Create/Edit Youtrack integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Youtrack integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Youtrack integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsYoutrack"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/clickup",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsClickup",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_url": {
                                "type": "string",
                                "description": "URL of the project."
                            },
                            "issues_url": {
                                "type": "string",
                                "description": "URL of the issue."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "project_url",
                            "issues_url"
                        ],
                        "description": "Create/Edit Clickup integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Clickup integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Clickup integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsClickup"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/slack",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsSlack",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "Slack notifications webhook (for example, `https://hooks.slack.com/services/...`)."
                            },
                            "username": {
                                "type": "string",
                                "description": "Slack notifications username."
                            },
                            "channel": {
                                "type": "string",
                                "description": "Default channel to use if no other channel is configured."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "labels_to_be_notified": {
                                "type": "string",
                                "description": "Labels to send notifications for. Leave blank to receive notifications for all events."
                            },
                            "labels_to_be_notified_behavior": {
                                "type": "string",
                                "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`."
                            },
                            "push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive push_events notifications"
                            },
                            "issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive issues_events notifications"
                            },
                            "incident_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive incident_events notifications"
                            },
                            "alert_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive alert_events notifications"
                            },
                            "confidential_issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_issues_events notifications"
                            },
                            "merge_request_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive merge_requests_events notifications"
                            },
                            "note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive note_events notifications"
                            },
                            "confidential_note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_note_events notifications"
                            },
                            "tag_push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive tag_push_events notifications"
                            },
                            "deployment_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive deployment_events notifications"
                            },
                            "pipeline_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive pipeline_events notifications"
                            },
                            "wiki_page_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive wiki_page_events notifications"
                            },
                            "vulnerability_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive vulnerability_events notifications"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "deployment_events": {
                                "type": "boolean",
                                "description": "Trigger event when a deployment starts or finishes."
                            },
                            "incident_events": {
                                "type": "boolean",
                                "description": "Trigger event when an incident is created."
                            },
                            "vulnerability_events": {
                                "type": "boolean"
                            },
                            "alert_events": {
                                "type": "boolean",
                                "description": "Trigger event when a new, unique alert is recorded."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Slack integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Slack integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Slack integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsSlack"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/microsoft-teams",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsMicrosoftTeams",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "The Microsoft Teams webhook (for example, `https://outlook.office.com/webhook/...`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Microsoft Teams integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Microsoft Teams integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Microsoft Teams integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsMicrosoftTeams"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/mattermost",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsMattermost",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "Mattermost notifications webhook (for example, `http://mattermost.example.com/hooks/...`)."
                            },
                            "username": {
                                "type": "string",
                                "description": "Mattermost notifications username."
                            },
                            "channel": {
                                "type": "string",
                                "description": "Default channel to use if no other channel is configured."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "labels_to_be_notified": {
                                "type": "string",
                                "description": "Labels to send notifications for. Leave blank to receive notifications for all events."
                            },
                            "labels_to_be_notified_behavior": {
                                "type": "string",
                                "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`."
                            },
                            "push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive push_events notifications"
                            },
                            "issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive issues_events notifications"
                            },
                            "incident_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive incident_events notifications"
                            },
                            "alert_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive alert_events notifications"
                            },
                            "confidential_issue_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_issues_events notifications"
                            },
                            "merge_request_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive merge_requests_events notifications"
                            },
                            "note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive note_events notifications"
                            },
                            "confidential_note_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive confidential_note_events notifications"
                            },
                            "tag_push_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive tag_push_events notifications"
                            },
                            "deployment_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive deployment_events notifications"
                            },
                            "pipeline_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive pipeline_events notifications"
                            },
                            "wiki_page_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive wiki_page_events notifications"
                            },
                            "vulnerability_channel": {
                                "type": "string",
                                "description": "The name of the channel to receive vulnerability_events notifications"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "deployment_events": {
                                "type": "boolean",
                                "description": "Trigger event when a deployment starts or finishes."
                            },
                            "incident_events": {
                                "type": "boolean",
                                "description": "Trigger event when an incident is created."
                            },
                            "vulnerability_events": {
                                "type": "boolean"
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Mattermost integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Mattermost integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Mattermost integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsMattermost"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/teamcity",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsTeamcity",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Enable SSL verification. Defaults to `true` (enabled)."
                            },
                            "teamcity_url": {
                                "type": "string",
                                "description": "TeamCity root URL (for example, `https://teamcity.example.com`)."
                            },
                            "build_type": {
                                "type": "string",
                                "description": "The build configuration ID of the TeamCity project."
                            },
                            "username": {
                                "type": "string",
                                "description": "A user with permissions to trigger a manual build."
                            },
                            "password": {
                                "type": "string",
                                "description": "The password of the user."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "teamcity_url",
                            "build_type",
                            "username",
                            "password"
                        ],
                        "description": "Create/Edit Teamcity integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Teamcity integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Teamcity integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsTeamcity"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/telegram",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsTelegram",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "hostname": {
                                "type": "string",
                                "description": "Custom hostname of the Telegram API. The default value is `https://api.telegram.org`."
                            },
                            "token": {
                                "type": "string",
                                "description": "The Telegram bot token (for example, `123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11`)."
                            },
                            "room": {
                                "type": "string",
                                "description": "Unique identifier for the target chat or the username of the target channel (in the format `@channelusername`)."
                            },
                            "thread": {
                                "type": "string",
                                "description": "Unique identifier for the target message thread (topic in a forum supergroup)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "incident_events": {
                                "type": "boolean",
                                "description": "Trigger event when an incident is created."
                            },
                            "vulnerability_events": {
                                "type": "boolean"
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token",
                            "room"
                        ],
                        "description": "Create/Edit Telegram integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Telegram integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Telegram integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsTelegram"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/unify-circuit",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsUnifyCircuit",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "The Unify Circuit webhook (for example, `https://circuit.com/rest/v2/webhooks/incoming/...`)."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Unify Circuit integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Unify Circuit integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Unify Circuit integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsUnifyCircuit"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/webex-teams",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsWebexTeams",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "webhook": {
                                "type": "string",
                                "description": "The Webex Teams webhook. For example, https://api.ciscospark.com/v1/webhooks/incoming/..."
                            },
                            "notify_only_broken_pipelines": {
                                "type": "boolean",
                                "description": "Send notifications for broken pipelines."
                            },
                            "branches_to_be_notified": {
                                "type": "string",
                                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger event when a merge request is created, updated, or merged."
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments."
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger event for new comments on confidential issues."
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger event for new tags pushed to the repository."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger event when a wiki page is created or updated."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "webhook"
                        ],
                        "description": "Create/Edit Webex Teams integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Webex Teams integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Webex Teams integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsWebexTeams"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/zentao",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsZentao",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "Base URL of the ZenTao instance."
                            },
                            "api_url": {
                                "type": "string",
                                "description": "If different from Web URL."
                            },
                            "api_token": {
                                "type": "string"
                            },
                            "zentao_product_xid": {
                                "type": "string"
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "url",
                            "api_token",
                            "zentao_product_xid"
                        ],
                        "description": "Create/Edit Zentao integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Zentao integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Zentao integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsZentao"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/squash-tm",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsSquashTm",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "URL of the Squash TM webhook."
                            },
                            "token": {
                                "type": "string",
                                "description": "Secret token."
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when an issue is created, updated, or closed."
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger event when a confidential issue is created, updated, or closed."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "url"
                        ],
                        "description": "Create/Edit Squash Tm integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Squash Tm integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Squash Tm integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsSquashTm"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/github",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsGithub",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "GitHub API token with `repo:status` OAuth scope."
                            },
                            "repository_url": {
                                "type": "string",
                                "description": "GitHub repository URL."
                            },
                            "static_context": {
                                "type": "boolean",
                                "description": "Append the hostname of your GitLab instance to the status check name."
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger event when a pipeline status changes."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token",
                            "repository_url"
                        ],
                        "description": "Create/Edit Github integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Github integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Github integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsGithub"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/git-guardian",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsGitGuardian",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "Personal access token to authenticate calls to the GitGuardian API."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Create/Edit Git Guardian integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Git Guardian integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Git Guardian integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsGitGuardian"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/google-cloud-platform-artifact-registry",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsGoogleCloudPlatformArtifactRegistry",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "artifact_registry_project_id": {
                                "type": "string",
                                "description": "ID of the Google Cloud project."
                            },
                            "artifact_registry_repositories": {
                                "type": "string",
                                "description": "Repository of Artifact Registry."
                            },
                            "artifact_registry_location": {
                                "type": "string",
                                "description": "Location of the Artifact Registry repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "artifact_registry_project_id",
                            "artifact_registry_repositories",
                            "artifact_registry_location"
                        ],
                        "description": "Create/Edit Google Cloud Platform Artifact Registry integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Google Cloud Platform Artifact Registry integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Google Cloud Platform Artifact Registry integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsGoogleCloudPlatformArtifactRegistry"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/google-cloud-platform-workload-identity-federation",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederation",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "workload_identity_federation_project_id": {
                                "type": "string",
                                "description": "Google Cloud project ID for the Workload Identity Federation."
                            },
                            "workload_identity_federation_project_number": {
                                "type": "string",
                                "description": "Google Cloud project number for the Workload Identity Federation."
                            },
                            "workload_identity_pool_id": {
                                "type": "string",
                                "description": "ID of the Workload Identity Pool."
                            },
                            "workload_identity_pool_provider_id": {
                                "type": "string",
                                "description": "ID of the Workload Identity Pool provider."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "workload_identity_federation_project_id",
                            "workload_identity_federation_project_number",
                            "workload_identity_pool_id",
                            "workload_identity_pool_provider_id"
                        ],
                        "description": "Create/Edit Google Cloud Platform Workload Identity Federation integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Google Cloud Platform Workload Identity Federation integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Google Cloud Platform Workload Identity Federation integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederation"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/mock-ci",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsMockCi",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Enable SSL verification. Defaults to `true` (enabled)."
                            },
                            "mock_service_url": {
                                "type": "string",
                                "description": "URL of the Mock CI integration."
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger event for pushes to the repository."
                            },
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "required": [
                            "mock_service_url"
                        ],
                        "description": "Create/Edit Mock Ci integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Mock Ci integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Mock Ci integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsMockCi"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/mock-monitoring",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdIntegrationsMockMonitoring",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "use_inherited_settings": {
                                "type": "boolean",
                                "description": "Indicates whether to inherit the default settings. Defaults to `false`."
                            }
                        },
                        "description": "Create/Edit Mock Monitoring integration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create/Edit Mock Monitoring integration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IntegrationBasic"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Set Mock Monitoring integration.",
            "tags": [
                "integrations"
            ],
            "operationId": "putApiV4ProjectsIdIntegrationsMockMonitoring"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/{slug}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "slug",
                    "description": "The name of the integration",
                    "type": "string",
                    "enum": [
                        "apple-app-store",
                        "asana",
                        "assembla",
                        "bamboo",
                        "bugzilla",
                        "buildkite",
                        "campfire",
                        "confluence",
                        "custom-issue-tracker",
                        "datadog",
                        "diffblue-cover",
                        "discord",
                        "drone-ci",
                        "emails-on-push",
                        "external-wiki",
                        "gitlab-slack-application",
                        "google-play",
                        "hangouts-chat",
                        "harbor",
                        "irker",
                        "jenkins",
                        "jira",
                        "jira-cloud-app",
                        "matrix",
                        "mattermost-slash-commands",
                        "slack-slash-commands",
                        "packagist",
                        "phorge",
                        "pipelines-email",
                        "pivotaltracker",
                        "pumble",
                        "pushover",
                        "redmine",
                        "ewm",
                        "youtrack",
                        "clickup",
                        "slack",
                        "microsoft-teams",
                        "mattermost",
                        "teamcity",
                        "telegram",
                        "unify-circuit",
                        "webex-teams",
                        "zentao",
                        "squash-tm",
                        "github",
                        "git-guardian",
                        "google-cloud-platform-artifact-registry",
                        "google-cloud-platform-workload-identity-federation",
                        "mock-ci",
                        "mock-monitoring"
                    ],
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Disable an integration"
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Disable the integration. Integration settings are preserved.",
            "tags": [
                "integrations"
            ],
            "operationId": "deleteApiV4ProjectsIdIntegrationsSlug"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/mattermost_slash_commands/trigger",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdIntegrationsMattermostSlashCommandsTrigger",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The Mattermost token."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Trigger a slash command for mattermost-slash-commands"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Trigger a slash command for mattermost-slash-commands"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Added in GitLab 8.13",
            "tags": [
                "integrations"
            ],
            "operationId": "postApiV4ProjectsIdIntegrationsMattermostSlashCommandsTrigger"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/integrations/slack_slash_commands/trigger",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdIntegrationsSlackSlashCommandsTrigger",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The Slack token."
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Trigger a slash command for slack-slash-commands"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Trigger a slash command for slack-slash-commands"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Added in GitLab 8.13",
            "tags": [
                "integrations"
            ],
            "operationId": "postApiV4ProjectsIdIntegrationsSlackSlashCommandsTrigger"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/invitations",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdInvitations",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "access_level": {
                                "type": "integer",
                                "format": "int32",
                                "description": "A valid access level (defaults: `30`, developer access level)",
                                "enum": [
                                    10,
                                    15,
                                    20,
                                    30,
                                    40,
                                    50,
                                    5
                                ]
                            },
                            "email": {
                                "type": "array",
                                "description": "The email address to invite, or multiple emails separated by comma",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "user_id": {
                                "type": "array",
                                "description": "The user ID of the new member or multiple IDs separated by commas.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date string in the format YEAR-MONTH-DAY"
                            },
                            "invite_source": {
                                "type": "string",
                                "description": "Source that triggered the member creation process",
                                "default": "invitations-api"
                            },
                            "member_role_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of a member role for the invited user"
                            }
                        },
                        "required": [
                            "access_level"
                        ],
                        "description": "Invite non-members by email address to a group or project."
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Invite non-members by email address to a group or project.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Invitation"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.6",
            "tags": [
                "invitations"
            ],
            "operationId": "postApiV4ProjectsIdInvitations"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/invitations/{email}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "email",
                    "description": "The email address of the invitation",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdInvitationsEmail",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "access_level": {
                                "type": "integer",
                                "format": "int32",
                                "description": "A valid access level (defaults: `30`, developer access level)",
                                "enum": [
                                    10,
                                    15,
                                    20,
                                    30,
                                    40,
                                    50
                                ]
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date string in ISO 8601 format (`YYYY-MM-DDTHH:MM:SSZ`)"
                            },
                            "member_role_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of a member role for the invited user"
                            }
                        },
                        "description": "Updates a group or project invitation."
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Updates a group or project invitation.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Invitation"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Updates a group or project invitation.",
            "tags": [
                "invitations"
            ],
            "operationId": "putApiV4ProjectsIdInvitationsEmail"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/invitations/{email}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "email",
                    "description": "The email address of the invitation",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Removes an invitation from a group or project."
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "409": {
                    "description": "Could not delete invitation"
                }
            },
            "request_body_parameters": {},
            "description": "Removes an invitation from a group or project.",
            "tags": [
                "invitations"
            ],
            "operationId": "deleteApiV4ProjectsIdInvitationsEmail"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/issues/{issue_iid}/links",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "issue_iid",
                    "description": "The internal ID of a project\u2019s issue",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdIssuesIssueIidLinks",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "target_project_id": {
                                "type": "string",
                                "description": "The ID or URL-encoded path of a target project"
                            },
                            "target_issue_iid": {
                                "type": "string",
                                "description": "The internal ID of a target project\u2019s issue"
                            },
                            "link_type": {
                                "type": "string",
                                "description": "The type of the relation (\u201crelates_to\u201d, \u201cblocks\u201d, \u201cis_blocked_by\u201d),defaults to \u201crelates_to\u201d)",
                                "enum": [
                                    "relates_to",
                                    "blocks",
                                    "is_blocked_by"
                                ]
                            }
                        },
                        "required": [
                            "target_project_id",
                            "target_issue_iid"
                        ],
                        "description": "Create an issue link"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create an issue link",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IssueLink"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Creates a two-way relation between two issues.The user must be allowed to update both issues to succeed.",
            "tags": [
                "issue_links"
            ],
            "operationId": "postApiV4ProjectsIdIssuesIssueIidLinks"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/issues/{issue_iid}/links/{issue_link_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "issue_iid",
                    "description": "The internal ID of a project\u2019s issue",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "issue_link_id",
                    "description": "The ID of an issue relationship",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "401": {
                    "description": "Unauthorized"
                },
                "204": {
                    "description": "Delete an issue link",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IssueLink"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Deletes an issue link, thus removes the two-way relationship.",
            "tags": [
                "issue_links"
            ],
            "operationId": "deleteApiV4ProjectsIdIssuesIssueIidLinksIssueLinkId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/ci/lint",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdCiLint",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "string",
                                "description": "Content of .gitlab-ci.yml"
                            },
                            "dry_run": {
                                "type": "boolean",
                                "description": "Run pipeline creation simulation, or only do static check. This is false by default",
                                "default": false
                            },
                            "include_jobs": {
                                "type": "boolean",
                                "description": "If the list of jobs that would exist in a static check or pipeline\n        simulation should be included in the response. This is false by default"
                            },
                            "ref": {
                                "type": "string",
                                "description": "When dry_run is true, sets the branch or tag to use. Defaults to the project\u2019s default branch when not set"
                            }
                        },
                        "required": [
                            "content"
                        ],
                        "description": "Validate a CI YAML configuration with a namespace"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Validate a CI YAML configuration with a namespace",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Lint_Result"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Checks if CI/CD YAML configuration is valid. This endpoint has namespace specific context",
            "tags": [
                "ci_lint"
            ],
            "operationId": "postApiV4ProjectsIdCiLint"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/uploads/authorize",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Workhorse authorize the file upload"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.11",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdUploadsAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/uploads",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdUploads",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "file": {
                                "type": "file",
                                "description": "The attachment file to be uploaded"
                            }
                        },
                        "required": [
                            "file"
                        ],
                        "description": "Upload a file"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Upload a file",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectUpload"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Upload a file",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdUploads"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/uploads/{upload_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "upload_id",
                    "description": "The ID of a project upload",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a single project upload by ID"
                },
                "400": {
                    "description": "Bad request"
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a single project upload by ID",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdUploadsUploadId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/uploads/{secret}/{filename}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "secret",
                    "description": "The 32-character secret of a project upload",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "filename",
                    "description": "The filename of a project upload",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a single project upload by secret and filename"
                },
                "400": {
                    "description": "Bad request"
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a single project upload by secret and filename",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdUploadsSecretFilename"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/maven/*path/{file_name}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "required": true,
                    "example": "mypkg-1.0-SNAPSHOT.pom"
                },
                {
                    "name": "putApiV4ProjectsIdPackagesMaven*pathFileName",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string",
                                "description": "Package path",
                                "example": "foo/bar/mypkg/1.0-SNAPSHOT"
                            },
                            "file": {
                                "type": "file",
                                "description": "The package file to be published (generated by Multipart middleware)"
                            }
                        },
                        "required": [
                            "path",
                            "file"
                        ],
                        "description": "Upload the maven package file"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Upload the maven package file"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                },
                "422": {
                    "description": "Unprocessable Entity"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.3",
            "tags": [
                "maven_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesMaven*pathFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/maven/*path/{file_name}/authorize",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "required": true,
                    "example": "mypkg-1.0-SNAPSHOT.pom"
                },
                {
                    "name": "putApiV4ProjectsIdPackagesMaven*pathFileNameAuthorize",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string",
                                "description": "Package path",
                                "example": "foo/bar/mypkg/1.0-SNAPSHOT"
                            }
                        },
                        "required": [
                            "path"
                        ],
                        "description": "Workhorse authorize the maven package file upload"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Workhorse authorize the maven package file upload"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.3",
            "tags": [
                "maven_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesMaven*pathFileNameAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/members",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdMembers",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "access_level": {
                                "type": "integer",
                                "format": "int32",
                                "description": "A valid access level."
                            },
                            "user_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The user ID of the new member or multiple IDs separated by commas."
                            },
                            "username": {
                                "type": "string",
                                "description": "The username of the new member or multiple usernames separated by commas."
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date string in the format YEAR-MONTH-DAY"
                            },
                            "invite_source": {
                                "type": "string",
                                "description": "Source that triggered the member creation process",
                                "default": "members-api"
                            }
                        },
                        "required": [
                            "access_level"
                        ],
                        "description": "Adds a member to a group or project."
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Adds a member to a group or project.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Member"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Adds a member to a group or project.",
            "tags": [
                "members"
            ],
            "operationId": "postApiV4ProjectsIdMembers"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/members/{user_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the new member",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdMembersUserId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "access_level": {
                                "type": "integer",
                                "format": "int32",
                                "description": "A valid access level"
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date string in the format YEAR-MONTH-DAY"
                            },
                            "member_role_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the Member Role to be updated"
                            }
                        },
                        "required": [
                            "access_level"
                        ],
                        "description": "Updates a member of a group or project."
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Updates a member of a group or project.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Member"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Updates a member of a group or project.",
            "tags": [
                "members"
            ],
            "operationId": "putApiV4ProjectsIdMembersUserId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/members/{user_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The user ID of the member",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "skip_subresources",
                    "description": "Flag indicating if the deletion of direct memberships of the removed member in subgroups and projects should be skipped",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "query",
                    "name": "unassign_issuables",
                    "description": "Flag indicating if the removed member should be unassigned from any issues or merge requests within given group or project",
                    "type": "boolean",
                    "default": false,
                    "required": false
                }
            ],
            "responses": {
                "204": {
                    "description": "Removes a user from a group or project."
                }
            },
            "request_body_parameters": {},
            "description": "Removes a user from a group or project.",
            "tags": [
                "members"
            ],
            "operationId": "deleteApiV4ProjectsIdMembersUserId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/approvals",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The IID of a merge request",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidApprovals",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "approvals_required": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The amount of approvals required. Must be higher than the project approvals",
                                "example": 2
                            }
                        },
                        "required": [
                            "approvals_required"
                        ],
                        "description": "Deprecated in 16.0: Use the merge request approvals API instead. Change approval-related configuration"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Deprecated in 16.0: Use the merge request approvals API instead. Change approval-related configuration",
                    "schema": {
                        "$ref": "#/definitions/EE_API_Entities_ApprovalState"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in 10.6 and deprecated in 16.0",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdMergeRequestsMergeRequestIidApprovals"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/approve",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidApprove",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "sha": {
                                "type": "string",
                                "description": "When present, must have the HEAD SHA of the source branch"
                            },
                            "approval_password": {
                                "type": "string",
                                "description": "Current user's password if project is set to require explicit auth on approval",
                                "example": "secret"
                            }
                        },
                        "description": "Approve a merge request"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Approve a merge request",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MergeRequestApprovals"
                    }
                },
                "404": {
                    "description": "Not found"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Approve a merge request",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdMergeRequestsMergeRequestIidApprove"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/unapprove",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Remove an approval from a merge request",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MergeRequestApprovals"
                    }
                },
                "404": {
                    "description": "Not found"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Remove an approval from a merge request",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdMergeRequestsMergeRequestIidUnapprove"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/reset_approvals",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Remove all merge request approvals"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Clear all approvals of merge request. This feature was added in GitLab 15.4",
            "tags": [
                "merge_requests"
            ],
            "operationId": "putApiV4ProjectsIdMergeRequestsMergeRequestIidResetApprovals"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/create_ci_config",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Creates merge request for missing ci config in project"
                }
            },
            "request_body_parameters": {},
            "description": "Creates merge request for missing ci config in project",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdCreateCiConfig"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/time_estimate",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The internal ID of the merge_request.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidTimeEstimate",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "duration": {
                                "type": "string",
                                "description": "The duration in human format.",
                                "example": "3h30m"
                            }
                        },
                        "required": [
                            "duration"
                        ],
                        "description": "Set a time estimate for a merge_request"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Set a time estimate for a merge_request",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IssuableTimeStats"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Sets an estimated time of work for this merge_request.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "postApiV4ProjectsIdMergeRequestsMergeRequestIidTimeEstimate"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/reset_time_estimate",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The internal ID of the merge_request.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Reset the time estimate for a project merge_request",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IssuableTimeStats"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Resets the estimated time for this merge_request to 0 seconds.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "postApiV4ProjectsIdMergeRequestsMergeRequestIidResetTimeEstimate"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/add_spent_time",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The internal ID of the merge_request.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidAddSpentTime",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "duration": {
                                "type": "string",
                                "description": "The duration in human format."
                            }
                        },
                        "required": [
                            "duration"
                        ],
                        "description": "Add spent time for a merge_request"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add spent time for a merge_request",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IssuableTimeStats"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Adds spent time for this merge_request.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "postApiV4ProjectsIdMergeRequestsMergeRequestIidAddSpentTime"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/reset_spent_time",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The internal ID of the merge_request",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Reset spent time for a merge_request",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_IssuableTimeStats"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Resets the total spent time for this merge_request to 0 seconds.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "postApiV4ProjectsIdMergeRequestsMergeRequestIidResetSpentTime"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdMergeRequests",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string",
                                "description": "The title of the merge request."
                            },
                            "source_branch": {
                                "type": "string",
                                "description": "The source branch."
                            },
                            "target_branch": {
                                "type": "string",
                                "description": "The target branch."
                            },
                            "target_project_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The target project of the merge request defaults to the :id of the project."
                            },
                            "assignee_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Assignee user ID."
                            },
                            "assignee_ids": {
                                "type": "array",
                                "description": "The IDs of the users to assign the merge request to, as a comma-separated list. Set to 0 or provide an empty value to unassign all assignees.",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "reviewer_ids": {
                                "type": "array",
                                "description": "The IDs of the users to review the merge request, as a comma-separated list. Set to 0 or provide an empty value to unassign all reviewers.",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "description": {
                                "type": "string",
                                "description": "Description of the merge request. Limited to 1,048,576 characters."
                            },
                            "labels": {
                                "type": "array",
                                "description": "Comma-separated label names for a merge request. Set to an empty string to unassign all labels.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "add_labels": {
                                "type": "array",
                                "description": "Comma-separated label names to add to a merge request.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "remove_labels": {
                                "type": "array",
                                "description": "Comma-separated label names to remove from a merge request.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "milestone_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The global ID of a milestone to assign the merge reques to."
                            },
                            "remove_source_branch": {
                                "type": "boolean",
                                "description": "Flag indicating if a merge request should remove the source branch when merging."
                            },
                            "allow_collaboration": {
                                "type": "boolean",
                                "description": "Allow commits from members who can merge to the target branch."
                            },
                            "allow_maintainer_to_push": {
                                "type": "boolean",
                                "description": "[deprecated] See allow_collaboration"
                            },
                            "squash": {
                                "type": "boolean",
                                "description": "Squash commits into a single commit when merging."
                            },
                            "merge_after": {
                                "type": "string",
                                "description": "Date after which the merge request can be merged."
                            },
                            "approvals_before_merge": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of approvals required before this can be merged"
                            }
                        },
                        "required": [
                            "title",
                            "source_branch",
                            "target_branch"
                        ],
                        "description": "Create merge request"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create merge request",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MergeRequest"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "409": {
                    "description": "Conflict"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Create a new merge request.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "postApiV4ProjectsIdMergeRequests"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "description": "The internal ID of the merge request.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a merge request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "412": {
                    "description": "Precondition failed"
                }
            },
            "request_body_parameters": {},
            "description": "Only for administrators and project owners. Deletes the merge request in question. ",
            "tags": [
                "merge_requests"
            ],
            "operationId": "deleteApiV4ProjectsIdMergeRequestsMergeRequestIid"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdMergeRequestsMergeRequestIid",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string",
                                "description": "The title of the merge request."
                            },
                            "target_branch": {
                                "type": "string",
                                "description": "The target branch."
                            },
                            "state_event": {
                                "type": "string",
                                "description": "New state (close/reopen).",
                                "enum": [
                                    "close",
                                    "reopen"
                                ]
                            },
                            "discussion_locked": {
                                "type": "boolean",
                                "description": "Flag indicating if the merge request\u2019s discussion is locked. If the discussion is locked only project members can add, edit or resolve comments."
                            },
                            "assignee_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Assignee user ID."
                            },
                            "assignee_ids": {
                                "type": "array",
                                "description": "The IDs of the users to assign the merge request to, as a comma-separated list. Set to 0 or provide an empty value to unassign all assignees.",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "reviewer_ids": {
                                "type": "array",
                                "description": "The IDs of the users to review the merge request, as a comma-separated list. Set to 0 or provide an empty value to unassign all reviewers.",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "description": {
                                "type": "string",
                                "description": "Description of the merge request. Limited to 1,048,576 characters."
                            },
                            "labels": {
                                "type": "array",
                                "description": "Comma-separated label names for a merge request. Set to an empty string to unassign all labels.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "add_labels": {
                                "type": "array",
                                "description": "Comma-separated label names to add to a merge request.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "remove_labels": {
                                "type": "array",
                                "description": "Comma-separated label names to remove from a merge request.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "milestone_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The global ID of a milestone to assign the merge reques to."
                            },
                            "remove_source_branch": {
                                "type": "boolean",
                                "description": "Flag indicating if a merge request should remove the source branch when merging."
                            },
                            "allow_collaboration": {
                                "type": "boolean",
                                "description": "Allow commits from members who can merge to the target branch."
                            },
                            "allow_maintainer_to_push": {
                                "type": "boolean",
                                "description": "[deprecated] See allow_collaboration"
                            },
                            "squash": {
                                "type": "boolean",
                                "description": "Squash commits into a single commit when merging."
                            },
                            "merge_after": {
                                "type": "string",
                                "description": "Date after which the merge request can be merged."
                            },
                            "approvals_before_merge": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of approvals required before this can be merged"
                            }
                        },
                        "description": "Update merge request"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update merge request",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MergeRequest"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                },
                "409": {
                    "description": "Conflict"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Updates an existing merge request. You can change the target branch, title, or even close the merge request.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "putApiV4ProjectsIdMergeRequestsMergeRequestIid"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/context_commits",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidContextCommits",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "commits": {
                                "type": "array",
                                "description": "The context commits\u2019 SHA.",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "required": [
                            "commits"
                        ],
                        "description": "Create merge request context commits"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create merge request context commits",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Commit"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Create a list of merge request context commits.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "postApiV4ProjectsIdMergeRequestsMergeRequestIidContextCommits"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/context_commits",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "commits",
                    "description": "The context commits\u2019 SHA.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete merge request context commits"
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a list of merge request context commits.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "deleteApiV4ProjectsIdMergeRequestsMergeRequestIidContextCommits"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/pipelines",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidPipelines",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "async": {
                                "type": "boolean",
                                "description": "Indicates if the merge request pipeline creation should be performed asynchronously. If set to `true`, the pipeline will be created outside of the API request and the endpoint will return an empty response with a `202` status code. When the response is `202`, the creation can still fail outside of this request.",
                                "default": false
                            }
                        },
                        "description": "Create merge request pipeline"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create merge request pipeline",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Pipeline"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                },
                "405": {
                    "description": "Method not allowed"
                }
            },
            "request_body_parameters": {},
            "description": "Create a new pipeline for a merge request. A pipeline created via this endpoint doesn\u2019t run a regular branch/tag pipeline. It requires `.gitlab-ci.yml` to be configured with `only: [merge_requests]` to create jobs.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "postApiV4ProjectsIdMergeRequestsMergeRequestIidPipelines"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/merge",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdMergeRequestsMergeRequestIidMerge",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "merge_commit_message": {
                                "type": "string",
                                "description": "Custom merge commit message."
                            },
                            "squash_commit_message": {
                                "type": "string",
                                "description": "Custom squash commit message."
                            },
                            "should_remove_source_branch": {
                                "type": "boolean",
                                "description": "If `true`, removes the source branch."
                            },
                            "merge_when_pipeline_succeeds": {
                                "type": "boolean",
                                "description": "Deprecated: Use auto_merge instead."
                            },
                            "auto_merge": {
                                "type": "boolean",
                                "description": "If `true`, the merge request is set to auto merge."
                            },
                            "sha": {
                                "type": "string",
                                "description": "If present, then this SHA must match the HEAD of the source branch, otherwise the merge fails."
                            },
                            "squash": {
                                "type": "boolean",
                                "description": "If `true`, the commits are squashed into a single commit on merge."
                            },
                            "skip_merge_train": {
                                "type": "boolean",
                                "description": "If `true` skips train restart when merging immediately in a merge train configured project."
                            }
                        },
                        "description": "Merge a merge request"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Merge a merge request",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MergeRequest"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "405": {
                    "description": "Method not allowed"
                },
                "409": {
                    "description": "Conflict"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Accept and merge changes submitted with the merge request using this API.",
            "tags": [
                "merge_requests"
            ],
            "operationId": "putApiV4ProjectsIdMergeRequestsMergeRequestIidMerge"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/cancel_merge_when_pipeline_succeeds",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Cancel Merge When Pipeline Succeeds",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_MergeRequest"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                },
                "405": {
                    "description": "Method not allowed"
                },
                "406": {
                    "description": "Not acceptable"
                }
            },
            "request_body_parameters": {},
            "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
            "tags": [
                "merge_requests"
            ],
            "operationId": "postApiV4ProjectsIdMergeRequestsMergeRequestIidCancelMergeWhenPipelineSucceeds"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/rebase",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "merge_request_iid",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdMergeRequestsMergeRequestIidRebase",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "skip_ci": {
                                "type": "boolean",
                                "description": "Set to true to skip creating a CI pipeline."
                            }
                        },
                        "description": "Rebase a merge request"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Rebase a merge request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "409": {
                    "description": "Conflict"
                }
            },
            "request_body_parameters": {},
            "description": "Automatically rebase the `source_branch` of the merge request against its `target_branch`. This feature was added in GitLab 11.6",
            "tags": [
                "merge_requests"
            ],
            "operationId": "putApiV4ProjectsIdMergeRequestsMergeRequestIidRebase"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/ml_models/{model_version_id}/files/(*path/){file_name}/authorize",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "File name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "model_version_id",
                    "description": "Model version id",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdPackagesMlModelsModelVersionIdFiles(*path)FileNameAuthorize",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string",
                                "description": "File directory path"
                            },
                            "status": {
                                "type": "string",
                                "description": "Package status",
                                "enum": [
                                    "default",
                                    "hidden"
                                ]
                            }
                        },
                        "description": "Workhorse authorize model package file"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Workhorse authorize model package file"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Introduced in GitLab 16.8",
            "tags": [
                "ml_model_registry"
            ],
            "operationId": "putApiV4ProjectsIdPackagesMlModelsModelVersionIdFiles(*path)FileNameAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/ml_models/{model_version_id}/files/(*path/){file_name}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "File name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "model_version_id",
                    "description": "Model version id",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdPackagesMlModelsModelVersionIdFiles(*path)FileName",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string",
                                "description": "File directory path"
                            },
                            "status": {
                                "type": "string",
                                "description": "Package status",
                                "enum": [
                                    "default",
                                    "hidden"
                                ]
                            },
                            "file": {
                                "type": "file",
                                "description": "The package file to be published (generated by Multipart middleware)"
                            }
                        },
                        "required": [
                            "file"
                        ],
                        "description": "Workhorse upload model package file"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Workhorse upload model package file"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Introduced in GitLab 16.8",
            "tags": [
                "ml_model_registry"
            ],
            "operationId": "putApiV4ProjectsIdPackagesMlModelsModelVersionIdFiles(*path)FileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/npm/-/package/*package_name/dist-tags/{tag}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag",
                    "description": "Package dist-tag",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdPackagesNpmPackage*packageNameDistTagsTag",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "package_name": {
                                "type": "string",
                                "description": "Package name"
                            }
                        },
                        "required": [
                            "package_name"
                        ],
                        "description": "Create or Update the given tag for the given NPM package and version"
                    }
                }
            ],
            "responses": {
                "204": {
                    "description": "Create or Update the given tag for the given NPM package and version"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.7",
            "tags": [
                "npm_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesNpmPackage*packageNameDistTagsTag"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/npm/-/package/*package_name/dist-tags/{tag}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag",
                    "description": "Package dist-tag",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Deletes the given tag"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.7",
            "tags": [
                "npm_packages"
            ],
            "operationId": "deleteApiV4ProjectsIdPackagesNpmPackage*packageNameDistTagsTag"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/npm/-/npm/v1/security/advisories/bulk",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Ok"
                },
                "307": {
                    "description": "Temporary Redirect"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.6",
            "tags": [
                "npm_packages"
            ],
            "operationId": "postApiV4ProjectsIdPackagesNpmNpmV1SecurityAdvisoriesBulk"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/npm/-/npm/v1/security/audits/quick",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Ok"
                },
                "307": {
                    "description": "Temporary Redirect"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.6",
            "tags": [
                "npm_packages"
            ],
            "operationId": "postApiV4ProjectsIdPackagesNpmNpmV1SecurityAuditsQuick"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/npm/{package_name}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdPackagesNpmPackageName",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "versions": {
                                "type": "object",
                                "description": "Package version info"
                            }
                        },
                        "required": [
                            "versions"
                        ],
                        "description": "Create or deprecate NPM package"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create or deprecate NPM package"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Create was introduced in GitLab 11.8 & deprecate suppport was added in 16.0",
            "tags": [
                "npm_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesNpmPackageName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget/v2",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdPackagesNugetV2",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "package": {
                                "type": "file",
                                "description": "The package file to be published (generated by Multipart middleware)"
                            }
                        },
                        "required": [
                            "package"
                        ],
                        "description": "The NuGet V2 Feed Package Publish endpoint"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "The NuGet V2 Feed Package Publish endpoint"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.2",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesNugetV2"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdPackagesNuget",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "package": {
                                "type": "file",
                                "description": "The package file to be published (generated by Multipart middleware)"
                            }
                        },
                        "required": [
                            "package"
                        ],
                        "description": "The NuGet V3 Feed Package Publish endpoint"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "The NuGet V3 Feed Package Publish endpoint"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.6",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesNuget"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget/authorize",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet Package Authorize endpoint"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.1",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesNugetAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget/symbolpackage",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdPackagesNugetSymbolpackage",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "package": {
                                "type": "file",
                                "description": "The package file to be published (generated by Multipart middleware)"
                            }
                        },
                        "required": [
                            "package"
                        ],
                        "description": "The NuGet Symbol Package Publish endpoint"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "The NuGet Symbol Package Publish endpoint"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.1",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesNugetSymbolpackage"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget/symbolpackage/authorize",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet Symbol Package Authorize endpoint"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.1",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesNugetSymbolpackageAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget/*package_name/*package_version",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "The NuGet package name",
                    "type": "string",
                    "required": true,
                    "example": "mynugetpkg"
                },
                {
                    "in": "query",
                    "name": "package_version",
                    "description": "The NuGet package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0.1"
                }
            ],
            "responses": {
                "204": {
                    "description": "The NuGet Package Delete endpoint"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.5",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "deleteApiV4ProjectsIdPackagesNuget*packageName*packageVersion"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/nuget/v2/authorize",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "The NuGet V2 Feed Package Authorize endpoint"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.2",
            "tags": [
                "nuget_packages"
            ],
            "operationId": "putApiV4ProjectsIdPackagesNugetV2Authorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/{package_id}/package_files/{package_file_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_id",
                    "description": "ID of a package",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_file_id",
                    "description": "ID of a package file",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a package file"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.12",
            "tags": [
                "package_files"
            ],
            "operationId": "deleteApiV4ProjectsIdPackagesPackageIdPackageFilesPackageFileId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pages",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Unpublish pages"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Remove pages. The user must have administrator access. This feature was introduced in GitLab 12.6",
            "tags": [
                "pages"
            ],
            "operationId": "deleteApiV4ProjectsIdPages"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pages",
            "method": "patch",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "patchApiV4ProjectsIdPages",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "pages_unique_domain_enabled": {
                                "type": "boolean",
                                "description": "Whether to use unique domain"
                            },
                            "pages_https_only": {
                                "type": "boolean",
                                "description": "Whether to force HTTPS"
                            },
                            "pages_primary_domain": {
                                "type": "string",
                                "description": "Set pages primary domain"
                            }
                        },
                        "description": "Update pages settings"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update pages settings"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Update page settings for a project. User must have administrative access.",
            "tags": [
                "pages"
            ],
            "operationId": "patchApiV4ProjectsIdPages"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pages/domains",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdPagesDomains",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "domain": {
                                "type": "string",
                                "description": "The domain"
                            },
                            "certificate": {
                                "type": "file",
                                "description": "The certificate"
                            },
                            "key": {
                                "type": "file",
                                "description": "The key"
                            },
                            "auto_ssl_enabled": {
                                "type": "boolean",
                                "description": "Enables automatic generation of SSL certificates issued by Let's Encrypt for custom domains.",
                                "default": false
                            },
                            "user_provided_certificate": {
                                "type": "string"
                            },
                            "user_provided_key": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "domain"
                        ],
                        "description": "Create a new pages domain"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a new pages domain",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_PagesDomain"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Create a new pages domain",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdPagesDomains"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pages/domains/{domain}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "domain",
                    "description": "The domain",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdPagesDomainsDomain",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "certificate": {
                                "type": "file",
                                "description": "The certificate"
                            },
                            "key": {
                                "type": "file",
                                "description": "The key"
                            },
                            "auto_ssl_enabled": {
                                "type": "boolean",
                                "description": "Enables automatic generation of SSL certificates issued by Let's Encrypt for custom domains."
                            }
                        },
                        "description": "Updates a pages domain"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Updates a pages domain"
                }
            },
            "request_body_parameters": {},
            "description": "Updates a pages domain",
            "tags": [
                "projects"
            ],
            "operationId": "putApiV4ProjectsIdPagesDomainsDomain"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pages/domains/{domain}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "domain",
                    "description": "The domain",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a pages domain"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a pages domain",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdPagesDomainsDomain"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/pages/domains/{domain}/verify",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "domain",
                    "description": "The domain to verify",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Verify a pages domain",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_PagesDomain"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Verify a pages domain",
            "tags": [
                "projects"
            ],
            "operationId": "putApiV4ProjectsIdPagesDomainsDomainVerify"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/clusters/{cluster_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "cluster_id",
                    "description": "The cluster ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdClustersClusterId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Cluster name"
                            },
                            "domain": {
                                "type": "string",
                                "description": "Cluster base domain"
                            },
                            "environment_scope": {
                                "type": "string",
                                "description": "The associated environment to the cluster"
                            },
                            "namespace_per_environment": {
                                "type": "boolean",
                                "description": "Deploy each environment to a separate Kubernetes namespace",
                                "default": true
                            },
                            "management_project_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the management project"
                            },
                            "enabled": {
                                "type": "boolean",
                                "description": "Determines if cluster is active or not"
                            },
                            "managed": {
                                "type": "boolean",
                                "description": "Determines if GitLab will manage namespaces and service accounts for this cluster"
                            },
                            "platform_kubernetes_attributes": {
                                "type": "object",
                                "description": "Platform Kubernetes data",
                                "properties": {
                                    "api_url": {
                                        "type": "string",
                                        "description": "URL to access the Kubernetes API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "Token to authenticate against Kubernetes"
                                    },
                                    "ca_cert": {
                                        "type": "string",
                                        "description": "TLS certificate (needed if API is using a self-signed TLS certificate)"
                                    },
                                    "namespace": {
                                        "type": "string",
                                        "description": "Unique namespace related to Project"
                                    }
                                }
                            }
                        },
                        "description": "Edit project cluster"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Edit project cluster",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ClusterProject"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.7. Updates an existing project cluster.",
            "tags": [
                "clusters"
            ],
            "operationId": "putApiV4ProjectsIdClustersClusterId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/clusters/{cluster_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "cluster_id",
                    "description": "The Cluster ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "403": {
                    "description": "Forbidden"
                },
                "204": {
                    "description": "Delete project cluster",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ClusterProject"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.7. Deletes an existing project cluster. Does not remove existing resources within the connected Kubernetes cluster.",
            "tags": [
                "clusters"
            ],
            "operationId": "deleteApiV4ProjectsIdClustersClusterId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/clusters/user",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdClustersUser",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Cluster name"
                            },
                            "enabled": {
                                "type": "boolean",
                                "description": "Determines if cluster is active or not, defaults to true",
                                "default": true
                            },
                            "domain": {
                                "type": "string",
                                "description": "Cluster base domain"
                            },
                            "environment_scope": {
                                "type": "string",
                                "description": "The associated environment to the cluster",
                                "default": "*"
                            },
                            "namespace_per_environment": {
                                "type": "boolean",
                                "description": "Deploy each environment to a separate Kubernetes namespace",
                                "default": true
                            },
                            "management_project_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the management project"
                            },
                            "managed": {
                                "type": "boolean",
                                "description": "Determines if GitLab will manage namespaces and service accounts for this cluster, defaults to true",
                                "default": true
                            },
                            "platform_kubernetes_attributes": {
                                "type": "object",
                                "description": "Platform Kubernetes data",
                                "properties": {
                                    "api_url": {
                                        "type": "string",
                                        "description": "URL to access the Kubernetes API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "Token to authenticate against Kubernetes"
                                    },
                                    "ca_cert": {
                                        "type": "string",
                                        "description": "TLS certificate (needed if API is using a self-signed TLS certificate)"
                                    },
                                    "namespace": {
                                        "type": "string",
                                        "description": "Unique namespace related to Project"
                                    },
                                    "authorization_type": {
                                        "type": "string",
                                        "description": "Cluster authorization type, defaults to RBAC",
                                        "enum": [
                                            "unknown_authorization",
                                            "rbac",
                                            "abac"
                                        ],
                                        "default": "rbac"
                                    }
                                },
                                "required": [
                                    "api_url",
                                    "token"
                                ]
                            }
                        },
                        "required": [
                            "name",
                            "platform_kubernetes_attributes"
                        ],
                        "description": "Add existing cluster to project"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add existing cluster to project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ClusterProject"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.7. Adds an existing Kubernetes cluster to the project.",
            "tags": [
                "clusters"
            ],
            "operationId": "postApiV4ProjectsIdClustersUser"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/registry/repositories/{repository_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "repository_id",
                    "description": "The ID of the repository",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Success"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.8.",
            "tags": [
                "container_registry"
            ],
            "operationId": "deleteApiV4ProjectsIdRegistryRepositoriesRepositoryId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/registry/repositories/{repository_id}/tags",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "repository_id",
                    "description": "The ID of the repository",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "name_regex_delete",
                    "description": "The tag name regexp to delete, specify .* to delete all",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "name_regex",
                    "description": "The tag name regexp to delete, specify .* to delete all",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "name_regex_keep",
                    "description": "The tag name regexp to retain",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "keep_n",
                    "description": "Keep n of latest tags with matching name",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "query",
                    "name": "older_than",
                    "description": "Delete older than: 1h, 1d, 1month",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "204": {
                    "description": "Success"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.8.",
            "tags": [
                "container_registry"
            ],
            "operationId": "deleteApiV4ProjectsIdRegistryRepositoriesRepositoryIdTags"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/registry/repositories/{repository_id}/tags/{tag_name}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "repository_id",
                    "description": "The ID of the repository",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag_name",
                    "description": "The name of the tag",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Success"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.8.",
            "tags": [
                "container_registry"
            ],
            "operationId": "deleteApiV4ProjectsIdRegistryRepositoriesRepositoryIdTagsTagName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/registry/protection/repository/rules",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdRegistryProtectionRepositoryRules",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "repository_path_pattern": {
                                "type": "string",
                                "description": "Container repository path pattern protected by the protection rule.\n            For example `flight/flight-*`. Wildcard character `*` allowed."
                            },
                            "minimum_access_level_for_push": {
                                "type": "string",
                                "description": "Minimum GitLab access level to allow to push container images to the container registry.\n            For example maintainer, owner or admin.",
                                "enum": [
                                    "maintainer",
                                    "owner",
                                    "admin"
                                ]
                            },
                            "minimum_access_level_for_delete": {
                                "type": "string",
                                "description": "Minimum GitLab access level to allow to delete container images in the container registry.\n            For example maintainer, owner or admin.",
                                "enum": [
                                    "maintainer",
                                    "owner",
                                    "admin"
                                ]
                            }
                        },
                        "required": [
                            "repository_path_pattern"
                        ],
                        "description": "Create a container protection rule for a project"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a container protection rule for a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Projects_ContainerRegistry_Protection_Rule"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                },
                "422": {
                    "description": "Unprocessable Entity"
                }
            },
            "request_body_parameters": {},
            "description": "Create a container protection rule for a project",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdRegistryProtectionRepositoryRules"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/registry/protection/repository/rules/{protection_rule_id}",
            "method": "patch",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "protection_rule_id",
                    "description": "The ID of the container protection rule",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "patchApiV4ProjectsIdRegistryProtectionRepositoryRulesProtectionRuleId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "repository_path_pattern": {
                                "type": "string",
                                "description": "Container repository path pattern protected by the protection rule.\n              For example `flight/flight-*`. Wildcard character `*` allowed."
                            },
                            "minimum_access_level_for_push": {
                                "type": "string",
                                "description": "Minimum GitLab access level to allow to push container images to the container registry.\n              For example maintainer, owner or admin. To unset the value, use an empty string `\"\"`.",
                                "enum": [
                                    "maintainer",
                                    "owner",
                                    "admin",
                                    ""
                                ]
                            },
                            "minimum_access_level_for_delete": {
                                "type": "string",
                                "description": "Minimum GitLab access level to allow to delete container images in the container registry.\n              For example maintainer, owner or admin. To unset the value, use an empty string `\"\"`.",
                                "enum": [
                                    "maintainer",
                                    "owner",
                                    "admin",
                                    ""
                                ]
                            }
                        },
                        "description": "Update a container protection rule for a project"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a container protection rule for a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Projects_ContainerRegistry_Protection_Rule"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                },
                "422": {
                    "description": "Unprocessable Entity"
                }
            },
            "request_body_parameters": {},
            "description": "Update a container protection rule for a project",
            "tags": [
                "projects"
            ],
            "operationId": "patchApiV4ProjectsIdRegistryProtectionRepositoryRulesProtectionRuleId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/registry/protection/repository/rules/{protection_rule_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "protection_rule_id",
                    "description": "The ID of the container protection rule",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "204 No Content"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete container protection rule",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdRegistryProtectionRepositoryRulesProtectionRuleId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/debian_distributions",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdDebianDistributions",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "codename": {
                                "type": "string",
                                "description": "The Debian Codename",
                                "example": "sid"
                            },
                            "suite": {
                                "type": "string",
                                "description": "The Debian Suite",
                                "example": "unstable"
                            },
                            "origin": {
                                "type": "string",
                                "description": "The Debian Origin",
                                "example": "Grep"
                            },
                            "label": {
                                "type": "string",
                                "description": "The Debian Label",
                                "example": "grep.be"
                            },
                            "version": {
                                "type": "string",
                                "description": "The Debian Version",
                                "example": "12"
                            },
                            "description": {
                                "type": "string",
                                "description": "The Debian Description",
                                "example": "My description"
                            },
                            "valid_time_duration_seconds": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The duration before the Release file should be considered expired by the client",
                                "example": 604800
                            },
                            "components": {
                                "type": "array",
                                "description": "The list of Components",
                                "example": "main",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "architectures": {
                                "type": "array",
                                "description": "The list of Architectures",
                                "example": "amd64",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "required": [
                            "codename"
                        ],
                        "description": "Create a Debian Distribution"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a Debian Distribution",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Debian_Distribution"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in 14.0",
            "tags": [
                "debian_distribution"
            ],
            "operationId": "postApiV4ProjectsIdDebianDistributions"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/debian_distributions/{codename}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "codename",
                    "description": "The Debian Codename",
                    "type": "string",
                    "required": true,
                    "example": "sid"
                },
                {
                    "name": "putApiV4ProjectsIdDebianDistributionsCodename",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "suite": {
                                "type": "string",
                                "description": "The Debian Suite",
                                "example": "unstable"
                            },
                            "origin": {
                                "type": "string",
                                "description": "The Debian Origin",
                                "example": "Grep"
                            },
                            "label": {
                                "type": "string",
                                "description": "The Debian Label",
                                "example": "grep.be"
                            },
                            "version": {
                                "type": "string",
                                "description": "The Debian Version",
                                "example": "12"
                            },
                            "description": {
                                "type": "string",
                                "description": "The Debian Description",
                                "example": "My description"
                            },
                            "valid_time_duration_seconds": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The duration before the Release file should be considered expired by the client",
                                "example": 604800
                            },
                            "components": {
                                "type": "array",
                                "description": "The list of Components",
                                "example": "main",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "architectures": {
                                "type": "array",
                                "description": "The list of Architectures",
                                "example": "amd64",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Update a Debian Distribution"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a Debian Distribution",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Debian_Distribution"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in 14.0",
            "tags": [
                "debian_distribution"
            ],
            "operationId": "putApiV4ProjectsIdDebianDistributionsCodename"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/debian_distributions/{codename}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "codename",
                    "description": "The Debian Codename",
                    "type": "string",
                    "required": true,
                    "example": "sid"
                },
                {
                    "in": "query",
                    "name": "suite",
                    "description": "The Debian Suite",
                    "type": "string",
                    "required": false,
                    "example": "unstable"
                },
                {
                    "in": "query",
                    "name": "origin",
                    "description": "The Debian Origin",
                    "type": "string",
                    "required": false,
                    "example": "Grep"
                },
                {
                    "in": "query",
                    "name": "label",
                    "description": "The Debian Label",
                    "type": "string",
                    "required": false,
                    "example": "grep.be"
                },
                {
                    "in": "query",
                    "name": "version",
                    "description": "The Debian Version",
                    "type": "string",
                    "required": false,
                    "example": "12"
                },
                {
                    "in": "query",
                    "name": "description",
                    "description": "The Debian Description",
                    "type": "string",
                    "required": false,
                    "example": "My description"
                },
                {
                    "in": "query",
                    "name": "valid_time_duration_seconds",
                    "description": "The duration before the Release file should be considered expired by the client",
                    "type": "integer",
                    "format": "int32",
                    "required": false,
                    "example": 604800
                },
                {
                    "in": "query",
                    "name": "components",
                    "description": "The list of Components",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false,
                    "example": "main"
                },
                {
                    "in": "query",
                    "name": "architectures",
                    "description": "The list of Architectures",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false,
                    "example": "amd64"
                }
            ],
            "responses": {
                "202": {
                    "description": "Delete a Debian Distribution"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in 14.0",
            "tags": [
                "debian_distribution"
            ],
            "operationId": "deleteApiV4ProjectsIdDebianDistributionsCodename"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/export",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdExport",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "description": {
                                "type": "string",
                                "description": "Override the project description"
                            },
                            "upload": {
                                "type": "object",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "The URL to upload the project"
                                    },
                                    "http_method": {
                                        "type": "string",
                                        "description": "HTTP method to upload the exported project",
                                        "enum": [
                                            "PUT",
                                            "POST"
                                        ],
                                        "default": "PUT"
                                    }
                                }
                            }
                        },
                        "description": "Start export"
                    }
                }
            ],
            "responses": {
                "202": {
                    "description": "Start export"
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "429": {
                    "description": "Too many requests"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "project_export"
            ],
            "operationId": "postApiV4ProjectsIdExport"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/export_relations",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdExportRelations",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "batched": {
                                "type": "boolean",
                                "description": "Whether to export in batches"
                            }
                        },
                        "description": "Start relations export"
                    }
                }
            ],
            "responses": {
                "202": {
                    "description": "Start relations export"
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.4",
            "tags": [
                "project_export"
            ],
            "operationId": "postApiV4ProjectsIdExportRelations"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/hooks/{hook_id}/url_variables/{key}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of the hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the variable",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdHooksHookIdUrlVariablesKey",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "The value of the variable"
                            }
                        },
                        "required": [
                            "value"
                        ],
                        "description": "Set a url variable"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Set a url variable"
                }
            },
            "request_body_parameters": {},
            "description": "Set a url variable",
            "tags": [
                "projects"
            ],
            "operationId": "putApiV4ProjectsIdHooksHookIdUrlVariablesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/hooks/{hook_id}/url_variables/{key}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of the hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the variable",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Un-Set a url variable"
                }
            },
            "request_body_parameters": {},
            "description": "Un-Set a url variable",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdHooksHookIdUrlVariablesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/hooks/{hook_id}/custom_headers/{key}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of the hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the custom header",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdHooksHookIdCustomHeadersKey",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "The value of the custom header"
                            }
                        },
                        "required": [
                            "value"
                        ],
                        "description": "Set a custom header"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Set a custom header"
                }
            },
            "request_body_parameters": {},
            "description": "Set a custom header",
            "tags": [
                "projects"
            ],
            "operationId": "putApiV4ProjectsIdHooksHookIdCustomHeadersKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/hooks/{hook_id}/custom_headers/{key}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of the hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the custom header",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Un-Set a custom header"
                }
            },
            "request_body_parameters": {},
            "description": "Un-Set a custom header",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdHooksHookIdCustomHeadersKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/hooks",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdHooks",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "The URL to send the request to",
                                "example": "http://example.com/hook"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name of the hook"
                            },
                            "description": {
                                "type": "string",
                                "description": "Description of the hook"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger hook on push events"
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger hook on issues events"
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger hook on confidential issues events"
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger hook on merge request events"
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger hook on tag push events"
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger hook on note (comment) events"
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger hook on confidential note (comment) events"
                            },
                            "job_events": {
                                "type": "boolean",
                                "description": "Trigger hook on job events"
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger hook on pipeline events"
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger hook on wiki events"
                            },
                            "deployment_events": {
                                "type": "boolean",
                                "description": "Trigger hook on deployment events"
                            },
                            "feature_flag_events": {
                                "type": "boolean",
                                "description": "Trigger hook on feature flag events"
                            },
                            "releases_events": {
                                "type": "boolean",
                                "description": "Trigger hook on release events"
                            },
                            "emoji_events": {
                                "type": "boolean",
                                "description": "Trigger hook on emoji events"
                            },
                            "resource_access_token_events": {
                                "type": "boolean",
                                "description": "Trigger hook on project access token expiry events"
                            },
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Do SSL verification when triggering the hook"
                            },
                            "token": {
                                "type": "string",
                                "description": "Secret token to validate received payloads; this will not be returned in the response"
                            },
                            "push_events_branch_filter": {
                                "type": "string",
                                "description": "Trigger hook on specified branch only"
                            },
                            "custom_webhook_template": {
                                "type": "string",
                                "description": "Custom template for the request payload"
                            },
                            "branch_filter_strategy": {
                                "type": "string",
                                "description": "Filter push events by branch. Possible values are `wildcard` (default), `regex`, and `all_branches`",
                                "enum": [
                                    "wildcard",
                                    "regex",
                                    "all_branches"
                                ]
                            },
                            "vulnerability_events": {
                                "type": "boolean",
                                "description": "Trigger hook on vulnerability events"
                            },
                            "url_variables": {
                                "type": "array",
                                "description": "URL variables for interpolation",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "description": "Name of the variable",
                                            "example": "token"
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "Value of the variable",
                                            "example": "123"
                                        }
                                    },
                                    "required": [
                                        "key",
                                        "value"
                                    ]
                                }
                            },
                            "custom_headers": {
                                "type": "array",
                                "description": "Custom headers",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "description": "Name of the header",
                                            "example": "X-Custom-Header"
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "Value of the header",
                                            "example": "value"
                                        }
                                    },
                                    "required": [
                                        "key",
                                        "value"
                                    ]
                                }
                            }
                        },
                        "required": [
                            "url"
                        ],
                        "description": "Add project hook"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add project hook",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectHook"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Adds a hook to a specified project",
            "tags": [
                "project_hooks"
            ],
            "operationId": "postApiV4ProjectsIdHooks"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/hooks/{hook_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of the project hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdHooksHookId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "The URL to send the request to"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name of the hook"
                            },
                            "description": {
                                "type": "string",
                                "description": "Description of the hook"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "Trigger hook on push events"
                            },
                            "issues_events": {
                                "type": "boolean",
                                "description": "Trigger hook on issues events"
                            },
                            "confidential_issues_events": {
                                "type": "boolean",
                                "description": "Trigger hook on confidential issues events"
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger hook on merge request events"
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "Trigger hook on tag push events"
                            },
                            "note_events": {
                                "type": "boolean",
                                "description": "Trigger hook on note (comment) events"
                            },
                            "confidential_note_events": {
                                "type": "boolean",
                                "description": "Trigger hook on confidential note (comment) events"
                            },
                            "job_events": {
                                "type": "boolean",
                                "description": "Trigger hook on job events"
                            },
                            "pipeline_events": {
                                "type": "boolean",
                                "description": "Trigger hook on pipeline events"
                            },
                            "wiki_page_events": {
                                "type": "boolean",
                                "description": "Trigger hook on wiki events"
                            },
                            "deployment_events": {
                                "type": "boolean",
                                "description": "Trigger hook on deployment events"
                            },
                            "feature_flag_events": {
                                "type": "boolean",
                                "description": "Trigger hook on feature flag events"
                            },
                            "releases_events": {
                                "type": "boolean",
                                "description": "Trigger hook on release events"
                            },
                            "emoji_events": {
                                "type": "boolean",
                                "description": "Trigger hook on emoji events"
                            },
                            "resource_access_token_events": {
                                "type": "boolean",
                                "description": "Trigger hook on project access token expiry events"
                            },
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Do SSL verification when triggering the hook"
                            },
                            "token": {
                                "type": "string",
                                "description": "Secret token to validate received payloads; this will not be returned in the response"
                            },
                            "push_events_branch_filter": {
                                "type": "string",
                                "description": "Trigger hook on specified branch only"
                            },
                            "custom_webhook_template": {
                                "type": "string",
                                "description": "Custom template for the request payload"
                            },
                            "branch_filter_strategy": {
                                "type": "string",
                                "description": "Filter push events by branch. Possible values are `wildcard` (default), `regex`, and `all_branches`",
                                "enum": [
                                    "wildcard",
                                    "regex",
                                    "all_branches"
                                ]
                            },
                            "vulnerability_events": {
                                "type": "boolean",
                                "description": "Trigger hook on vulnerability events"
                            },
                            "url_variables": {
                                "type": "array",
                                "description": "URL variables for interpolation",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "description": "Name of the variable",
                                            "example": "token"
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "Value of the variable",
                                            "example": "123"
                                        }
                                    },
                                    "required": [
                                        "key",
                                        "value"
                                    ]
                                }
                            },
                            "custom_headers": {
                                "type": "array",
                                "description": "Custom headers",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "description": "Name of the header",
                                            "example": "X-Custom-Header"
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "Value of the header",
                                            "example": "value"
                                        }
                                    },
                                    "required": [
                                        "key",
                                        "value"
                                    ]
                                }
                            }
                        },
                        "description": "Edit project hook"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Edit project hook",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectHook"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Edits a hook for a specified project.",
            "tags": [
                "project_hooks"
            ],
            "operationId": "putApiV4ProjectsIdHooksHookId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/hooks/{hook_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of the project hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Removes a hook from a project. This is an idempotent method and can be called multiple times. Either the hook is available or not.",
            "tags": [
                "project_hooks"
            ],
            "operationId": "deleteApiV4ProjectsIdHooksHookId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/hooks/{hook_id}/test/{trigger}",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of the hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "trigger",
                    "description": "The type of trigger hook",
                    "type": "string",
                    "enum": [
                        "confidential_issues_events",
                        "confidential_note_events",
                        "deployment_events",
                        "emoji_events",
                        "feature_flag_events",
                        "issues_events",
                        "job_events",
                        "merge_requests_events",
                        "note_events",
                        "pipeline_events",
                        "push_events",
                        "releases_events",
                        "resource_access_token_events",
                        "tag_push_events",
                        "wiki_page_events",
                        "vulnerability_events"
                    ],
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Triggers a hook test"
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                },
                "429": {
                    "description": "Too many requests"
                }
            },
            "request_body_parameters": {},
            "description": "Triggers a hook test",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdHooksHookIdTestTrigger"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/hooks/{hook_id}/events/{hook_log_id}/resend",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "hook_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "hook_log_id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Resend a webhook event"
                },
                "422": {
                    "description": "Unprocessable entity"
                },
                "404": {
                    "description": "Not found"
                },
                "429": {
                    "description": "Too many requests"
                }
            },
            "request_body_parameters": {},
            "description": "Resend a webhook event",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdHooksHookIdEventsHookLogIdResend"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/import/authorize",
            "method": "post",
            "parameters": [],
            "responses": {
                "201": {
                    "description": "Workhorse authorize the project import upload"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.9",
            "tags": [
                "project_import"
            ],
            "operationId": "postApiV4ProjectsImportAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/import",
            "method": "post",
            "parameters": [
                {
                    "in": "formData",
                    "name": "path",
                    "description": "The new project path and name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "file",
                    "description": "The project export file to be imported",
                    "type": "file",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "name",
                    "description": "The name of the project to be imported. Defaults to the path of the project if not provided.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "namespace",
                    "description": "The ID or name of the namespace that the project will be imported into. Defaults to the current user's namespace.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "overwrite",
                    "description": "If there is a project in the same namespace and with the same name overwrite it",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[description]",
                    "description": "The description of the project",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[build_git_strategy]",
                    "description": "The Git strategy. Defaults to `fetch`",
                    "type": "string",
                    "enum": [
                        "fetch",
                        "clone"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[build_timeout]",
                    "description": "Build timeout",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[auto_cancel_pending_pipelines]",
                    "description": "Auto-cancel pending pipelines",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[ci_config_path]",
                    "description": "The path to CI config file. Defaults to `.gitlab-ci.yml`",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[service_desk_enabled]",
                    "description": "Disable or enable the service desk",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[issues_enabled]",
                    "description": "Flag indication if the issue tracker is enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[merge_requests_enabled]",
                    "description": "Flag indication if merge requests are enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[wiki_enabled]",
                    "description": "Flag indication if the wiki is enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[jobs_enabled]",
                    "description": "Flag indication if jobs are enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[snippets_enabled]",
                    "description": "Flag indication if snippets are enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[issues_access_level]",
                    "description": "Issues access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[repository_access_level]",
                    "description": "Repository access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[merge_requests_access_level]",
                    "description": "Merge requests access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[forking_access_level]",
                    "description": "Forks access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[wiki_access_level]",
                    "description": "Wiki access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[builds_access_level]",
                    "description": "Builds access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[snippets_access_level]",
                    "description": "Snippets access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[pages_access_level]",
                    "description": "Pages access level. One of `disabled`, `private`, `enabled` or `public`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[analytics_access_level]",
                    "description": "Analytics access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_registry_access_level]",
                    "description": "Controls visibility of the container registry. One of `disabled`, `private` or `enabled`. `private` will make the container registry accessible only to project members (reporter role and above). `enabled` will make the container registry accessible to everyone who has access to the project. `disabled` will disable the container registry",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[security_and_compliance_access_level]",
                    "description": "Security and compliance access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[releases_access_level]",
                    "description": "Releases access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[environments_access_level]",
                    "description": "Environments access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[feature_flags_access_level]",
                    "description": "Feature flags access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[infrastructure_access_level]",
                    "description": "Infrastructure access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[monitor_access_level]",
                    "description": "Monitor access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[model_experiments_access_level]",
                    "description": "Model experiments access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[model_registry_access_level]",
                    "description": "Model registry access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[emails_disabled]",
                    "description": "Deprecated: Use emails_enabled instead.",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[emails_enabled]",
                    "description": "Enable email notifications",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[show_default_award_emojis]",
                    "description": "Show default award emojis",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[show_diff_preview_in_email]",
                    "description": "Include the code diff preview in merge request notification emails",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[warn_about_potentially_unwanted_characters]",
                    "description": "Warn about potentially unwanted characters",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[enforce_auth_checks_on_uploads]",
                    "description": "Enforce auth check on uploads",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[shared_runners_enabled]",
                    "description": "Flag indication if shared runners are enabled for that project",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[group_runners_enabled]",
                    "description": "Flag indication if group runners are enabled for that project",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[resolve_outdated_diff_discussions]",
                    "description": "Automatically resolve merge request diff threads on lines changed with a push",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[remove_source_branch_after_merge]",
                    "description": "Remove the source branch by default after merge",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_registry_enabled]",
                    "description": "Deprecated: Use :container_registry_access_level instead. Flag indication if the container registry is enabled for that project",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][cadence]",
                    "description": "Container expiration policy cadence for recurring job",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][keep_n]",
                    "description": "Container expiration policy number of images to keep",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][older_than]",
                    "description": "Container expiration policy remove images older than value",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][name_regex]",
                    "description": "Container expiration policy regex for image removal",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][name_regex_keep]",
                    "description": "Container expiration policy regex for image retention",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][enabled]",
                    "description": "Flag indication if container expiration policy is enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[lfs_enabled]",
                    "description": "Flag indication if Git LFS is enabled for that project",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[visibility]",
                    "description": "The visibility of the project.",
                    "type": "string",
                    "enum": [
                        "private",
                        "internal",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[public_builds]",
                    "description": "Deprecated: Use public_jobs instead.",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[public_jobs]",
                    "description": "Perform public builds",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[request_access_enabled]",
                    "description": "Allow users to request member access",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[only_allow_merge_if_pipeline_succeeds]",
                    "description": "Only allow to merge if builds succeed",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[allow_merge_on_skipped_pipeline]",
                    "description": "Allow to merge if pipeline is skipped",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[only_allow_merge_if_all_discussions_are_resolved]",
                    "description": "Only allow to merge if all threads are resolved",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[tag_list]",
                    "description": "Deprecated: Use :topics instead",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[topics]",
                    "description": "The list of topics for a project",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[avatar]",
                    "description": "Avatar image for project",
                    "type": "file",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[printing_merge_request_link_enabled]",
                    "description": "Show link to create/view merge request when pushing from the command line",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[merge_method]",
                    "description": "The merge method used when merging merge requests",
                    "type": "string",
                    "enum": [
                        "ff",
                        "rebase_merge",
                        "merge"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[suggestion_commit_message]",
                    "description": "The commit message used to apply merge request suggestions",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[merge_commit_template]",
                    "description": "Template used to create merge commit message",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[squash_commit_template]",
                    "description": "Template used to create squash commit message",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[issue_branch_template]",
                    "description": "Template used to create a branch from an issue",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[auto_devops_enabled]",
                    "description": "Flag indication if Auto DevOps is enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[auto_devops_deploy_strategy]",
                    "description": "Auto Deploy strategy",
                    "type": "string",
                    "enum": [
                        "continuous",
                        "manual",
                        "timed_incremental"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[autoclose_referenced_issues]",
                    "description": "Flag indication if referenced issues auto-closing is enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[repository_storage]",
                    "description": "Which storage shard the repository is on. Available only to admins",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[packages_enabled]",
                    "description": "Enable project packages feature",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[squash_option]",
                    "description": "Squash default for project. One of `never`, `always`, `default_on`, or `default_off`.",
                    "type": "string",
                    "enum": [
                        "never",
                        "always",
                        "default_on",
                        "default_off"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[mr_default_target_self]",
                    "description": "Merge requests of this forked project targets itself by default",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[merge_request_title_regex]",
                    "description": "The regex the Merge Request must adhere to",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[only_allow_merge_if_all_status_checks_passed]",
                    "description": "Blocks merge requests from merging unless all status checks have passed",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[approvals_before_merge]",
                    "description": "How many approvers should approve merge request by default",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[mirror]",
                    "description": "[Deprecated] Enables pull mirroring in a project",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[mirror_trigger_builds]",
                    "description": "[Deprecated] Pull mirroring triggers builds",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[external_authorization_classification_label]",
                    "description": "The classification label for the project",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[requirements_access_level]",
                    "description": "Requirements feature access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[prevent_merge_without_jira_issue]",
                    "description": "Require an associated issue from Jira",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.path",
                    "description": "Path to locally stored body (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.name",
                    "description": "Real filename as send in Content-Disposition (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.type",
                    "description": "Real content type as send in Content-Type (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.size",
                    "description": "Real size of file (generated by Workhorse)",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.md5",
                    "description": "MD5 checksum of the file (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.sha1",
                    "description": "SHA1 checksum of the file (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.sha256",
                    "description": "SHA256 checksum of the file (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.etag",
                    "description": "Etag of the file (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.remote_id",
                    "description": "Remote_id of the file (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.remote_url",
                    "description": "Remote_url of the file (generated by Workhorse)",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a new project import",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectImportStatus"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.6.",
            "tags": [
                "project_import"
            ],
            "operationId": "postApiV4ProjectsImport"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/remote-import",
            "method": "post",
            "parameters": [
                {
                    "in": "formData",
                    "name": "url",
                    "description": "The URL for the file.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "path",
                    "description": "The new project path and name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "name",
                    "description": "The name of the project to be imported. Defaults to the path of the project if not provided.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "namespace",
                    "description": "The ID or name of the namespace that the project will be imported into. Defaults to the current user's namespace.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "overwrite",
                    "description": "If there is a project in the same namespace and with the same name overwrite it",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[description]",
                    "description": "The description of the project",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[build_git_strategy]",
                    "description": "The Git strategy. Defaults to `fetch`",
                    "type": "string",
                    "enum": [
                        "fetch",
                        "clone"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[build_timeout]",
                    "description": "Build timeout",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[auto_cancel_pending_pipelines]",
                    "description": "Auto-cancel pending pipelines",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[ci_config_path]",
                    "description": "The path to CI config file. Defaults to `.gitlab-ci.yml`",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[service_desk_enabled]",
                    "description": "Disable or enable the service desk",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[issues_enabled]",
                    "description": "Flag indication if the issue tracker is enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[merge_requests_enabled]",
                    "description": "Flag indication if merge requests are enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[wiki_enabled]",
                    "description": "Flag indication if the wiki is enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[jobs_enabled]",
                    "description": "Flag indication if jobs are enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[snippets_enabled]",
                    "description": "Flag indication if snippets are enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[issues_access_level]",
                    "description": "Issues access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[repository_access_level]",
                    "description": "Repository access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[merge_requests_access_level]",
                    "description": "Merge requests access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[forking_access_level]",
                    "description": "Forks access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[wiki_access_level]",
                    "description": "Wiki access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[builds_access_level]",
                    "description": "Builds access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[snippets_access_level]",
                    "description": "Snippets access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[pages_access_level]",
                    "description": "Pages access level. One of `disabled`, `private`, `enabled` or `public`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[analytics_access_level]",
                    "description": "Analytics access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_registry_access_level]",
                    "description": "Controls visibility of the container registry. One of `disabled`, `private` or `enabled`. `private` will make the container registry accessible only to project members (reporter role and above). `enabled` will make the container registry accessible to everyone who has access to the project. `disabled` will disable the container registry",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[security_and_compliance_access_level]",
                    "description": "Security and compliance access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[releases_access_level]",
                    "description": "Releases access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[environments_access_level]",
                    "description": "Environments access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[feature_flags_access_level]",
                    "description": "Feature flags access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[infrastructure_access_level]",
                    "description": "Infrastructure access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[monitor_access_level]",
                    "description": "Monitor access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[model_experiments_access_level]",
                    "description": "Model experiments access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[model_registry_access_level]",
                    "description": "Model registry access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[emails_disabled]",
                    "description": "Deprecated: Use emails_enabled instead.",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[emails_enabled]",
                    "description": "Enable email notifications",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[show_default_award_emojis]",
                    "description": "Show default award emojis",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[show_diff_preview_in_email]",
                    "description": "Include the code diff preview in merge request notification emails",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[warn_about_potentially_unwanted_characters]",
                    "description": "Warn about potentially unwanted characters",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[enforce_auth_checks_on_uploads]",
                    "description": "Enforce auth check on uploads",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[shared_runners_enabled]",
                    "description": "Flag indication if shared runners are enabled for that project",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[group_runners_enabled]",
                    "description": "Flag indication if group runners are enabled for that project",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[resolve_outdated_diff_discussions]",
                    "description": "Automatically resolve merge request diff threads on lines changed with a push",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[remove_source_branch_after_merge]",
                    "description": "Remove the source branch by default after merge",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_registry_enabled]",
                    "description": "Deprecated: Use :container_registry_access_level instead. Flag indication if the container registry is enabled for that project",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][cadence]",
                    "description": "Container expiration policy cadence for recurring job",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][keep_n]",
                    "description": "Container expiration policy number of images to keep",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][older_than]",
                    "description": "Container expiration policy remove images older than value",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][name_regex]",
                    "description": "Container expiration policy regex for image removal",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][name_regex_keep]",
                    "description": "Container expiration policy regex for image retention",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][enabled]",
                    "description": "Flag indication if container expiration policy is enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[lfs_enabled]",
                    "description": "Flag indication if Git LFS is enabled for that project",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[visibility]",
                    "description": "The visibility of the project.",
                    "type": "string",
                    "enum": [
                        "private",
                        "internal",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[public_builds]",
                    "description": "Deprecated: Use public_jobs instead.",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[public_jobs]",
                    "description": "Perform public builds",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[request_access_enabled]",
                    "description": "Allow users to request member access",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[only_allow_merge_if_pipeline_succeeds]",
                    "description": "Only allow to merge if builds succeed",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[allow_merge_on_skipped_pipeline]",
                    "description": "Allow to merge if pipeline is skipped",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[only_allow_merge_if_all_discussions_are_resolved]",
                    "description": "Only allow to merge if all threads are resolved",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[tag_list]",
                    "description": "Deprecated: Use :topics instead",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[topics]",
                    "description": "The list of topics for a project",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[avatar]",
                    "description": "Avatar image for project",
                    "type": "file",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[printing_merge_request_link_enabled]",
                    "description": "Show link to create/view merge request when pushing from the command line",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[merge_method]",
                    "description": "The merge method used when merging merge requests",
                    "type": "string",
                    "enum": [
                        "ff",
                        "rebase_merge",
                        "merge"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[suggestion_commit_message]",
                    "description": "The commit message used to apply merge request suggestions",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[merge_commit_template]",
                    "description": "Template used to create merge commit message",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[squash_commit_template]",
                    "description": "Template used to create squash commit message",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[issue_branch_template]",
                    "description": "Template used to create a branch from an issue",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[auto_devops_enabled]",
                    "description": "Flag indication if Auto DevOps is enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[auto_devops_deploy_strategy]",
                    "description": "Auto Deploy strategy",
                    "type": "string",
                    "enum": [
                        "continuous",
                        "manual",
                        "timed_incremental"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[autoclose_referenced_issues]",
                    "description": "Flag indication if referenced issues auto-closing is enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[repository_storage]",
                    "description": "Which storage shard the repository is on. Available only to admins",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[packages_enabled]",
                    "description": "Enable project packages feature",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[squash_option]",
                    "description": "Squash default for project. One of `never`, `always`, `default_on`, or `default_off`.",
                    "type": "string",
                    "enum": [
                        "never",
                        "always",
                        "default_on",
                        "default_off"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[mr_default_target_self]",
                    "description": "Merge requests of this forked project targets itself by default",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[merge_request_title_regex]",
                    "description": "The regex the Merge Request must adhere to",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[only_allow_merge_if_all_status_checks_passed]",
                    "description": "Blocks merge requests from merging unless all status checks have passed",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[approvals_before_merge]",
                    "description": "How many approvers should approve merge request by default",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[mirror]",
                    "description": "[Deprecated] Enables pull mirroring in a project",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[mirror_trigger_builds]",
                    "description": "[Deprecated] Pull mirroring triggers builds",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[external_authorization_classification_label]",
                    "description": "The classification label for the project",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[requirements_access_level]",
                    "description": "Requirements feature access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[prevent_merge_without_jira_issue]",
                    "description": "Require an associated issue from Jira",
                    "type": "boolean",
                    "required": false
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a new project import using a remote object storage path",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectImportStatus"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                },
                "429": {
                    "description": "Too many requests"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.2.",
            "tags": [
                "project_import"
            ],
            "operationId": "postApiV4ProjectsRemoteImport"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/import-relation/authorize",
            "method": "post",
            "parameters": [],
            "responses": {
                "201": {
                    "description": "Workhorse authorize the project relation import upload"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.11",
            "tags": [
                "project_import"
            ],
            "operationId": "postApiV4ProjectsImportRelationAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/import-relation",
            "method": "post",
            "parameters": [
                {
                    "in": "formData",
                    "name": "path",
                    "description": "The project path and name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "file",
                    "description": "The project export file from which to extract the relation.",
                    "type": "file",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "relation",
                    "description": "The relation to import. Must be one of issues, merge_requests, ci_pipelines, or milestones.",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "file.path",
                    "description": "Path to locally stored body (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.name",
                    "description": "Real filename as sent in Content-Disposition (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.type",
                    "description": "Real content type as send in Content-Type (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.size",
                    "description": "Real size of file (generated by Workhorse)",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.md5",
                    "description": "MD5 checksum of the file (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.sha1",
                    "description": "SHA1 checksum of the file (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.sha256",
                    "description": "SHA256 checksum of the file (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.etag",
                    "description": "Etag of the file (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.remote_id",
                    "description": "Remote_id of the file (generated by Workhorse)",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "file.remote_url",
                    "description": "Remote_url of the file (generated by Workhorse)",
                    "type": "string",
                    "required": false
                }
            ],
            "responses": {
                "201": {
                    "description": "Re-import a relation into a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_RelationImportTracker"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.11.",
            "tags": [
                "project_import"
            ],
            "operationId": "postApiV4ProjectsImportRelation"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/remote-import-s3",
            "method": "post",
            "parameters": [
                {
                    "in": "formData",
                    "name": "region",
                    "description": "AWS region",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "bucket_name",
                    "description": "Bucket name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "file_key",
                    "description": "File key",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "access_key_id",
                    "description": "Access key id",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "secret_access_key",
                    "description": "Secret access key",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "path",
                    "description": "The new project path and name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "name",
                    "description": "The name of the project to be imported. Defaults to the path of the project if not provided.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "namespace",
                    "description": "The ID or name of the namespace that the project will be imported into. Defaults to the current user's namespace.",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "overwrite",
                    "description": "If there is a project in the same namespace and with the same name overwrite it",
                    "type": "boolean",
                    "default": false,
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[description]",
                    "description": "The description of the project",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[build_git_strategy]",
                    "description": "The Git strategy. Defaults to `fetch`",
                    "type": "string",
                    "enum": [
                        "fetch",
                        "clone"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[build_timeout]",
                    "description": "Build timeout",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[auto_cancel_pending_pipelines]",
                    "description": "Auto-cancel pending pipelines",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[ci_config_path]",
                    "description": "The path to CI config file. Defaults to `.gitlab-ci.yml`",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[service_desk_enabled]",
                    "description": "Disable or enable the service desk",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[issues_enabled]",
                    "description": "Flag indication if the issue tracker is enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[merge_requests_enabled]",
                    "description": "Flag indication if merge requests are enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[wiki_enabled]",
                    "description": "Flag indication if the wiki is enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[jobs_enabled]",
                    "description": "Flag indication if jobs are enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[snippets_enabled]",
                    "description": "Flag indication if snippets are enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[issues_access_level]",
                    "description": "Issues access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[repository_access_level]",
                    "description": "Repository access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[merge_requests_access_level]",
                    "description": "Merge requests access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[forking_access_level]",
                    "description": "Forks access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[wiki_access_level]",
                    "description": "Wiki access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[builds_access_level]",
                    "description": "Builds access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[snippets_access_level]",
                    "description": "Snippets access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[pages_access_level]",
                    "description": "Pages access level. One of `disabled`, `private`, `enabled` or `public`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[analytics_access_level]",
                    "description": "Analytics access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_registry_access_level]",
                    "description": "Controls visibility of the container registry. One of `disabled`, `private` or `enabled`. `private` will make the container registry accessible only to project members (reporter role and above). `enabled` will make the container registry accessible to everyone who has access to the project. `disabled` will disable the container registry",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[security_and_compliance_access_level]",
                    "description": "Security and compliance access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[releases_access_level]",
                    "description": "Releases access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[environments_access_level]",
                    "description": "Environments access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[feature_flags_access_level]",
                    "description": "Feature flags access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[infrastructure_access_level]",
                    "description": "Infrastructure access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[monitor_access_level]",
                    "description": "Monitor access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[model_experiments_access_level]",
                    "description": "Model experiments access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[model_registry_access_level]",
                    "description": "Model registry access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[emails_disabled]",
                    "description": "Deprecated: Use emails_enabled instead.",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[emails_enabled]",
                    "description": "Enable email notifications",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[show_default_award_emojis]",
                    "description": "Show default award emojis",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[show_diff_preview_in_email]",
                    "description": "Include the code diff preview in merge request notification emails",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[warn_about_potentially_unwanted_characters]",
                    "description": "Warn about potentially unwanted characters",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[enforce_auth_checks_on_uploads]",
                    "description": "Enforce auth check on uploads",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[shared_runners_enabled]",
                    "description": "Flag indication if shared runners are enabled for that project",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[group_runners_enabled]",
                    "description": "Flag indication if group runners are enabled for that project",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[resolve_outdated_diff_discussions]",
                    "description": "Automatically resolve merge request diff threads on lines changed with a push",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[remove_source_branch_after_merge]",
                    "description": "Remove the source branch by default after merge",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_registry_enabled]",
                    "description": "Deprecated: Use :container_registry_access_level instead. Flag indication if the container registry is enabled for that project",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][cadence]",
                    "description": "Container expiration policy cadence for recurring job",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][keep_n]",
                    "description": "Container expiration policy number of images to keep",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][older_than]",
                    "description": "Container expiration policy remove images older than value",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][name_regex]",
                    "description": "Container expiration policy regex for image removal",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][name_regex_keep]",
                    "description": "Container expiration policy regex for image retention",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[container_expiration_policy_attributes][enabled]",
                    "description": "Flag indication if container expiration policy is enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[lfs_enabled]",
                    "description": "Flag indication if Git LFS is enabled for that project",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[visibility]",
                    "description": "The visibility of the project.",
                    "type": "string",
                    "enum": [
                        "private",
                        "internal",
                        "public"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[public_builds]",
                    "description": "Deprecated: Use public_jobs instead.",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[public_jobs]",
                    "description": "Perform public builds",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[request_access_enabled]",
                    "description": "Allow users to request member access",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[only_allow_merge_if_pipeline_succeeds]",
                    "description": "Only allow to merge if builds succeed",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[allow_merge_on_skipped_pipeline]",
                    "description": "Allow to merge if pipeline is skipped",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[only_allow_merge_if_all_discussions_are_resolved]",
                    "description": "Only allow to merge if all threads are resolved",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[tag_list]",
                    "description": "Deprecated: Use :topics instead",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[topics]",
                    "description": "The list of topics for a project",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[avatar]",
                    "description": "Avatar image for project",
                    "type": "file",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[printing_merge_request_link_enabled]",
                    "description": "Show link to create/view merge request when pushing from the command line",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[merge_method]",
                    "description": "The merge method used when merging merge requests",
                    "type": "string",
                    "enum": [
                        "ff",
                        "rebase_merge",
                        "merge"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[suggestion_commit_message]",
                    "description": "The commit message used to apply merge request suggestions",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[merge_commit_template]",
                    "description": "Template used to create merge commit message",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[squash_commit_template]",
                    "description": "Template used to create squash commit message",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[issue_branch_template]",
                    "description": "Template used to create a branch from an issue",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[auto_devops_enabled]",
                    "description": "Flag indication if Auto DevOps is enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[auto_devops_deploy_strategy]",
                    "description": "Auto Deploy strategy",
                    "type": "string",
                    "enum": [
                        "continuous",
                        "manual",
                        "timed_incremental"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[autoclose_referenced_issues]",
                    "description": "Flag indication if referenced issues auto-closing is enabled",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[repository_storage]",
                    "description": "Which storage shard the repository is on. Available only to admins",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[packages_enabled]",
                    "description": "Enable project packages feature",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[squash_option]",
                    "description": "Squash default for project. One of `never`, `always`, `default_on`, or `default_off`.",
                    "type": "string",
                    "enum": [
                        "never",
                        "always",
                        "default_on",
                        "default_off"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[mr_default_target_self]",
                    "description": "Merge requests of this forked project targets itself by default",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[merge_request_title_regex]",
                    "description": "The regex the Merge Request must adhere to",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[only_allow_merge_if_all_status_checks_passed]",
                    "description": "Blocks merge requests from merging unless all status checks have passed",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[approvals_before_merge]",
                    "description": "How many approvers should approve merge request by default",
                    "type": "integer",
                    "format": "int32",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[mirror]",
                    "description": "[Deprecated] Enables pull mirroring in a project",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[mirror_trigger_builds]",
                    "description": "[Deprecated] Pull mirroring triggers builds",
                    "type": "boolean",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[external_authorization_classification_label]",
                    "description": "The classification label for the project",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[requirements_access_level]",
                    "description": "Requirements feature access level. One of `disabled`, `private` or `enabled`",
                    "type": "string",
                    "enum": [
                        "disabled",
                        "private",
                        "enabled"
                    ],
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "override_params[prevent_merge_without_jira_issue]",
                    "description": "Require an associated issue from Jira",
                    "type": "boolean",
                    "required": false
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a new project import using a file from AWS S3",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectImportStatus"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                },
                "429": {
                    "description": "Too many requests"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.9.",
            "tags": [
                "project_import"
            ],
            "operationId": "postApiV4ProjectsRemoteImportS3"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/job_token_scope",
            "method": "patch",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "patchApiV4ProjectsIdJobTokenScope",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enabled": {
                                "type": "boolean",
                                "description": "Indicates CI/CD job tokens generated in other projects have restricted access to this project."
                            }
                        },
                        "required": [
                            "enabled"
                        ],
                        "description": "Patch CI_JOB_TOKEN access settings."
                    }
                }
            ],
            "responses": {
                "204": {
                    "description": "Patch CI_JOB_TOKEN access settings."
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Patch CI_JOB_TOKEN access settings.",
            "tags": [
                "projects_job_token_scope"
            ],
            "operationId": "patchApiV4ProjectsIdJobTokenScope"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/job_token_scope/allowlist",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "ID of user project",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 1
                },
                {
                    "name": "postApiV4ProjectsIdJobTokenScopeAllowlist",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "target_project_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "ID of target project",
                                "example": 2
                            }
                        },
                        "required": [
                            "target_project_id"
                        ],
                        "description": "Add target project to allowlist."
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add target project to allowlist.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_BasicProjectDetails"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Add target project to allowlist.",
            "tags": [
                "projects_job_token_scope"
            ],
            "operationId": "postApiV4ProjectsIdJobTokenScopeAllowlist"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/job_token_scope/groups_allowlist",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "ID of user project",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 1
                },
                {
                    "name": "postApiV4ProjectsIdJobTokenScopeGroupsAllowlist",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "target_group_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "ID of target group",
                                "example": 2
                            }
                        },
                        "required": [
                            "target_group_id"
                        ],
                        "description": "Add target group to allowlist."
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add target group to allowlist.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_BasicGroupDetails"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Add target group to allowlist.",
            "tags": [
                "projects_job_token_scope"
            ],
            "operationId": "postApiV4ProjectsIdJobTokenScopeGroupsAllowlist"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/job_token_scope/groups_allowlist/{target_group_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "ID of user project",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 1
                },
                {
                    "in": "path",
                    "name": "target_group_id",
                    "description": "ID of the group to be removed from the allowlist",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 2
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete target group from allowlist."
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete target group from allowlist.",
            "tags": [
                "projects_job_token_scope"
            ],
            "operationId": "deleteApiV4ProjectsIdJobTokenScopeGroupsAllowlistTargetGroupId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/job_token_scope/allowlist/{target_project_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "ID of user project",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 1
                },
                {
                    "in": "path",
                    "name": "target_project_id",
                    "description": "ID of the project to be removed from the allowlist",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 2
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete project from allowlist."
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete project from allowlist.",
            "tags": [
                "projects_job_token_scope"
            ],
            "operationId": "deleteApiV4ProjectsIdJobTokenScopeAllowlistTargetProjectId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/{package_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_id",
                    "description": "The ID of a package",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a project package"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.9",
            "tags": [
                "project_packages"
            ],
            "operationId": "deleteApiV4ProjectsIdPackagesPackageId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/protection/rules",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdPackagesProtectionRules",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "package_name_pattern": {
                                "type": "string",
                                "description": "Package name protected by the rule. For example @my-scope/my-package-*.\n            Wildcard character * allowed."
                            },
                            "package_type": {
                                "type": "string",
                                "description": "Package type protected by the rule. For example npm.",
                                "enum": [
                                    "conan",
                                    "maven",
                                    "npm",
                                    "nuget",
                                    "pypi"
                                ]
                            },
                            "minimum_access_level_for_delete": {
                                "type": "string",
                                "description": "Minimum GitLab access level required to delete a package. Valid values include `null`, `owner` or `admin`. If the value is `null`, the default minimum access level is `maintainer`. Must be provided when `minimum_access_level_for_push` is not set. Behind a feature flag named `packages_protected_packages_delete`. Disabled by default.",
                                "enum": [
                                    "owner",
                                    "admin"
                                ]
                            },
                            "minimum_access_level_for_push": {
                                "type": "string",
                                "description": "Minimum GitLab access level required to push a package. Valid values include `null`, `maintainer`, `owner` or `admin`. If the value is `null`, the default minimum access level is `developer`. Must be provided when `minimum_access_level_for_delete` is not set.",
                                "enum": [
                                    "maintainer",
                                    "owner",
                                    "admin"
                                ]
                            }
                        },
                        "required": [
                            "package_name_pattern",
                            "package_type"
                        ],
                        "description": "Create a package protection rule for a project"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a package protection rule for a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Projects_Packages_Protection_Rule"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                },
                "422": {
                    "description": "Unprocessable Entity"
                }
            },
            "request_body_parameters": {},
            "description": "Create a package protection rule for a project",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdPackagesProtectionRules"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/protection/rules/{package_protection_rule_id}",
            "method": "patch",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_protection_rule_id",
                    "description": "The ID of the package protection rule",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "patchApiV4ProjectsIdPackagesProtectionRulesPackageProtectionRuleId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "package_name_pattern": {
                                "type": "string",
                                "description": "Package name protected by the rule. For example @my-scope/my-package-*.\n              Wildcard character * allowed."
                            },
                            "package_type": {
                                "type": "string",
                                "description": "Package type protected by the rule. For example npm.",
                                "enum": [
                                    "conan",
                                    "maven",
                                    "npm",
                                    "nuget",
                                    "pypi"
                                ]
                            },
                            "minimum_access_level_for_delete": {
                                "type": "string",
                                "description": "Minimum GitLab access level required to delete a package. Valid values include `null`, `owner` or `admin`. If the value is `null`, the default minimum access level is `maintainer`. Must be provided when `minimum_access_level_for_push` is not set. Behind a feature flag named `packages_protected_packages_delete`. Disabled by default.",
                                "enum": [
                                    "owner",
                                    "admin"
                                ]
                            },
                            "minimum_access_level_for_push": {
                                "type": "string",
                                "description": "Minimum GitLab access level required to push a package. Valid values include `null`, `maintainer`, `owner` or `admin`. If the value is `null`, the default minimum access level is `developer`. Must be provided when `minimum_access_level_for_delete` is not set.",
                                "enum": [
                                    "maintainer",
                                    "owner",
                                    "admin"
                                ]
                            }
                        },
                        "description": "Update a package protection rule for a project"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a package protection rule for a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Projects_Packages_Protection_Rule"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                },
                "422": {
                    "description": "Unprocessable Entity"
                }
            },
            "request_body_parameters": {},
            "description": "Update a package protection rule for a project",
            "tags": [
                "projects"
            ],
            "operationId": "patchApiV4ProjectsIdPackagesProtectionRulesPackageProtectionRuleId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/protection/rules/{package_protection_rule_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "package_protection_rule_id",
                    "description": "The ID of the package protection rule",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "204 No Content"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete package protection rule",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdPackagesProtectionRulesPackageProtectionRuleId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdSnippets",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string",
                                "description": "The title of the snippet"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of a snippet"
                            },
                            "visibility": {
                                "type": "string",
                                "description": "The visibility of the snippet",
                                "enum": [
                                    "private",
                                    "internal",
                                    "public"
                                ]
                            },
                            "files": {
                                "type": "array",
                                "description": "An array of files",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "file_path": {
                                            "type": "string",
                                            "description": "The path of a snippet file"
                                        },
                                        "content": {
                                            "type": "string",
                                            "description": "The content of a snippet file"
                                        }
                                    },
                                    "required": [
                                        "file_path",
                                        "content"
                                    ]
                                }
                            },
                            "content": {
                                "type": "string",
                                "description": "The content of a snippet"
                            },
                            "file_name": {
                                "type": "string",
                                "description": "The name of a snippet file"
                            }
                        },
                        "required": [
                            "title",
                            "visibility",
                            "file_name"
                        ],
                        "description": "Create a new project snippet"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a new project snippet",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectSnippet"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Create a new project snippet",
            "tags": [
                "project_snippets"
            ],
            "operationId": "postApiV4ProjectsIdSnippets"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets/{snippet_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "snippet_id",
                    "description": "The ID of a project snippet",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdSnippetsSnippetId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "string",
                                "description": "The content of the snippet"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of a snippet"
                            },
                            "file_name": {
                                "type": "string",
                                "description": "The file name of the snippet"
                            },
                            "title": {
                                "type": "string",
                                "description": "The title of the snippet"
                            },
                            "visibility": {
                                "type": "string",
                                "description": "The visibility of the snippet",
                                "enum": [
                                    "private",
                                    "internal",
                                    "public"
                                ]
                            },
                            "files": {
                                "type": "array",
                                "description": "An array of files to update",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "action": {
                                            "type": "string",
                                            "description": "The type of action to perform on the file, must be one of: create, update, delete, move",
                                            "enum": [
                                                "create",
                                                "update",
                                                "delete",
                                                "move"
                                            ]
                                        },
                                        "content": {
                                            "type": "string",
                                            "description": "The content of a snippet"
                                        },
                                        "file_path": {
                                            "type": "string",
                                            "description": "The file path of a snippet file"
                                        },
                                        "previous_path": {
                                            "type": "string",
                                            "description": "The previous path of a snippet file"
                                        }
                                    },
                                    "required": [
                                        "action"
                                    ]
                                }
                            }
                        },
                        "description": "Update an existing project snippet"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update an existing project snippet",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectSnippet"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Update an existing project snippet",
            "tags": [
                "project_snippets"
            ],
            "operationId": "putApiV4ProjectsIdSnippetsSnippetId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/snippets/{snippet_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "snippet_id",
                    "description": "The ID of a project snippet",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a project snippet"
                },
                "400": {
                    "description": "Validation error"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a project snippet",
            "tags": [
                "project_snippets"
            ],
            "operationId": "deleteApiV4ProjectsIdSnippetsSnippetId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/custom_attributes/{key}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the custom attribute",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdCustomAttributesKey",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "The value of the custom attribute"
                            }
                        },
                        "required": [
                            "value"
                        ],
                        "description": "Set a custom attribute on a project"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Set a custom attribute on a project"
                }
            },
            "request_body_parameters": {},
            "description": "Set a custom attribute on a project",
            "tags": [
                "projects"
            ],
            "operationId": "putApiV4ProjectsIdCustomAttributesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/custom_attributes/{key}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the custom attribute",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a custom attribute on a project"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a custom attribute on a project",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdCustomAttributesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/restore",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Restore a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Project"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Restore a project",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdRestore"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4Projects",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the project",
                                "example": "New Project"
                            },
                            "path": {
                                "type": "string",
                                "description": "The path of the repository",
                                "example": "new_project"
                            },
                            "default_branch": {
                                "type": "string",
                                "description": "The default branch of the project",
                                "example": "main"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the project"
                            },
                            "build_git_strategy": {
                                "type": "string",
                                "description": "The Git strategy. Defaults to `fetch`",
                                "enum": [
                                    "fetch",
                                    "clone"
                                ]
                            },
                            "build_timeout": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Build timeout"
                            },
                            "auto_cancel_pending_pipelines": {
                                "type": "string",
                                "description": "Auto-cancel pending pipelines",
                                "enum": [
                                    "disabled",
                                    "enabled"
                                ]
                            },
                            "ci_config_path": {
                                "type": "string",
                                "description": "The path to CI config file. Defaults to `.gitlab-ci.yml`"
                            },
                            "service_desk_enabled": {
                                "type": "boolean",
                                "description": "Disable or enable the service desk"
                            },
                            "issues_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if the issue tracker is enabled"
                            },
                            "merge_requests_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if merge requests are enabled"
                            },
                            "wiki_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if the wiki is enabled"
                            },
                            "jobs_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if jobs are enabled"
                            },
                            "snippets_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if snippets are enabled"
                            },
                            "issues_access_level": {
                                "type": "string",
                                "description": "Issues access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "repository_access_level": {
                                "type": "string",
                                "description": "Repository access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "merge_requests_access_level": {
                                "type": "string",
                                "description": "Merge requests access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "forking_access_level": {
                                "type": "string",
                                "description": "Forks access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "wiki_access_level": {
                                "type": "string",
                                "description": "Wiki access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "builds_access_level": {
                                "type": "string",
                                "description": "Builds access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "snippets_access_level": {
                                "type": "string",
                                "description": "Snippets access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "pages_access_level": {
                                "type": "string",
                                "description": "Pages access level. One of `disabled`, `private`, `enabled` or `public`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled",
                                    "public"
                                ]
                            },
                            "analytics_access_level": {
                                "type": "string",
                                "description": "Analytics access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "container_registry_access_level": {
                                "type": "string",
                                "description": "Controls visibility of the container registry. One of `disabled`, `private` or `enabled`. `private` will make the container registry accessible only to project members (reporter role and above). `enabled` will make the container registry accessible to everyone who has access to the project. `disabled` will disable the container registry",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "security_and_compliance_access_level": {
                                "type": "string",
                                "description": "Security and compliance access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "releases_access_level": {
                                "type": "string",
                                "description": "Releases access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "environments_access_level": {
                                "type": "string",
                                "description": "Environments access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "feature_flags_access_level": {
                                "type": "string",
                                "description": "Feature flags access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "infrastructure_access_level": {
                                "type": "string",
                                "description": "Infrastructure access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "monitor_access_level": {
                                "type": "string",
                                "description": "Monitor access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "model_experiments_access_level": {
                                "type": "string",
                                "description": "Model experiments access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "model_registry_access_level": {
                                "type": "string",
                                "description": "Model registry access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "emails_disabled": {
                                "type": "boolean",
                                "description": "Deprecated: Use emails_enabled instead."
                            },
                            "emails_enabled": {
                                "type": "boolean",
                                "description": "Enable email notifications"
                            },
                            "show_default_award_emojis": {
                                "type": "boolean",
                                "description": "Show default award emojis"
                            },
                            "show_diff_preview_in_email": {
                                "type": "boolean",
                                "description": "Include the code diff preview in merge request notification emails"
                            },
                            "warn_about_potentially_unwanted_characters": {
                                "type": "boolean",
                                "description": "Warn about potentially unwanted characters"
                            },
                            "enforce_auth_checks_on_uploads": {
                                "type": "boolean",
                                "description": "Enforce auth check on uploads"
                            },
                            "shared_runners_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if shared runners are enabled for that project"
                            },
                            "group_runners_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if group runners are enabled for that project"
                            },
                            "resolve_outdated_diff_discussions": {
                                "type": "boolean",
                                "description": "Automatically resolve merge request diff threads on lines changed with a push"
                            },
                            "remove_source_branch_after_merge": {
                                "type": "boolean",
                                "description": "Remove the source branch by default after merge"
                            },
                            "container_registry_enabled": {
                                "type": "boolean",
                                "description": "Deprecated: Use :container_registry_access_level instead. Flag indication if the container registry is enabled for that project"
                            },
                            "container_expiration_policy_attributes": {
                                "type": "object",
                                "properties": {
                                    "cadence": {
                                        "type": "string",
                                        "description": "Container expiration policy cadence for recurring job"
                                    },
                                    "keep_n": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Container expiration policy number of images to keep"
                                    },
                                    "older_than": {
                                        "type": "string",
                                        "description": "Container expiration policy remove images older than value"
                                    },
                                    "name_regex": {
                                        "type": "string",
                                        "description": "Container expiration policy regex for image removal"
                                    },
                                    "name_regex_keep": {
                                        "type": "string",
                                        "description": "Container expiration policy regex for image retention"
                                    },
                                    "enabled": {
                                        "type": "boolean",
                                        "description": "Flag indication if container expiration policy is enabled"
                                    }
                                }
                            },
                            "lfs_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if Git LFS is enabled for that project"
                            },
                            "visibility": {
                                "type": "string",
                                "description": "The visibility of the project.",
                                "enum": [
                                    "private",
                                    "internal",
                                    "public"
                                ]
                            },
                            "public_builds": {
                                "type": "boolean",
                                "description": "Deprecated: Use public_jobs instead."
                            },
                            "public_jobs": {
                                "type": "boolean",
                                "description": "Perform public builds"
                            },
                            "request_access_enabled": {
                                "type": "boolean",
                                "description": "Allow users to request member access"
                            },
                            "only_allow_merge_if_pipeline_succeeds": {
                                "type": "boolean",
                                "description": "Only allow to merge if builds succeed"
                            },
                            "allow_merge_on_skipped_pipeline": {
                                "type": "boolean",
                                "description": "Allow to merge if pipeline is skipped"
                            },
                            "only_allow_merge_if_all_discussions_are_resolved": {
                                "type": "boolean",
                                "description": "Only allow to merge if all threads are resolved"
                            },
                            "tag_list": {
                                "type": "array",
                                "description": "Deprecated: Use :topics instead",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "topics": {
                                "type": "array",
                                "description": "The list of topics for a project",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "avatar": {
                                "type": "file",
                                "description": "Avatar image for project"
                            },
                            "printing_merge_request_link_enabled": {
                                "type": "boolean",
                                "description": "Show link to create/view merge request when pushing from the command line"
                            },
                            "merge_method": {
                                "type": "string",
                                "description": "The merge method used when merging merge requests",
                                "enum": [
                                    "ff",
                                    "rebase_merge",
                                    "merge"
                                ]
                            },
                            "suggestion_commit_message": {
                                "type": "string",
                                "description": "The commit message used to apply merge request suggestions"
                            },
                            "merge_commit_template": {
                                "type": "string",
                                "description": "Template used to create merge commit message"
                            },
                            "squash_commit_template": {
                                "type": "string",
                                "description": "Template used to create squash commit message"
                            },
                            "issue_branch_template": {
                                "type": "string",
                                "description": "Template used to create a branch from an issue"
                            },
                            "auto_devops_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if Auto DevOps is enabled"
                            },
                            "auto_devops_deploy_strategy": {
                                "type": "string",
                                "description": "Auto Deploy strategy",
                                "enum": [
                                    "continuous",
                                    "manual",
                                    "timed_incremental"
                                ]
                            },
                            "autoclose_referenced_issues": {
                                "type": "boolean",
                                "description": "Flag indication if referenced issues auto-closing is enabled"
                            },
                            "repository_storage": {
                                "type": "string",
                                "description": "Which storage shard the repository is on. Available only to admins"
                            },
                            "packages_enabled": {
                                "type": "boolean",
                                "description": "Enable project packages feature"
                            },
                            "squash_option": {
                                "type": "string",
                                "description": "Squash default for project. One of `never`, `always`, `default_on`, or `default_off`.",
                                "enum": [
                                    "never",
                                    "always",
                                    "default_on",
                                    "default_off"
                                ]
                            },
                            "mr_default_target_self": {
                                "type": "boolean",
                                "description": "Merge requests of this forked project targets itself by default"
                            },
                            "merge_request_title_regex": {
                                "type": "string",
                                "description": "The regex the Merge Request must adhere to"
                            },
                            "only_allow_merge_if_all_status_checks_passed": {
                                "type": "boolean",
                                "description": "Blocks merge requests from merging unless all status checks have passed"
                            },
                            "approvals_before_merge": {
                                "type": "integer",
                                "format": "int32",
                                "description": "How many approvers should approve merge request by default"
                            },
                            "mirror": {
                                "type": "boolean",
                                "description": "[Deprecated] Enables pull mirroring in a project"
                            },
                            "mirror_trigger_builds": {
                                "type": "boolean",
                                "description": "[Deprecated] Pull mirroring triggers builds"
                            },
                            "external_authorization_classification_label": {
                                "type": "string",
                                "description": "The classification label for the project"
                            },
                            "requirements_access_level": {
                                "type": "string",
                                "description": "Requirements feature access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "prevent_merge_without_jira_issue": {
                                "type": "boolean",
                                "description": "Require an associated issue from Jira"
                            },
                            "repository_object_format": {
                                "type": "string",
                                "description": "The object format of the project repository",
                                "enum": [
                                    "sha1",
                                    "sha256"
                                ]
                            },
                            "initialize_with_readme": {
                                "type": "boolean",
                                "description": "Initialize a project with a README.md"
                            },
                            "use_custom_template": {
                                "type": "boolean",
                                "description": "Use custom template"
                            },
                            "group_with_project_templates_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Group ID that serves as the template source"
                            },
                            "namespace_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Namespace ID for the new project. Default to the user namespace."
                            },
                            "import_url": {
                                "type": "string",
                                "description": "URL from which the project is imported"
                            },
                            "template_name": {
                                "type": "string",
                                "description": "Name of template from which to create project"
                            },
                            "template_project_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Project ID of template from which to create project"
                            }
                        },
                        "description": "Create new project"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create new project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Project"
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                },
                "400": {
                    "description": "Bad request"
                }
            },
            "request_body_parameters": {},
            "description": "Create new project",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4Projects"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/user/{user_id}",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "user_id",
                    "description": "The ID of a user",
                    "type": "integer",
                    "format": "int32",
                    "required": true,
                    "example": 1
                },
                {
                    "name": "postApiV4ProjectsUserUserId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the project",
                                "example": "New Project"
                            },
                            "path": {
                                "type": "string",
                                "description": "The path of the repository",
                                "example": "new_project"
                            },
                            "default_branch": {
                                "type": "string",
                                "description": "The default branch of the project",
                                "example": "main"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the project"
                            },
                            "build_git_strategy": {
                                "type": "string",
                                "description": "The Git strategy. Defaults to `fetch`",
                                "enum": [
                                    "fetch",
                                    "clone"
                                ]
                            },
                            "build_timeout": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Build timeout"
                            },
                            "auto_cancel_pending_pipelines": {
                                "type": "string",
                                "description": "Auto-cancel pending pipelines",
                                "enum": [
                                    "disabled",
                                    "enabled"
                                ]
                            },
                            "ci_config_path": {
                                "type": "string",
                                "description": "The path to CI config file. Defaults to `.gitlab-ci.yml`"
                            },
                            "service_desk_enabled": {
                                "type": "boolean",
                                "description": "Disable or enable the service desk"
                            },
                            "issues_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if the issue tracker is enabled"
                            },
                            "merge_requests_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if merge requests are enabled"
                            },
                            "wiki_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if the wiki is enabled"
                            },
                            "jobs_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if jobs are enabled"
                            },
                            "snippets_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if snippets are enabled"
                            },
                            "issues_access_level": {
                                "type": "string",
                                "description": "Issues access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "repository_access_level": {
                                "type": "string",
                                "description": "Repository access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "merge_requests_access_level": {
                                "type": "string",
                                "description": "Merge requests access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "forking_access_level": {
                                "type": "string",
                                "description": "Forks access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "wiki_access_level": {
                                "type": "string",
                                "description": "Wiki access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "builds_access_level": {
                                "type": "string",
                                "description": "Builds access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "snippets_access_level": {
                                "type": "string",
                                "description": "Snippets access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "pages_access_level": {
                                "type": "string",
                                "description": "Pages access level. One of `disabled`, `private`, `enabled` or `public`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled",
                                    "public"
                                ]
                            },
                            "analytics_access_level": {
                                "type": "string",
                                "description": "Analytics access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "container_registry_access_level": {
                                "type": "string",
                                "description": "Controls visibility of the container registry. One of `disabled`, `private` or `enabled`. `private` will make the container registry accessible only to project members (reporter role and above). `enabled` will make the container registry accessible to everyone who has access to the project. `disabled` will disable the container registry",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "security_and_compliance_access_level": {
                                "type": "string",
                                "description": "Security and compliance access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "releases_access_level": {
                                "type": "string",
                                "description": "Releases access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "environments_access_level": {
                                "type": "string",
                                "description": "Environments access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "feature_flags_access_level": {
                                "type": "string",
                                "description": "Feature flags access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "infrastructure_access_level": {
                                "type": "string",
                                "description": "Infrastructure access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "monitor_access_level": {
                                "type": "string",
                                "description": "Monitor access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "model_experiments_access_level": {
                                "type": "string",
                                "description": "Model experiments access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "model_registry_access_level": {
                                "type": "string",
                                "description": "Model registry access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "emails_disabled": {
                                "type": "boolean",
                                "description": "Deprecated: Use emails_enabled instead."
                            },
                            "emails_enabled": {
                                "type": "boolean",
                                "description": "Enable email notifications"
                            },
                            "show_default_award_emojis": {
                                "type": "boolean",
                                "description": "Show default award emojis"
                            },
                            "show_diff_preview_in_email": {
                                "type": "boolean",
                                "description": "Include the code diff preview in merge request notification emails"
                            },
                            "warn_about_potentially_unwanted_characters": {
                                "type": "boolean",
                                "description": "Warn about potentially unwanted characters"
                            },
                            "enforce_auth_checks_on_uploads": {
                                "type": "boolean",
                                "description": "Enforce auth check on uploads"
                            },
                            "shared_runners_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if shared runners are enabled for that project"
                            },
                            "group_runners_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if group runners are enabled for that project"
                            },
                            "resolve_outdated_diff_discussions": {
                                "type": "boolean",
                                "description": "Automatically resolve merge request diff threads on lines changed with a push"
                            },
                            "remove_source_branch_after_merge": {
                                "type": "boolean",
                                "description": "Remove the source branch by default after merge"
                            },
                            "container_registry_enabled": {
                                "type": "boolean",
                                "description": "Deprecated: Use :container_registry_access_level instead. Flag indication if the container registry is enabled for that project"
                            },
                            "container_expiration_policy_attributes": {
                                "type": "object",
                                "properties": {
                                    "cadence": {
                                        "type": "string",
                                        "description": "Container expiration policy cadence for recurring job"
                                    },
                                    "keep_n": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Container expiration policy number of images to keep"
                                    },
                                    "older_than": {
                                        "type": "string",
                                        "description": "Container expiration policy remove images older than value"
                                    },
                                    "name_regex": {
                                        "type": "string",
                                        "description": "Container expiration policy regex for image removal"
                                    },
                                    "name_regex_keep": {
                                        "type": "string",
                                        "description": "Container expiration policy regex for image retention"
                                    },
                                    "enabled": {
                                        "type": "boolean",
                                        "description": "Flag indication if container expiration policy is enabled"
                                    }
                                }
                            },
                            "lfs_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if Git LFS is enabled for that project"
                            },
                            "visibility": {
                                "type": "string",
                                "description": "The visibility of the project.",
                                "enum": [
                                    "private",
                                    "internal",
                                    "public"
                                ]
                            },
                            "public_builds": {
                                "type": "boolean",
                                "description": "Deprecated: Use public_jobs instead."
                            },
                            "public_jobs": {
                                "type": "boolean",
                                "description": "Perform public builds"
                            },
                            "request_access_enabled": {
                                "type": "boolean",
                                "description": "Allow users to request member access"
                            },
                            "only_allow_merge_if_pipeline_succeeds": {
                                "type": "boolean",
                                "description": "Only allow to merge if builds succeed"
                            },
                            "allow_merge_on_skipped_pipeline": {
                                "type": "boolean",
                                "description": "Allow to merge if pipeline is skipped"
                            },
                            "only_allow_merge_if_all_discussions_are_resolved": {
                                "type": "boolean",
                                "description": "Only allow to merge if all threads are resolved"
                            },
                            "tag_list": {
                                "type": "array",
                                "description": "Deprecated: Use :topics instead",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "topics": {
                                "type": "array",
                                "description": "The list of topics for a project",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "avatar": {
                                "type": "file",
                                "description": "Avatar image for project"
                            },
                            "printing_merge_request_link_enabled": {
                                "type": "boolean",
                                "description": "Show link to create/view merge request when pushing from the command line"
                            },
                            "merge_method": {
                                "type": "string",
                                "description": "The merge method used when merging merge requests",
                                "enum": [
                                    "ff",
                                    "rebase_merge",
                                    "merge"
                                ]
                            },
                            "suggestion_commit_message": {
                                "type": "string",
                                "description": "The commit message used to apply merge request suggestions"
                            },
                            "merge_commit_template": {
                                "type": "string",
                                "description": "Template used to create merge commit message"
                            },
                            "squash_commit_template": {
                                "type": "string",
                                "description": "Template used to create squash commit message"
                            },
                            "issue_branch_template": {
                                "type": "string",
                                "description": "Template used to create a branch from an issue"
                            },
                            "auto_devops_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if Auto DevOps is enabled"
                            },
                            "auto_devops_deploy_strategy": {
                                "type": "string",
                                "description": "Auto Deploy strategy",
                                "enum": [
                                    "continuous",
                                    "manual",
                                    "timed_incremental"
                                ]
                            },
                            "autoclose_referenced_issues": {
                                "type": "boolean",
                                "description": "Flag indication if referenced issues auto-closing is enabled"
                            },
                            "repository_storage": {
                                "type": "string",
                                "description": "Which storage shard the repository is on. Available only to admins"
                            },
                            "packages_enabled": {
                                "type": "boolean",
                                "description": "Enable project packages feature"
                            },
                            "squash_option": {
                                "type": "string",
                                "description": "Squash default for project. One of `never`, `always`, `default_on`, or `default_off`.",
                                "enum": [
                                    "never",
                                    "always",
                                    "default_on",
                                    "default_off"
                                ]
                            },
                            "mr_default_target_self": {
                                "type": "boolean",
                                "description": "Merge requests of this forked project targets itself by default"
                            },
                            "merge_request_title_regex": {
                                "type": "string",
                                "description": "The regex the Merge Request must adhere to"
                            },
                            "only_allow_merge_if_all_status_checks_passed": {
                                "type": "boolean",
                                "description": "Blocks merge requests from merging unless all status checks have passed"
                            },
                            "approvals_before_merge": {
                                "type": "integer",
                                "format": "int32",
                                "description": "How many approvers should approve merge request by default"
                            },
                            "mirror": {
                                "type": "boolean",
                                "description": "[Deprecated] Enables pull mirroring in a project"
                            },
                            "mirror_trigger_builds": {
                                "type": "boolean",
                                "description": "[Deprecated] Pull mirroring triggers builds"
                            },
                            "external_authorization_classification_label": {
                                "type": "string",
                                "description": "The classification label for the project"
                            },
                            "requirements_access_level": {
                                "type": "string",
                                "description": "Requirements feature access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "prevent_merge_without_jira_issue": {
                                "type": "boolean",
                                "description": "Require an associated issue from Jira"
                            },
                            "repository_object_format": {
                                "type": "string",
                                "description": "The object format of the project repository",
                                "enum": [
                                    "sha1",
                                    "sha256"
                                ]
                            },
                            "initialize_with_readme": {
                                "type": "boolean",
                                "description": "Initialize a project with a README.md"
                            },
                            "use_custom_template": {
                                "type": "boolean",
                                "description": "Use custom template"
                            },
                            "group_with_project_templates_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Group ID that serves as the template source"
                            },
                            "namespace_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Namespace ID for the new project. Default to the user namespace."
                            },
                            "import_url": {
                                "type": "string",
                                "description": "URL from which the project is imported"
                            },
                            "template_name": {
                                "type": "string",
                                "description": "Name of template from which to create project"
                            },
                            "template_project_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Project ID of template from which to create project"
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Create new project for a specified user. Only available to admin users."
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create new project for a specified user. Only available to admin users.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Project"
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                },
                "400": {
                    "description": "Bad request"
                }
            },
            "request_body_parameters": {},
            "description": "Create new project for a specified user. Only available to admin users.",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsUserUserId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the project",
                                "example": "project"
                            },
                            "default_branch": {
                                "type": "string",
                                "description": "The default branch of the project",
                                "example": "main"
                            },
                            "path": {
                                "type": "string",
                                "description": "The path of the repository",
                                "example": "group/project"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the project"
                            },
                            "build_git_strategy": {
                                "type": "string",
                                "description": "The Git strategy. Defaults to `fetch`",
                                "enum": [
                                    "fetch",
                                    "clone"
                                ]
                            },
                            "build_timeout": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Build timeout"
                            },
                            "auto_cancel_pending_pipelines": {
                                "type": "string",
                                "description": "Auto-cancel pending pipelines",
                                "enum": [
                                    "disabled",
                                    "enabled"
                                ]
                            },
                            "ci_config_path": {
                                "type": "string",
                                "description": "The path to CI config file. Defaults to `.gitlab-ci.yml`"
                            },
                            "service_desk_enabled": {
                                "type": "boolean",
                                "description": "Disable or enable the service desk"
                            },
                            "issues_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if the issue tracker is enabled"
                            },
                            "merge_requests_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if merge requests are enabled"
                            },
                            "wiki_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if the wiki is enabled"
                            },
                            "jobs_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if jobs are enabled"
                            },
                            "snippets_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if snippets are enabled"
                            },
                            "issues_access_level": {
                                "type": "string",
                                "description": "Issues access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "repository_access_level": {
                                "type": "string",
                                "description": "Repository access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "merge_requests_access_level": {
                                "type": "string",
                                "description": "Merge requests access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "forking_access_level": {
                                "type": "string",
                                "description": "Forks access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "wiki_access_level": {
                                "type": "string",
                                "description": "Wiki access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "builds_access_level": {
                                "type": "string",
                                "description": "Builds access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "snippets_access_level": {
                                "type": "string",
                                "description": "Snippets access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "pages_access_level": {
                                "type": "string",
                                "description": "Pages access level. One of `disabled`, `private`, `enabled` or `public`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled",
                                    "public"
                                ]
                            },
                            "analytics_access_level": {
                                "type": "string",
                                "description": "Analytics access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "container_registry_access_level": {
                                "type": "string",
                                "description": "Controls visibility of the container registry. One of `disabled`, `private` or `enabled`. `private` will make the container registry accessible only to project members (reporter role and above). `enabled` will make the container registry accessible to everyone who has access to the project. `disabled` will disable the container registry",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "security_and_compliance_access_level": {
                                "type": "string",
                                "description": "Security and compliance access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "releases_access_level": {
                                "type": "string",
                                "description": "Releases access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "environments_access_level": {
                                "type": "string",
                                "description": "Environments access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "feature_flags_access_level": {
                                "type": "string",
                                "description": "Feature flags access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "infrastructure_access_level": {
                                "type": "string",
                                "description": "Infrastructure access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "monitor_access_level": {
                                "type": "string",
                                "description": "Monitor access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "model_experiments_access_level": {
                                "type": "string",
                                "description": "Model experiments access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "model_registry_access_level": {
                                "type": "string",
                                "description": "Model registry access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "emails_disabled": {
                                "type": "boolean",
                                "description": "Deprecated: Use emails_enabled instead."
                            },
                            "emails_enabled": {
                                "type": "boolean",
                                "description": "Enable email notifications"
                            },
                            "show_default_award_emojis": {
                                "type": "boolean",
                                "description": "Show default award emojis"
                            },
                            "show_diff_preview_in_email": {
                                "type": "boolean",
                                "description": "Include the code diff preview in merge request notification emails"
                            },
                            "warn_about_potentially_unwanted_characters": {
                                "type": "boolean",
                                "description": "Warn about potentially unwanted characters"
                            },
                            "enforce_auth_checks_on_uploads": {
                                "type": "boolean",
                                "description": "Enforce auth check on uploads"
                            },
                            "shared_runners_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if shared runners are enabled for that project"
                            },
                            "group_runners_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if group runners are enabled for that project"
                            },
                            "resolve_outdated_diff_discussions": {
                                "type": "boolean",
                                "description": "Automatically resolve merge request diff threads on lines changed with a push"
                            },
                            "remove_source_branch_after_merge": {
                                "type": "boolean",
                                "description": "Remove the source branch by default after merge"
                            },
                            "container_registry_enabled": {
                                "type": "boolean",
                                "description": "Deprecated: Use :container_registry_access_level instead. Flag indication if the container registry is enabled for that project"
                            },
                            "container_expiration_policy_attributes": {
                                "type": "object",
                                "properties": {
                                    "cadence": {
                                        "type": "string",
                                        "description": "Container expiration policy cadence for recurring job"
                                    },
                                    "keep_n": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Container expiration policy number of images to keep"
                                    },
                                    "older_than": {
                                        "type": "string",
                                        "description": "Container expiration policy remove images older than value"
                                    },
                                    "name_regex": {
                                        "type": "string",
                                        "description": "Container expiration policy regex for image removal"
                                    },
                                    "name_regex_keep": {
                                        "type": "string",
                                        "description": "Container expiration policy regex for image retention"
                                    },
                                    "enabled": {
                                        "type": "boolean",
                                        "description": "Flag indication if container expiration policy is enabled"
                                    }
                                }
                            },
                            "lfs_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if Git LFS is enabled for that project"
                            },
                            "visibility": {
                                "type": "string",
                                "description": "The visibility of the project.",
                                "enum": [
                                    "private",
                                    "internal",
                                    "public"
                                ]
                            },
                            "public_builds": {
                                "type": "boolean",
                                "description": "Deprecated: Use public_jobs instead."
                            },
                            "public_jobs": {
                                "type": "boolean",
                                "description": "Perform public builds"
                            },
                            "request_access_enabled": {
                                "type": "boolean",
                                "description": "Allow users to request member access"
                            },
                            "only_allow_merge_if_pipeline_succeeds": {
                                "type": "boolean",
                                "description": "Only allow to merge if builds succeed"
                            },
                            "allow_merge_on_skipped_pipeline": {
                                "type": "boolean",
                                "description": "Allow to merge if pipeline is skipped"
                            },
                            "only_allow_merge_if_all_discussions_are_resolved": {
                                "type": "boolean",
                                "description": "Only allow to merge if all threads are resolved"
                            },
                            "tag_list": {
                                "type": "array",
                                "description": "Deprecated: Use :topics instead",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "topics": {
                                "type": "array",
                                "description": "The list of topics for a project",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "avatar": {
                                "type": "file",
                                "description": "Avatar image for project"
                            },
                            "printing_merge_request_link_enabled": {
                                "type": "boolean",
                                "description": "Show link to create/view merge request when pushing from the command line"
                            },
                            "merge_method": {
                                "type": "string",
                                "description": "The merge method used when merging merge requests",
                                "enum": [
                                    "ff",
                                    "rebase_merge",
                                    "merge"
                                ]
                            },
                            "suggestion_commit_message": {
                                "type": "string",
                                "description": "The commit message used to apply merge request suggestions"
                            },
                            "merge_commit_template": {
                                "type": "string",
                                "description": "Template used to create merge commit message"
                            },
                            "squash_commit_template": {
                                "type": "string",
                                "description": "Template used to create squash commit message"
                            },
                            "issue_branch_template": {
                                "type": "string",
                                "description": "Template used to create a branch from an issue"
                            },
                            "auto_devops_enabled": {
                                "type": "boolean",
                                "description": "Flag indication if Auto DevOps is enabled"
                            },
                            "auto_devops_deploy_strategy": {
                                "type": "string",
                                "description": "Auto Deploy strategy",
                                "enum": [
                                    "continuous",
                                    "manual",
                                    "timed_incremental"
                                ]
                            },
                            "autoclose_referenced_issues": {
                                "type": "boolean",
                                "description": "Flag indication if referenced issues auto-closing is enabled"
                            },
                            "repository_storage": {
                                "type": "string",
                                "description": "Which storage shard the repository is on. Available only to admins"
                            },
                            "packages_enabled": {
                                "type": "boolean",
                                "description": "Enable project packages feature"
                            },
                            "squash_option": {
                                "type": "string",
                                "description": "Squash default for project. One of `never`, `always`, `default_on`, or `default_off`.",
                                "enum": [
                                    "never",
                                    "always",
                                    "default_on",
                                    "default_off"
                                ]
                            },
                            "mr_default_target_self": {
                                "type": "boolean",
                                "description": "Merge requests of this forked project targets itself by default"
                            },
                            "merge_request_title_regex": {
                                "type": "string",
                                "description": "The regex the Merge Request must adhere to"
                            },
                            "only_allow_merge_if_all_status_checks_passed": {
                                "type": "boolean",
                                "description": "Blocks merge requests from merging unless all status checks have passed"
                            },
                            "approvals_before_merge": {
                                "type": "integer",
                                "format": "int32",
                                "description": "How many approvers should approve merge request by default"
                            },
                            "mirror": {
                                "type": "boolean",
                                "description": "[Deprecated] Enables pull mirroring in a project"
                            },
                            "mirror_trigger_builds": {
                                "type": "boolean",
                                "description": "[Deprecated] Pull mirroring triggers builds"
                            },
                            "external_authorization_classification_label": {
                                "type": "string",
                                "description": "The classification label for the project"
                            },
                            "requirements_access_level": {
                                "type": "string",
                                "description": "Requirements feature access level. One of `disabled`, `private` or `enabled`",
                                "enum": [
                                    "disabled",
                                    "private",
                                    "enabled"
                                ]
                            },
                            "prevent_merge_without_jira_issue": {
                                "type": "boolean",
                                "description": "Require an associated issue from Jira"
                            },
                            "ci_default_git_depth": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Default number of revisions for shallow cloning"
                            },
                            "keep_latest_artifact": {
                                "type": "boolean",
                                "description": "Indicates if the latest artifact should be kept for this project."
                            },
                            "ci_forward_deployment_enabled": {
                                "type": "boolean",
                                "description": "Prevent older deployment jobs that are still pending"
                            },
                            "ci_forward_deployment_rollback_allowed": {
                                "type": "boolean",
                                "description": "Allow job retries for rollback deployments"
                            },
                            "ci_allow_fork_pipelines_to_run_in_parent_project": {
                                "type": "boolean",
                                "description": "Allow fork merge request pipelines to run in parent project"
                            },
                            "ci_separated_caches": {
                                "type": "boolean",
                                "description": "Enable or disable separated caches based on branch protection."
                            },
                            "restrict_user_defined_variables": {
                                "type": "boolean",
                                "description": "Restrict use of user-defined variables when triggering a pipeline"
                            },
                            "ci_pipeline_variables_minimum_override_role": {
                                "type": "string",
                                "description": "Limit ability to override CI/CD variables when triggering a pipeline to only users with at least the set minimum role",
                                "enum": [
                                    "no_one_allowed",
                                    "developer",
                                    "maintainer",
                                    "owner"
                                ]
                            },
                            "ci_push_repository_for_job_token_allowed": {
                                "type": "boolean",
                                "description": "Allow pushing to this project's repository by authenticating with a CI/CD job token generated in this project."
                            },
                            "ci_id_token_sub_claim_components": {
                                "type": "array",
                                "description": "Claims that will be used to build the sub claim in id tokens",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "ci_delete_pipelines_in_seconds": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Pipelines older than the configured time are deleted"
                            },
                            "max_artifacts_size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Set the maximum file size for each job's artifacts"
                            },
                            "allow_pipeline_trigger_approve_deployment": {
                                "type": "boolean",
                                "description": "Allow pipeline triggerer to approve deployments"
                            },
                            "mirror_user_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "[Deprecated] User responsible for all the activity surrounding a pull mirror event. Can only be set by admins"
                            },
                            "only_mirror_protected_branches": {
                                "type": "boolean",
                                "description": "[Deprecated] Only mirror protected branches"
                            },
                            "mirror_branch_regex": {
                                "type": "string",
                                "description": "[Deprecated] Only mirror branches match regex"
                            },
                            "mirror_overwrites_diverged_branches": {
                                "type": "boolean",
                                "description": "[Deprecated] Pull mirror overwrites diverged branches"
                            },
                            "import_url": {
                                "type": "string",
                                "description": "URL from which the project is imported"
                            },
                            "fallback_approvals_required": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Overall approvals required when no rule is present"
                            },
                            "issues_template": {
                                "type": "string",
                                "description": "Default description for Issues. Description is parsed with GitLab Flavored Markdown."
                            },
                            "merge_requests_template": {
                                "type": "string",
                                "description": "Default description for merge requests. Description is parsed with GitLab Flavored Markdown."
                            },
                            "merge_pipelines_enabled": {
                                "type": "boolean",
                                "description": "Enable merged results pipelines."
                            },
                            "merge_trains_enabled": {
                                "type": "boolean",
                                "description": "Enable merge trains."
                            },
                            "merge_trains_skip_train_allowed": {
                                "type": "boolean",
                                "description": "Allow merge train merge requests to be merged without waiting for pipelines to finish."
                            },
                            "ci_restrict_pipeline_cancellation_role": {
                                "type": "string",
                                "description": "Roles allowed to cancel pipelines and jobs."
                            }
                        },
                        "description": "Update an existing project"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update an existing project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Project"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "403": {
                    "description": "Unauthenticated"
                }
            },
            "request_body_parameters": {},
            "description": "Update an existing project",
            "tags": [
                "projects"
            ],
            "operationId": "putApiV4ProjectsId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "202": {
                    "description": "Delete a project"
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a project",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/fork",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdFork",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "namespace": {
                                "type": "string",
                                "description": "(deprecated) The ID or name of the namespace that the project will be forked into",
                                "example": "gitlab"
                            },
                            "namespace_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the namespace that the project will be forked into",
                                "example": 1
                            },
                            "namespace_path": {
                                "type": "string",
                                "description": "The path of the namespace that the project will be forked into",
                                "example": "new_path/gitlab"
                            },
                            "path": {
                                "type": "string",
                                "description": "The path that will be assigned to the fork",
                                "example": "fork"
                            },
                            "name": {
                                "type": "string",
                                "description": "The name that will be assigned to the fork",
                                "example": "Fork"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description that will be assigned to the fork",
                                "example": "Description"
                            },
                            "visibility": {
                                "type": "string",
                                "description": "The visibility of the fork",
                                "enum": [
                                    "private",
                                    "internal",
                                    "public"
                                ]
                            },
                            "mr_default_target_self": {
                                "type": "boolean",
                                "description": "Merge requests of this forked project targets itself by default"
                            },
                            "branches": {
                                "type": "string",
                                "description": "Branches to fork"
                            }
                        },
                        "description": "Fork new project for the current user or provided namespace."
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Fork new project for the current user or provided namespace.",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Project"
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                },
                "409": {
                    "description": "Conflict"
                }
            },
            "request_body_parameters": {},
            "description": "Fork new project for the current user or provided namespace.",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdFork"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/fork",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Remove a forked_from relationship"
                },
                "304": {
                    "description": "Not modified"
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Remove a forked_from relationship",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdFork"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/archive",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Archive a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Project"
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                }
            },
            "request_body_parameters": {},
            "description": "Archive a project",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdArchive"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/unarchive",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Unarchive a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Project"
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                }
            },
            "request_body_parameters": {},
            "description": "Unarchive a project",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdUnarchive"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/star",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Star a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Project"
                    }
                },
                "304": {
                    "description": "Not modified"
                },
                "403": {
                    "description": "Unauthenticated"
                }
            },
            "request_body_parameters": {},
            "description": "Star a project",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdStar"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/unstar",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Unstar a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Project"
                    }
                },
                "304": {
                    "description": "Not modified"
                },
                "403": {
                    "description": "Unauthenticated"
                }
            },
            "request_body_parameters": {},
            "description": "Unstar a project",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdUnstar"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/fork/{forked_from_id}",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "forked_from_id",
                    "description": "The ID of the project it was forked from",
                    "type": "string",
                    "required": true,
                    "example": "gitlab"
                }
            ],
            "responses": {
                "201": {
                    "description": "Mark this project as forked from another",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Project"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Mark this project as forked from another",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdForkForkedFromId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/share",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdShare",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "group_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of a group",
                                "example": 1
                            },
                            "group_access": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The group access level",
                                "enum": [
                                    10,
                                    15,
                                    20,
                                    30,
                                    40,
                                    50
                                ]
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date",
                                "description": "Share expiration date"
                            },
                            "member_role_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the Member Role to be assigned to the group"
                            }
                        },
                        "required": [
                            "group_id",
                            "group_access"
                        ],
                        "description": "Share the project with a group"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Share the project with a group",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProjectGroupLink"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Share the project with a group",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdShare"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/share/{group_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "group_id",
                    "description": "The ID of the group",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Remove a group share"
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Remove a group share",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdShareGroupId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/import_project_members/{project_id}",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "project_id",
                    "description": "The ID of the source project to import the members from.",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Import members from another project"
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Project Not Found"
                },
                "422": {
                    "description": "Import failed"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.2",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdImportProjectMembersProjectId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/housekeeping",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdHousekeeping",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "task": {
                                "type": "string",
                                "description": "`prune` to trigger manual prune of unreachable objects or `eager` to trigger eager housekeeping.",
                                "enum": [
                                    "eager",
                                    "prune"
                                ],
                                "default": "eager"
                            }
                        },
                        "description": "Start the housekeeping task for a project"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Start the housekeeping task for a project"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "409": {
                    "description": "Conflict"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 9.0.",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdHousekeeping"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository_size",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Start a task to recalculate repository size for a project"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Unauthenticated"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.0.",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdRepositorySize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/transfer",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdTransfer",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "namespace": {
                                "type": "string",
                                "description": "The ID or path of the new namespace",
                                "example": "gitlab"
                            }
                        },
                        "required": [
                            "namespace"
                        ],
                        "description": "Transfer a project to a new namespace"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Transfer a project to a new namespace",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Project"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Transfer a project to a new namespace",
            "tags": [
                "projects"
            ],
            "operationId": "putApiV4ProjectsIdTransfer"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/protected_branches",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": "gitlab-org/gitlab"
                },
                {
                    "name": "postApiV4ProjectsIdProtectedBranches",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the protected branch",
                                "example": "main"
                            },
                            "push_access_level": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Access levels allowed to push (defaults: `40`, maintainer access level)",
                                "enum": [
                                    30,
                                    40,
                                    60,
                                    0
                                ]
                            },
                            "merge_access_level": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Access levels allowed to merge (defaults: `40`, maintainer access level)",
                                "enum": [
                                    30,
                                    40,
                                    60,
                                    0
                                ]
                            },
                            "allow_force_push": {
                                "type": "boolean",
                                "description": "Allow force push for all users with push access.",
                                "default": false
                            },
                            "unprotect_access_level": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Access levels allowed to unprotect (defaults: `40`, maintainer access level)",
                                "enum": [
                                    30,
                                    40,
                                    60
                                ]
                            },
                            "allowed_to_push": {
                                "type": "array",
                                "description": "An array of users/groups allowed to push",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "access_level": {
                                            "type": "integer",
                                            "format": "int32",
                                            "enum": [
                                                30,
                                                40,
                                                60,
                                                0
                                            ]
                                        },
                                        "deploy_key_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "user_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "group_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "_destroy": {
                                            "type": "boolean",
                                            "description": "Delete the object when true"
                                        }
                                    }
                                }
                            },
                            "allowed_to_merge": {
                                "type": "array",
                                "description": "An array of users/groups allowed to merge",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "access_level": {
                                            "type": "integer",
                                            "format": "int32",
                                            "enum": [
                                                30,
                                                40,
                                                60,
                                                0
                                            ]
                                        },
                                        "user_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "group_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "_destroy": {
                                            "type": "boolean",
                                            "description": "Delete the object when true"
                                        }
                                    }
                                }
                            },
                            "allowed_to_unprotect": {
                                "type": "array",
                                "description": "An array of users/groups allowed to unprotect",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "access_level": {
                                            "type": "integer",
                                            "format": "int32",
                                            "enum": [
                                                30,
                                                40,
                                                60
                                            ]
                                        },
                                        "user_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "group_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "_destroy": {
                                            "type": "boolean",
                                            "description": "Delete the object when true"
                                        }
                                    }
                                }
                            },
                            "code_owner_approval_required": {
                                "type": "boolean",
                                "description": "Prevent pushes to this branch if it matches an item in CODEOWNERS"
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Protect a single branch"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Protect a single branch",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProtectedBranch"
                    }
                },
                "422": {
                    "description": "name is missing"
                },
                "409": {
                    "description": "Protected branch 'main' already exists"
                },
                "404": {
                    "description": "404 Project Not Found"
                },
                "401": {
                    "description": "401 Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Protect a single branch",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdProtectedBranches"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/protected_branches/{name}",
            "method": "patch",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": "gitlab-org/gitlab"
                },
                {
                    "in": "path",
                    "name": "name",
                    "description": "The name of the branch",
                    "type": "string",
                    "required": true,
                    "example": "main"
                },
                {
                    "name": "patchApiV4ProjectsIdProtectedBranchesName",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "allow_force_push": {
                                "type": "boolean",
                                "description": "Allow force push for all users with push access."
                            },
                            "unprotect_access_level": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Access levels allowed to unprotect (defaults: `40`, maintainer access level)",
                                "enum": [
                                    30,
                                    40,
                                    60
                                ]
                            },
                            "allowed_to_push": {
                                "type": "array",
                                "description": "An array of users/groups allowed to push",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "access_level": {
                                            "type": "integer",
                                            "format": "int32",
                                            "enum": [
                                                30,
                                                40,
                                                60,
                                                0
                                            ]
                                        },
                                        "deploy_key_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "user_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "group_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "_destroy": {
                                            "type": "boolean",
                                            "description": "Delete the object when true"
                                        }
                                    }
                                }
                            },
                            "allowed_to_merge": {
                                "type": "array",
                                "description": "An array of users/groups allowed to merge",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "access_level": {
                                            "type": "integer",
                                            "format": "int32",
                                            "enum": [
                                                30,
                                                40,
                                                60,
                                                0
                                            ]
                                        },
                                        "user_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "group_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "_destroy": {
                                            "type": "boolean",
                                            "description": "Delete the object when true"
                                        }
                                    }
                                }
                            },
                            "allowed_to_unprotect": {
                                "type": "array",
                                "description": "An array of users/groups allowed to unprotect",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "access_level": {
                                            "type": "integer",
                                            "format": "int32",
                                            "enum": [
                                                30,
                                                40,
                                                60
                                            ]
                                        },
                                        "user_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "group_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "example": 1
                                        },
                                        "_destroy": {
                                            "type": "boolean",
                                            "description": "Delete the object when true"
                                        }
                                    }
                                }
                            },
                            "code_owner_approval_required": {
                                "type": "boolean",
                                "description": "Prevent pushes to this branch if it matches an item in CODEOWNERS"
                            }
                        },
                        "description": "Update a protected branch"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a protected branch",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProtectedBranch"
                    }
                },
                "422": {
                    "description": "Push access levels access level has already been taken"
                },
                "404": {
                    "description": "404 Project Not Found"
                },
                "401": {
                    "description": "401 Unauthorized"
                },
                "400": {
                    "description": "400 Bad request"
                }
            },
            "request_body_parameters": {},
            "description": "Update a protected branch",
            "tags": [
                "projects"
            ],
            "operationId": "patchApiV4ProjectsIdProtectedBranchesName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/protected_branches/{name}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": "gitlab-org/gitlab"
                },
                {
                    "in": "path",
                    "name": "name",
                    "description": "The name of the protected branch",
                    "type": "string",
                    "required": true,
                    "example": "main"
                }
            ],
            "responses": {
                "204": {
                    "description": "Unprotect a single branch"
                },
                "404": {
                    "description": "404 Project Not Found"
                },
                "401": {
                    "description": "401 Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Unprotect a single branch",
            "tags": [
                "projects"
            ],
            "operationId": "deleteApiV4ProjectsIdProtectedBranchesName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/protected_tags",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdProtectedTags",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the protected tag",
                                "example": "release-1-0"
                            },
                            "create_access_level": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Access levels allowed to create (defaults: `40`, maintainer access level)",
                                "enum": [
                                    30,
                                    40,
                                    60,
                                    0
                                ],
                                "example": 30
                            },
                            "allowed_to_create": {
                                "type": "array",
                                "description": "An array of users/groups allowed to create",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "access_level": {
                                            "type": "integer",
                                            "format": "int32",
                                            "enum": [
                                                30,
                                                40,
                                                60,
                                                0
                                            ]
                                        },
                                        "user_id": {
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "group_id": {
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "deploy_key_id": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "Protect a single tag or wildcard"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Protect a single tag or wildcard",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ProtectedTag"
                    }
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.3.",
            "tags": [
                "protected_tags"
            ],
            "operationId": "postApiV4ProjectsIdProtectedTags"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/protected_tags/{name}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "name",
                    "description": "The name of the protected tag",
                    "type": "string",
                    "required": true,
                    "example": "release-1-0"
                }
            ],
            "responses": {
                "204": {
                    "description": "Unprotect a single tag"
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                },
                "412": {
                    "description": "Precondition Failed"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.3.",
            "tags": [
                "protected_tags"
            ],
            "operationId": "deleteApiV4ProjectsIdProtectedTagsName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/pypi",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdPackagesPypi",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "file",
                                "description": "The package file to be published (generated by Multipart middleware)"
                            },
                            "name": {
                                "type": "string",
                                "example": "my.pypi.package"
                            },
                            "version": {
                                "type": "string",
                                "example": "1.3.7"
                            },
                            "requires_python": {
                                "type": "string",
                                "example": ">=3.7"
                            },
                            "md5_digest": {
                                "type": "string",
                                "example": "900150983cd24fb0d6963f7d28e17f72"
                            },
                            "sha256_digest": {
                                "type": "string",
                                "example": "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"
                            },
                            "metadata_version": {
                                "type": "string",
                                "example": "2.3"
                            },
                            "author_email": {
                                "type": "string",
                                "example": "cschultz@example.com, snoopy@peanuts.com"
                            },
                            "description": {
                                "type": "string"
                            },
                            "description_content_type": {
                                "type": "string",
                                "example": "text/markdown; charset=UTF-8; variant=GFM"
                            },
                            "summary": {
                                "type": "string",
                                "example": "A module for collecting votes from beagles."
                            },
                            "keywords": {
                                "type": "string",
                                "example": "dog,puppy,voting,election"
                            }
                        },
                        "required": [
                            "content",
                            "name",
                            "version"
                        ],
                        "description": "The PyPi Package upload endpoint"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "The PyPi Package upload endpoint"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                },
                "422": {
                    "description": "Unprocessable Entity"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.10",
            "tags": [
                "pypi_packages"
            ],
            "operationId": "postApiV4ProjectsIdPackagesPypi"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/pypi/authorize",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Authorize the PyPi package upload from workhorse"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.10",
            "tags": [
                "pypi_packages"
            ],
            "operationId": "postApiV4ProjectsIdPackagesPypiAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/releases",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdReleases",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "tag_name": {
                                "type": "string",
                                "description": "The tag where the release is created from"
                            },
                            "tag_message": {
                                "type": "string",
                                "description": "Message to use if creating a new annotated tag"
                            },
                            "name": {
                                "type": "string",
                                "description": "The release name"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the release. You can use Markdown"
                            },
                            "ref": {
                                "type": "string",
                                "description": "If a tag specified in `tag_name` doesn't exist, the release is created from `ref` and tagged with `tag_name`. It can be a commit SHA, another tag name, or a branch name."
                            },
                            "assets": {
                                "type": "object",
                                "properties": {
                                    "links": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "The name of the link. Link names must be unique within the release"
                                                },
                                                "url": {
                                                    "type": "string",
                                                    "description": "The URL of the link. Link URLs must be unique within the release"
                                                },
                                                "direct_asset_path": {
                                                    "type": "string",
                                                    "description": "Optional path for a direct asset link"
                                                },
                                                "filepath": {
                                                    "type": "string",
                                                    "description": "Deprecated: optional path for a direct asset link"
                                                },
                                                "link_type": {
                                                    "type": "string",
                                                    "description": "The type of the link: `other`, `runbook`, `image`, `package`. Defaults to `other`"
                                                }
                                            },
                                            "required": [
                                                "name",
                                                "url"
                                            ]
                                        }
                                    }
                                }
                            },
                            "milestones": {
                                "type": "array",
                                "description": "The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones. Cannot be combined with `milestone_ids` parameter.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "milestone_ids": {
                                "type": "string",
                                "description": "The ID of each milestone the release is associated with. GitLab Premium customers can specify group milestones. Cannot be combined with `milestones` parameter."
                            },
                            "released_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`). Only provide this field if creating an upcoming or historical release."
                            },
                            "legacy_catalog_publish": {
                                "type": "boolean",
                                "description": "If true, the release will be published to the CI catalog. This parameter is for internal use only and will be removed in a future release. If the feature flag ci_release_cli_catalog_publish_option is disabled, this parameter will be ignored and the release will published to the CI catalog as it was before this parameter was introduced."
                            }
                        },
                        "required": [
                            "tag_name"
                        ],
                        "description": "Create a release"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a release",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Release"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "409": {
                    "description": "Conflict"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Creates a release. Developer level access to the project is required to create a release. This feature was introduced in GitLab 11.7.",
            "tags": [
                "releases"
            ],
            "operationId": "postApiV4ProjectsIdReleases"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/releases/{tag_name}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag_name",
                    "description": "The Git tag the release is associated with",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdReleasesTagName",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The release name"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the release. You can use Markdown"
                            },
                            "released_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The date when the release is/was ready. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`)"
                            },
                            "milestones": {
                                "type": "array",
                                "description": "The title of each milestone to associate with the release. GitLab Premium customers can specify group milestones. Cannot be combined with `milestone_ids` parameter. To remove all milestones from the release, specify `[]`",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "milestone_ids": {
                                "type": "string",
                                "description": "The ID of each milestone the release is associated with. GitLab Premium customers can specify group milestones. Cannot be combined with `milestones` parameter. To remove all milestones from the release, specify `[]`"
                            }
                        },
                        "description": "Update a release"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a release",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Release"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Updates a release. Developer level access to the project is required to update a release. This feature was introduced in GitLab 11.7.",
            "tags": [
                "releases"
            ],
            "operationId": "putApiV4ProjectsIdReleasesTagName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/releases/{tag_name}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag_name",
                    "description": "The Git tag the release is associated with",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "400": {
                    "description": "Bad request"
                },
                "204": {
                    "description": "Delete a release",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Release"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a release. Deleting a release doesn't delete the associated tag. Maintainer level access to the project is required to delete a release. This feature was introduced in GitLab 11.7.",
            "tags": [
                "releases"
            ],
            "operationId": "deleteApiV4ProjectsIdReleasesTagName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/releases/{tag_name}/evidence",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "tag_name",
                    "description": "The Git tag the release is associated with",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Collect release evidence",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Release"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Creates an evidence for an existing Release. This feature was introduced in GitLab 12.10.",
            "tags": [
                "releases"
            ],
            "operationId": "postApiV4ProjectsIdReleasesTagNameEvidence"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/releases/{tag_name}/assets/links",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag_name",
                    "description": "The tag associated with the release",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdReleasesTagNameAssetsLinks",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the link. Link names must be unique in the release"
                            },
                            "url": {
                                "type": "string",
                                "description": "The URL of the link. Link URLs must be unique in the release."
                            },
                            "direct_asset_path": {
                                "type": "string",
                                "description": "Optional path for a direct asset link"
                            },
                            "filepath": {
                                "type": "string",
                                "description": "Deprecated: optional path for a direct asset link"
                            },
                            "link_type": {
                                "type": "string",
                                "description": "The type of the link: `other`, `runbook`, `image`, or `package`. Defaults to `other`",
                                "enum": [
                                    "other",
                                    "runbook",
                                    "image",
                                    "package"
                                ],
                                "default": "other"
                            }
                        },
                        "required": [
                            "name",
                            "url"
                        ],
                        "description": "Create a release link"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a release link",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Releases_Link"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Create an asset as a link from a release. This feature was introduced in GitLab 11.7.",
            "tags": [
                "release_links"
            ],
            "operationId": "postApiV4ProjectsIdReleasesTagNameAssetsLinks"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/releases/{tag_name}/assets/links/{link_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag_name",
                    "description": "The tag associated with the release",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "link_id",
                    "description": "The ID of the link",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdReleasesTagNameAssetsLinksLinkId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the link"
                            },
                            "url": {
                                "type": "string",
                                "description": "The URL of the link"
                            },
                            "direct_asset_path": {
                                "type": "string",
                                "description": "Optional path for a direct asset link"
                            },
                            "filepath": {
                                "type": "string",
                                "description": "Deprecated: optional path for a direct asset link"
                            },
                            "link_type": {
                                "type": "string",
                                "description": "The type of the link: `other`, `runbook`, `image`, or `package`. Defaults to `other`",
                                "enum": [
                                    "other",
                                    "runbook",
                                    "image",
                                    "package"
                                ],
                                "default": "other"
                            }
                        },
                        "description": "Update a release link"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a release link",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Releases_Link"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Update an asset as a link from a release. This feature was introduced in GitLab 11.7.",
            "tags": [
                "release_links"
            ],
            "operationId": "putApiV4ProjectsIdReleasesTagNameAssetsLinksLinkId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/releases/{tag_name}/assets/links/{link_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag_name",
                    "description": "The tag associated with the release",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "link_id",
                    "description": "The ID of the link",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Deletes an asset as a link from a release. This feature was introduced in GitLab 11.7.",
            "tags": [
                "release_links"
            ],
            "operationId": "deleteApiV4ProjectsIdReleasesTagNameAssetsLinksLinkId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/remote_mirrors",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdRemoteMirrors",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "The URL for a remote mirror",
                                "example": "https://*****:*****@example.com/gitlab/example.git"
                            },
                            "enabled": {
                                "type": "boolean",
                                "description": "Determines if the mirror is enabled"
                            },
                            "auth_method": {
                                "type": "string",
                                "description": "Determines the mirror authentication method",
                                "enum": [
                                    "ssh_public_key",
                                    "password"
                                ]
                            },
                            "keep_divergent_refs": {
                                "type": "boolean",
                                "description": "Determines if divergent refs are kept on the target"
                            },
                            "only_protected_branches": {
                                "type": "boolean",
                                "description": "Determines if only protected branches are mirrored"
                            },
                            "mirror_branch_regex": {
                                "type": "string",
                                "description": "Determines if only matched branches are mirrored"
                            }
                        },
                        "required": [
                            "url"
                        ],
                        "description": "Create remote mirror for a project"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create remote mirror for a project",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_RemoteMirror"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Create remote mirror for a project",
            "tags": [
                "remote_mirrors"
            ],
            "operationId": "postApiV4ProjectsIdRemoteMirrors"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/remote_mirrors/{mirror_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "mirror_id",
                    "description": "The ID of a remote mirror",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdRemoteMirrorsMirrorId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "enabled": {
                                "type": "boolean",
                                "description": "Determines if the mirror is enabled",
                                "example": true
                            },
                            "auth_method": {
                                "type": "string",
                                "description": "Determines the mirror authentication method"
                            },
                            "keep_divergent_refs": {
                                "type": "boolean",
                                "description": "Determines if divergent refs are kept on the target"
                            },
                            "only_protected_branches": {
                                "type": "boolean",
                                "description": "Determines if only protected branches are mirrored"
                            },
                            "mirror_branch_regex": {
                                "type": "string",
                                "description": "Determines if only matched branches are mirrored"
                            }
                        },
                        "description": "Update the attributes of a single remote mirror"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update the attributes of a single remote mirror",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_RemoteMirror"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Update the attributes of a single remote mirror",
            "tags": [
                "remote_mirrors"
            ],
            "operationId": "putApiV4ProjectsIdRemoteMirrorsMirrorId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/remote_mirrors/{mirror_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "mirror_id",
                    "description": "The ID of a remote mirror",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a single remote mirror"
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.10",
            "tags": [
                "remote_mirrors"
            ],
            "operationId": "deleteApiV4ProjectsIdRemoteMirrorsMirrorId"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/remote_mirrors/{mirror_id}/sync",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "mirror_id",
                    "description": "The ID of a remote mirror",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Triggers a push mirror operation"
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Triggers a push mirror operation",
            "tags": [
                "remote_mirrors"
            ],
            "operationId": "postApiV4ProjectsIdRemoteMirrorsMirrorIdSync"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/changelog",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true,
                    "example": 1
                },
                {
                    "name": "postApiV4ProjectsIdRepositoryChangelog",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "description": "The version of the release, using the semantic versioning format",
                                "example": "1.0.0"
                            },
                            "from": {
                                "type": "string",
                                "description": "The first commit in the range of commits to use for the changelog",
                                "example": "ed899a2f4b50b4370feeea94676502b42383c746"
                            },
                            "to": {
                                "type": "string",
                                "description": "The last commit in the range of commits to use for the changelog",
                                "example": "6104942438c14ec7bd21c6cd5bd995272b3faff6"
                            },
                            "date": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The date and time of the release",
                                "example": "2021-09-20T11:50:22.001+00:00"
                            },
                            "trailer": {
                                "type": "string",
                                "description": "The Git trailer to use for determining if commits are to be included in the changelog",
                                "default": "Changelog",
                                "example": "Changelog"
                            },
                            "branch": {
                                "type": "string",
                                "description": "The branch to commit the changelog changes to",
                                "example": "main"
                            },
                            "config_file": {
                                "type": "string",
                                "description": "The file path to the configuration file as stored in the project's Git repository. Defaults to '.gitlab/changelog_config.yml'",
                                "example": ".gitlab/changelog_config.yml"
                            },
                            "file": {
                                "type": "string",
                                "description": "The file to commit the changelog changes to",
                                "default": "CHANGELOG.md",
                                "example": "CHANGELOG.md"
                            },
                            "message": {
                                "type": "string",
                                "description": "The commit message to use when committing the changelog",
                                "example": "Initial commit"
                            }
                        },
                        "required": [
                            "version"
                        ],
                        "description": "Generates a changelog section for a release and commits it in a changelog file"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Generates a changelog section for a release and commits it in a changelog file"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.9",
            "tags": [
                "projects"
            ],
            "operationId": "postApiV4ProjectsIdRepositoryChangelog"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/access_tokens/self/rotate",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The project ID",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdAccessTokensSelfRotate",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "expires_at": {
                                "type": "string",
                                "format": "date",
                                "description": "The expiration date of the token",
                                "example": "2021-01-31"
                            }
                        },
                        "description": "Rotate a resource access token"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Rotate a resource access token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ResourceAccessTokenWithToken"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "405": {
                    "description": "Method not allowed"
                }
            },
            "request_body_parameters": {},
            "description": "Rotates a resource access token by passing it to the API in a header",
            "tags": [
                "personal_access_tokens"
            ],
            "operationId": "postApiV4ProjectsIdAccessTokensSelfRotate"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/rpm",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Upload a RPM package"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.7",
            "tags": [
                "rpm_packages"
            ],
            "operationId": "postApiV4ProjectsIdPackagesRpm"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/rpm/authorize",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Authorize package upload from workhorse"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.7",
            "tags": [
                "rpm_packages"
            ],
            "operationId": "postApiV4ProjectsIdPackagesRpmAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/rubygems/api/v1/gems/authorize",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Authorize a gem upload from workhorse"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.9",
            "tags": [
                "rubygem_packages"
            ],
            "operationId": "postApiV4ProjectsIdPackagesRubygemsApiV1GemsAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/rubygems/api/v1/gems",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdPackagesRubygemsApiV1Gems",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "file": {
                                "type": "file",
                                "description": "The package file to be published (generated by Multipart middleware)"
                            }
                        },
                        "required": [
                            "file"
                        ],
                        "description": "Upload a gem"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Upload a gem"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.9",
            "tags": [
                "rubygem_packages"
            ],
            "operationId": "postApiV4ProjectsIdPackagesRubygemsApiV1Gems"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/submodules/{submodule}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of a project",
                    "type": "string",
                    "required": true,
                    "example": "gitlab-org/gitlab"
                },
                {
                    "in": "path",
                    "name": "submodule",
                    "description": "Url encoded full path to submodule.",
                    "type": "string",
                    "required": true,
                    "example": "gitlab-org/gitlab-shell"
                },
                {
                    "name": "putApiV4ProjectsIdRepositorySubmodulesSubmodule",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "commit_sha": {
                                "type": "string",
                                "description": "Commit sha to update the submodule to.",
                                "example": "ed899a2f4b50b4370feeea94676502b42383c746"
                            },
                            "branch": {
                                "type": "string",
                                "description": "Name of the branch to commit into.",
                                "example": "main"
                            },
                            "commit_message": {
                                "type": "string",
                                "description": "Commit message. If no message is provided a default one will be set.",
                                "example": "Commit message"
                            }
                        },
                        "required": [
                            "commit_sha",
                            "branch"
                        ],
                        "description": "Update existing submodule reference in repository"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update existing submodule reference in repository",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_CommitDetail"
                    }
                },
                "404": {
                    "description": "404 Project Not Found"
                },
                "401": {
                    "description": "401 Unauthorized"
                },
                "400": {
                    "description": "The repository is empty"
                }
            },
            "request_body_parameters": {},
            "description": "Update existing submodule reference in repository",
            "tags": [
                "projects"
            ],
            "operationId": "putApiV4ProjectsIdRepositorySubmodulesSubmodule"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/tags",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdRepositoryTags",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "tag_name": {
                                "type": "string",
                                "description": "The name of the tag",
                                "example": "v.1.0.0"
                            },
                            "ref": {
                                "type": "string",
                                "description": "The commit sha or branch name",
                                "example": "2695effb5807a22ff3d138d593fd856244e155e7"
                            },
                            "message": {
                                "type": "string",
                                "description": "Specifying a message creates an annotated tag",
                                "example": "Release 1.0.0"
                            }
                        },
                        "required": [
                            "tag_name",
                            "ref"
                        ],
                        "description": "Create a new repository tag"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a new repository tag",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Tag"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Create a new repository tag",
            "tags": [
                "tags"
            ],
            "operationId": "postApiV4ProjectsIdRepositoryTags"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/repository/tags/{tag_name}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag_name",
                    "description": "The name of the tag",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a repository tag"
                },
                "400": {
                    "description": "Bad request"
                },
                "403": {
                    "description": "Unauthenticated"
                },
                "404": {
                    "description": "Not found"
                },
                "412": {
                    "description": "Precondition failed"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a repository tag",
            "tags": [
                "tags"
            ],
            "operationId": "deleteApiV4ProjectsIdRepositoryTagsTagName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/terraform/modules/{module_name}/{module_system}/*module_version/file/authorize",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or full path of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_name",
                    "description": "Module name",
                    "type": "string",
                    "required": true,
                    "example": "infra-registry"
                },
                {
                    "in": "path",
                    "name": "module_system",
                    "description": "Module system",
                    "type": "string",
                    "required": true,
                    "example": "aws"
                },
                {
                    "name": "putApiV4ProjectsIdPackagesTerraformModulesModuleNameModuleSystem*moduleVersionFileAuthorize",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "module_version": {
                                "type": "string",
                                "description": "Module version"
                            }
                        },
                        "required": [
                            "module_version"
                        ],
                        "description": "Workhorse authorize Terraform Module package file"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Workhorse authorize Terraform Module package file"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.11",
            "tags": [
                "terraform_registry"
            ],
            "operationId": "putApiV4ProjectsIdPackagesTerraformModulesModuleNameModuleSystem*moduleVersionFileAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/packages/terraform/modules/{module_name}/{module_system}/*module_version/file",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or full path of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "module_name",
                    "description": "Module name",
                    "type": "string",
                    "required": true,
                    "example": "infra-registry"
                },
                {
                    "in": "path",
                    "name": "module_system",
                    "description": "Module system",
                    "type": "string",
                    "required": true,
                    "example": "aws"
                },
                {
                    "in": "formData",
                    "name": "module_version",
                    "description": "Module version",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "file",
                    "description": "The package file to be published (generated by Multipart middleware)",
                    "type": "file",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Upload Terraform Module package file"
                },
                "400": {
                    "description": "Invalid file"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.11",
            "tags": [
                "terraform_registry"
            ],
            "operationId": "putApiV4ProjectsIdPackagesTerraformModulesModuleNameModuleSystem*moduleVersionFile"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/terraform/state/{name}",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "name",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Add a new Terraform state or update an existing one"
                },
                "204": {
                    "description": "No data provided"
                },
                "403": {
                    "description": "Forbidden"
                },
                "422": {
                    "description": "Validation failure"
                },
                "413": {
                    "description": "Request Entity Too Large"
                }
            },
            "request_body_parameters": {},
            "description": "Add a new Terraform state or update an existing one",
            "tags": [
                "terraform_state"
            ],
            "operationId": "postApiV4ProjectsIdTerraformStateName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/terraform/state/{name}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "name",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a Terraform state of a certain name"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Validation failure"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a Terraform state of a certain name",
            "tags": [
                "terraform_state"
            ],
            "operationId": "deleteApiV4ProjectsIdTerraformStateName"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/terraform/state/{name}/lock",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "name",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdTerraformStateNameLock",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "ID": {
                                "type": "string",
                                "description": "Terraform state lock ID"
                            },
                            "Operation": {
                                "type": "string",
                                "description": "Terraform operation"
                            },
                            "Info": {
                                "type": "string",
                                "description": "Terraform info"
                            },
                            "Who": {
                                "type": "string",
                                "description": "Terraform state lock owner"
                            },
                            "Version": {
                                "type": "string",
                                "description": "Terraform version"
                            },
                            "Created": {
                                "type": "string",
                                "description": "Terraform state lock timestamp"
                            },
                            "Path": {
                                "type": "string",
                                "description": "Terraform path"
                            }
                        },
                        "required": [
                            "ID",
                            "Operation",
                            "Info",
                            "Who",
                            "Version",
                            "Created",
                            "Path"
                        ],
                        "description": "Lock a Terraform state of a certain name"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Lock a Terraform state of a certain name"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "409": {
                    "description": "Conflict"
                },
                "422": {
                    "description": "Validation failure"
                }
            },
            "request_body_parameters": {},
            "description": "Lock a Terraform state of a certain name",
            "tags": [
                "terraform_state"
            ],
            "operationId": "postApiV4ProjectsIdTerraformStateNameLock"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/terraform/state/{name}/lock",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "ID",
                    "description": "Terraform state lock ID",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "path",
                    "name": "name",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Unlock a Terraform state of a certain name"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "409": {
                    "description": "Conflict"
                },
                "422": {
                    "description": "Validation failure"
                }
            },
            "request_body_parameters": {},
            "description": "Unlock a Terraform state of a certain name",
            "tags": [
                "terraform_state"
            ],
            "operationId": "deleteApiV4ProjectsIdTerraformStateNameLock"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/terraform/state/{name}/versions/{serial}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID or URL-encoded path of the project",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "name",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "serial",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a Terraform state version"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a Terraform state version",
            "tags": [
                "terraform_state"
            ],
            "operationId": "deleteApiV4ProjectsIdTerraformStateNameVersionsSerial"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/wikis",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdWikis",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string",
                                "description": "Title of a wiki page"
                            },
                            "front_matter": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "Front matter title of a wiki page"
                                    }
                                }
                            },
                            "content": {
                                "type": "string",
                                "description": "Content of a wiki page"
                            },
                            "format": {
                                "type": "string",
                                "description": "Format of a wiki page. Available formats are markdown, rdoc, asciidoc and org",
                                "enum": [
                                    "markdown",
                                    "rdoc",
                                    "asciidoc",
                                    "org"
                                ],
                                "default": "markdown"
                            }
                        },
                        "required": [
                            "title",
                            "content"
                        ],
                        "description": "Create a wiki page"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a wiki page",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_WikiPage"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Create a wiki page",
            "tags": [
                "wikis"
            ],
            "operationId": "postApiV4ProjectsIdWikis"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/wikis/{slug}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "slug",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4ProjectsIdWikisSlug",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string",
                                "description": "Title of a wiki page"
                            },
                            "front_matter": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "Front matter title of a wiki page"
                                    }
                                }
                            },
                            "content": {
                                "type": "string",
                                "description": "Content of a wiki page"
                            },
                            "format": {
                                "type": "string",
                                "description": "Format of a wiki page. Available formats are markdown, rdoc, asciidoc and org",
                                "enum": [
                                    "markdown",
                                    "rdoc",
                                    "asciidoc",
                                    "org"
                                ],
                                "default": "markdown"
                            }
                        },
                        "description": "Update a wiki page"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a wiki page",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_WikiPage"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Update a wiki page",
            "tags": [
                "wikis"
            ],
            "operationId": "putApiV4ProjectsIdWikisSlug"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/wikis/{slug}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "slug",
                    "description": "The slug of a wiki page",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a wiki page"
                },
                "400": {
                    "description": "Validation error"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a wiki page",
            "tags": [
                "wikis"
            ],
            "operationId": "deleteApiV4ProjectsIdWikisSlug"
        },
        {
            "server_url": "",
            "path": "/api/v4/projects/{id}/wikis/attachments",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4ProjectsIdWikisAttachments",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "file": {
                                "type": "file",
                                "description": "The attachment file to be uploaded"
                            },
                            "branch": {
                                "type": "string",
                                "description": "The name of the branch"
                            }
                        },
                        "required": [
                            "file"
                        ],
                        "description": "Upload an attachment to the wiki repository"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Upload an attachment to the wiki repository",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_WikiAttachment"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.3.",
            "tags": [
                "wikis"
            ],
            "operationId": "postApiV4ProjectsIdWikisAttachments"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/batched_background_migrations/{id}/resume",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The batched background migration id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4AdminBatchedBackgroundMigrationsIdResume",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "database": {
                                "type": "string",
                                "description": "The name of the database",
                                "enum": [
                                    "main",
                                    "ci",
                                    "sec",
                                    "embedding",
                                    "geo"
                                ],
                                "default": "main"
                            }
                        },
                        "description": "Resume a batched background migration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Resume a batched background migration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_BatchedBackgroundMigration"
                    }
                },
                "401": {
                    "description": "401 Unauthorized"
                },
                "403": {
                    "description": "403 Forbidden"
                },
                "404": {
                    "description": "404 Not found"
                },
                "422": {
                    "description": "You can resume only `paused` batched background migrations."
                }
            },
            "request_body_parameters": {},
            "description": "Resume a batched background migration",
            "tags": [
                "batched_background_migrations"
            ],
            "operationId": "putApiV4AdminBatchedBackgroundMigrationsIdResume"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/batched_background_migrations/{id}/pause",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The batched background migration id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4AdminBatchedBackgroundMigrationsIdPause",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "database": {
                                "type": "string",
                                "description": "The name of the database",
                                "enum": [
                                    "main",
                                    "ci",
                                    "sec",
                                    "embedding",
                                    "geo"
                                ],
                                "default": "main"
                            }
                        },
                        "description": "Pause a batched background migration"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Pause a batched background migration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_BatchedBackgroundMigration"
                    }
                },
                "401": {
                    "description": "401 Unauthorized"
                },
                "403": {
                    "description": "403 Forbidden"
                },
                "404": {
                    "description": "404 Not found"
                },
                "422": {
                    "description": "You can pause only `active` batched background migrations."
                }
            },
            "request_body_parameters": {},
            "description": "Pause a batched background migration",
            "tags": [
                "batched_background_migrations"
            ],
            "operationId": "putApiV4AdminBatchedBackgroundMigrationsIdPause"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/ci/variables",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4AdminCiVariables",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string",
                                "description": "The key of the variable. Max 255 characters"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the variable"
                            },
                            "value": {
                                "type": "string",
                                "description": "The value of a variable"
                            },
                            "protected": {
                                "type": "boolean",
                                "description": "Whether the variable is protected"
                            },
                            "masked": {
                                "type": "boolean",
                                "description": "Whether the variable is masked"
                            },
                            "raw": {
                                "type": "boolean",
                                "description": "Whether the variable will be expanded"
                            },
                            "variable_type": {
                                "type": "string",
                                "description": "The type of a variable. Available types are: env_var (default) and file",
                                "enum": [
                                    "env_var",
                                    "file"
                                ]
                            }
                        },
                        "required": [
                            "key",
                            "value"
                        ],
                        "description": "Create a new instance-level variable"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a new instance-level variable",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                },
                "400": {
                    "description": "400 Bad Request"
                }
            },
            "request_body_parameters": {},
            "description": "Create a new instance-level variable",
            "tags": [
                "ci_variables"
            ],
            "operationId": "postApiV4AdminCiVariables"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/ci/variables/{key}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of a variable",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4AdminCiVariablesKey",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "description": {
                                "type": "string",
                                "description": "The description of the variable"
                            },
                            "value": {
                                "type": "string",
                                "description": "The value of a variable"
                            },
                            "protected": {
                                "type": "boolean",
                                "description": "Whether the variable is protected"
                            },
                            "masked": {
                                "type": "boolean",
                                "description": "Whether the variable is masked"
                            },
                            "raw": {
                                "type": "boolean",
                                "description": "Whether the variable will be expanded"
                            },
                            "variable_type": {
                                "type": "string",
                                "description": "The type of a variable. Available types are: env_var (default) and file",
                                "enum": [
                                    "env_var",
                                    "file"
                                ]
                            }
                        },
                        "description": "Update an instance-level variable"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update an instance-level variable",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Variable"
                    }
                },
                "404": {
                    "description": "Instance Variable Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Update an instance-level variable",
            "tags": [
                "ci_variables"
            ],
            "operationId": "putApiV4AdminCiVariablesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/ci/variables/{key}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of a variable",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Instance Variable Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete an existing instance-level variable",
            "tags": [
                "ci_variables"
            ],
            "operationId": "deleteApiV4AdminCiVariablesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/clusters/{cluster_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "cluster_id",
                    "description": "The cluster ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4AdminClustersClusterId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Cluster name"
                            },
                            "enabled": {
                                "type": "boolean",
                                "description": "Enable or disable Gitlab's connection to your Kubernetes cluster"
                            },
                            "environment_scope": {
                                "type": "string",
                                "description": "The associated environment to the cluster"
                            },
                            "namespace_per_environment": {
                                "type": "boolean",
                                "description": "Deploy each environment to a separate Kubernetes namespace",
                                "default": true
                            },
                            "domain": {
                                "type": "string",
                                "description": "Cluster base domain"
                            },
                            "management_project_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the management project"
                            },
                            "managed": {
                                "type": "boolean",
                                "description": "Determines if GitLab will manage namespaces and service accounts for this cluster"
                            },
                            "platform_kubernetes_attributes": {
                                "type": "object",
                                "description": "Platform Kubernetes data",
                                "properties": {
                                    "api_url": {
                                        "type": "string",
                                        "description": "URL to access the Kubernetes API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "Token to authenticate against Kubernetes"
                                    },
                                    "ca_cert": {
                                        "type": "string",
                                        "description": "TLS certificate (needed if API is using a self-signed TLS certificate)"
                                    },
                                    "namespace": {
                                        "type": "string",
                                        "description": "Unique namespace related to Project"
                                    }
                                }
                            }
                        },
                        "description": "Edit instance cluster"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Edit instance cluster",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Cluster"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.2. Updates an existing instance cluster.",
            "tags": [
                "clusters"
            ],
            "operationId": "putApiV4AdminClustersClusterId"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/clusters/{cluster_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "cluster_id",
                    "description": "The cluster ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "403": {
                    "description": "Forbidden"
                },
                "204": {
                    "description": "Delete instance cluster",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Cluster"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.2. Deletes an existing instance cluster. Does not remove existing resources within the connected Kubernetes cluster.",
            "tags": [
                "clusters"
            ],
            "operationId": "deleteApiV4AdminClustersClusterId"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/clusters/add",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4AdminClustersAdd",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Cluster name"
                            },
                            "enabled": {
                                "type": "boolean",
                                "description": "Determines if cluster is active or not, defaults to true",
                                "default": true
                            },
                            "environment_scope": {
                                "type": "string",
                                "description": "The associated environment to the cluster",
                                "default": "*"
                            },
                            "namespace_per_environment": {
                                "type": "boolean",
                                "description": "Deploy each environment to a separate Kubernetes namespace",
                                "default": true
                            },
                            "domain": {
                                "type": "string",
                                "description": "Cluster base domain"
                            },
                            "management_project_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the management project"
                            },
                            "managed": {
                                "type": "boolean",
                                "description": "Determines if GitLab will manage namespaces and service accounts for this cluster, defaults to true",
                                "default": true
                            },
                            "platform_kubernetes_attributes": {
                                "type": "object",
                                "description": "Platform Kubernetes data",
                                "properties": {
                                    "api_url": {
                                        "type": "string",
                                        "description": "URL to access the Kubernetes API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "Token to authenticate against Kubernetes"
                                    },
                                    "ca_cert": {
                                        "type": "string",
                                        "description": "TLS certificate (needed if API is using a self-signed TLS certificate)"
                                    },
                                    "namespace": {
                                        "type": "string",
                                        "description": "Unique namespace related to Project"
                                    },
                                    "authorization_type": {
                                        "type": "string",
                                        "description": "Cluster authorization type, defaults to RBAC",
                                        "enum": [
                                            "unknown_authorization",
                                            "rbac",
                                            "abac"
                                        ],
                                        "default": "rbac"
                                    }
                                },
                                "required": [
                                    "api_url",
                                    "token"
                                ]
                            }
                        },
                        "required": [
                            "name",
                            "platform_kubernetes_attributes"
                        ],
                        "description": "Add existing instance cluster"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add existing instance cluster",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Cluster"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.2. Adds an existing Kubernetes instance cluster.",
            "tags": [
                "clusters"
            ],
            "operationId": "postApiV4AdminClustersAdd"
        },
        {
            "server_url": "",
            "path": "/api/v4/admin/migrations/{timestamp}/mark",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "timestamp",
                    "description": "The migration version timestamp",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4AdminMigrationsTimestampMark",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "database": {
                                "type": "string",
                                "description": "The name of the database",
                                "enum": [
                                    "main",
                                    "ci",
                                    "sec",
                                    "embedding",
                                    "geo"
                                ],
                                "default": "main"
                            }
                        },
                        "description": "Mark the migration as successfully executed"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "201 Created"
                },
                "401": {
                    "description": "401 Unauthorized"
                },
                "403": {
                    "description": "403 Forbidden"
                },
                "404": {
                    "description": "404 Not found"
                },
                "422": {
                    "description": "You can mark only pending migrations"
                }
            },
            "request_body_parameters": {},
            "description": "Mark the migration as successfully executed",
            "tags": [
                "migrations"
            ],
            "operationId": "postApiV4AdminMigrationsTimestampMark"
        },
        {
            "server_url": "",
            "path": "/api/v4/broadcast_messages",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4BroadcastMessages",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "message": {
                                "type": "string",
                                "description": "Message to display"
                            },
                            "starts_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Starting time",
                                "default": {}
                            },
                            "ends_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Ending time",
                                "default": {}
                            },
                            "color": {
                                "type": "string",
                                "description": "Background color (Deprecated. Use \"theme\" instead.)"
                            },
                            "font": {
                                "type": "string",
                                "description": "Foreground color (Deprecated. Use \"theme\" instead.)"
                            },
                            "target_access_levels": {
                                "type": "array",
                                "description": "Target user roles",
                                "items": {
                                    "type": "integer",
                                    "format": "int32",
                                    "enum": [
                                        10,
                                        15,
                                        20,
                                        30,
                                        40,
                                        50
                                    ]
                                }
                            },
                            "target_path": {
                                "type": "string",
                                "description": "Target path"
                            },
                            "broadcast_type": {
                                "type": "string",
                                "description": "Broadcast type. Defaults to banner",
                                "enum": [
                                    "banner",
                                    "notification"
                                ],
                                "default": {}
                            },
                            "dismissable": {
                                "type": "boolean",
                                "description": "Is dismissable"
                            },
                            "theme": {
                                "type": "string",
                                "description": "The theme for the message",
                                "enum": [
                                    "indigo",
                                    "light-indigo",
                                    "blue",
                                    "light-blue",
                                    "green",
                                    "light-green",
                                    "red",
                                    "light-red",
                                    "dark",
                                    "light"
                                ]
                            }
                        },
                        "required": [
                            "message"
                        ],
                        "description": "Create a broadcast message"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a broadcast message",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_System_BroadcastMessage"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.12.",
            "tags": [
                "broadcast_messages"
            ],
            "operationId": "postApiV4BroadcastMessages"
        },
        {
            "server_url": "",
            "path": "/api/v4/broadcast_messages/{id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "Broadcast message ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4BroadcastMessagesId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "message": {
                                "type": "string",
                                "description": "Message to display"
                            },
                            "starts_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Starting time"
                            },
                            "ends_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Ending time"
                            },
                            "color": {
                                "type": "string",
                                "description": "Background color (Deprecated. Use \"theme\" instead.)"
                            },
                            "font": {
                                "type": "string",
                                "description": "Foreground color (Deprecated. Use \"theme\" instead.)"
                            },
                            "target_access_levels": {
                                "type": "array",
                                "description": "Target user roles",
                                "items": {
                                    "type": "integer",
                                    "format": "int32",
                                    "enum": [
                                        10,
                                        15,
                                        20,
                                        30,
                                        40,
                                        50
                                    ]
                                }
                            },
                            "target_path": {
                                "type": "string",
                                "description": "Target path"
                            },
                            "broadcast_type": {
                                "type": "string",
                                "description": "Broadcast Type",
                                "enum": [
                                    "banner",
                                    "notification"
                                ]
                            },
                            "dismissable": {
                                "type": "boolean",
                                "description": "Is dismissable"
                            },
                            "theme": {
                                "type": "string",
                                "description": "The theme for the message",
                                "enum": [
                                    "indigo",
                                    "light-indigo",
                                    "blue",
                                    "light-blue",
                                    "green",
                                    "light-green",
                                    "red",
                                    "light-red",
                                    "dark",
                                    "light"
                                ]
                            }
                        },
                        "description": "Update a broadcast message"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a broadcast message",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_System_BroadcastMessage"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.12.",
            "tags": [
                "broadcast_messages"
            ],
            "operationId": "putApiV4BroadcastMessagesId"
        },
        {
            "server_url": "",
            "path": "/api/v4/broadcast_messages/{id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "Broadcast message ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Delete a broadcast message",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_System_BroadcastMessage"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.12.",
            "tags": [
                "broadcast_messages"
            ],
            "operationId": "deleteApiV4BroadcastMessagesId"
        },
        {
            "server_url": "",
            "path": "/api/v4/applications",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4Applications",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the application.",
                                "example": "MyApplication"
                            },
                            "redirect_uri": {
                                "type": "string",
                                "description": "Redirect URI of the application.",
                                "example": "https://redirect.uri"
                            },
                            "scopes": {
                                "type": "string",
                                "description": "Scopes of the application. You can specify multiple scopes by separating\\\n                                 each scope using a space"
                            },
                            "confidential": {
                                "type": "boolean",
                                "description": "The application is used where the client secret can be kept confidential. Native mobile apps \\\n                        and Single Page Apps are considered non-confidential. Defaults to true if not supplied",
                                "default": true
                            }
                        },
                        "required": [
                            "name",
                            "redirect_uri",
                            "scopes"
                        ],
                        "description": "Create a new application"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Create a new application",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ApplicationWithSecret"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 10.5",
            "tags": [
                "applications"
            ],
            "operationId": "postApiV4Applications"
        },
        {
            "server_url": "",
            "path": "/api/v4/applications/{id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of the application (not the application_id)",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete an application"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a specific application",
            "tags": [
                "applications"
            ],
            "operationId": "deleteApiV4ApplicationsId"
        },
        {
            "server_url": "",
            "path": "/api/v4/applications/{id}/renew-secret",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of the application (not the application_id)",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Renew an application secret",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_ApplicationWithSecret"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Renew the secret of a specific application",
            "tags": [
                "applications"
            ],
            "operationId": "postApiV4ApplicationsIdRenewSecret"
        },
        {
            "server_url": "",
            "path": "/api/v4/bulk_imports",
            "method": "post",
            "parameters": [
                {
                    "in": "formData",
                    "name": "configuration[url]",
                    "description": "Source GitLab instance URL",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "configuration[access_token]",
                    "description": "Access token to the source GitLab instance",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "formData",
                    "name": "entities[source_type]",
                    "description": "Source entity type",
                    "type": "array",
                    "required": true,
                    "items": {
                        "type": "string",
                        "enum": [
                            "group_entity",
                            "project_entity"
                        ]
                    }
                },
                {
                    "in": "formData",
                    "name": "entities[source_full_path]",
                    "description": "Relative path of the source entity to import",
                    "type": "array",
                    "required": true,
                    "example": "'source/full/path' not 'https://example.com/source/full/path'",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "formData",
                    "name": "entities[destination_namespace]",
                    "description": "Destination namespace for the entity",
                    "type": "array",
                    "required": true,
                    "example": "'destination_namespace' or 'destination/namespace'",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "formData",
                    "name": "entities[destination_slug]",
                    "description": "Destination slug for the entity",
                    "type": "array",
                    "required": false,
                    "example": "'destination_slug' not 'destination/slug'",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "formData",
                    "name": "entities[destination_name]",
                    "description": "Deprecated: Use :destination_slug instead. Destination slug for the entity",
                    "type": "array",
                    "required": false,
                    "example": "'destination_slug' not 'destination/slug'",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "formData",
                    "name": "entities[migrate_projects]",
                    "description": "Indicates group migration should include nested projects",
                    "type": "array",
                    "default": true,
                    "required": false,
                    "items": {
                        "type": "boolean"
                    }
                },
                {
                    "in": "formData",
                    "name": "entities[migrate_memberships]",
                    "description": "The option to migrate memberships or not",
                    "type": "array",
                    "default": true,
                    "required": false,
                    "items": {
                        "type": "boolean"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Start a new GitLab Migration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_BulkImport"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.2.",
            "tags": [
                "bulk_imports"
            ],
            "operationId": "postApiV4BulkImports"
        },
        {
            "server_url": "",
            "path": "/api/v4/bulk_imports/{import_id}/cancel",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "import_id",
                    "description": "The ID of user's GitLab Migration",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Cancel GitLab Migration",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_BulkImport"
                    }
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.1",
            "tags": [
                "bulk_imports"
            ],
            "operationId": "postApiV4BulkImportsImportIdCancel"
        },
        {
            "server_url": "",
            "path": "/api/v4/runners",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4Runners",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "Registration token"
                            },
                            "description": {
                                "type": "string",
                                "description": "Description of the runner"
                            },
                            "maintainer_note": {
                                "type": "string",
                                "description": "Deprecated: see `maintenance_note`"
                            },
                            "maintenance_note": {
                                "type": "string",
                                "description": "Free-form maintenance notes for the runner (1024 characters)"
                            },
                            "info": {
                                "type": "object",
                                "description": "Runner's metadata",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Runner's name"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "Runner's version"
                                    },
                                    "revision": {
                                        "type": "string",
                                        "description": "Runner's revision"
                                    },
                                    "platform": {
                                        "type": "string",
                                        "description": "Runner's platform"
                                    },
                                    "architecture": {
                                        "type": "string",
                                        "description": "Runner's architecture"
                                    }
                                }
                            },
                            "active": {
                                "type": "boolean",
                                "description": "Deprecated: Use `paused` instead. Specifies if the runner is allowed to receive new jobs"
                            },
                            "paused": {
                                "type": "boolean",
                                "description": "Specifies if the runner should ignore new jobs"
                            },
                            "locked": {
                                "type": "boolean",
                                "description": "Specifies if the runner should be locked for the current project"
                            },
                            "access_level": {
                                "type": "string",
                                "description": "The access level of the runner",
                                "enum": [
                                    "not_protected",
                                    "ref_protected"
                                ]
                            },
                            "run_untagged": {
                                "type": "boolean",
                                "description": "Specifies if the runner should handle untagged jobs"
                            },
                            "tag_list": {
                                "type": "array",
                                "description": "A list of runner tags",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "maximum_timeout": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum timeout that limits the amount of time (in seconds) that runners can run jobs"
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Register a new runner"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Register a new runner",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_RunnerRegistrationDetails"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "410": {
                    "description": "Gone"
                }
            },
            "request_body_parameters": {},
            "description": "Register a new runner for the instance",
            "tags": [
                "runners"
            ],
            "operationId": "postApiV4Runners"
        },
        {
            "server_url": "",
            "path": "/api/v4/runners",
            "method": "delete",
            "parameters": [
                {
                    "in": "query",
                    "name": "token",
                    "description": "The runner's authentication token",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a registered runner"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a registered runner",
            "tags": [
                "runners"
            ],
            "operationId": "deleteApiV4Runners"
        },
        {
            "server_url": "",
            "path": "/api/v4/runners/managers",
            "method": "delete",
            "parameters": [
                {
                    "in": "query",
                    "name": "token",
                    "description": "The runner's authentication token",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "query",
                    "name": "system_id",
                    "description": "The runner's system identifier.",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Runner manager was deleted"
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "Delete a registered runner manager",
            "tags": [
                "runners"
            ],
            "operationId": "deleteApiV4RunnersManagers"
        },
        {
            "server_url": "",
            "path": "/api/v4/runners/verify",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4RunnersVerify",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The runner's authentication token"
                            },
                            "system_id": {
                                "type": "string",
                                "description": "The runner's system identifier"
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Validate authentication credentials"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Credentials are valid"
                },
                "403": {
                    "description": "Forbidden"
                },
                "422": {
                    "description": "Runner is orphaned"
                }
            },
            "request_body_parameters": {},
            "description": "Validate authentication credentials",
            "tags": [
                "runners"
            ],
            "operationId": "postApiV4RunnersVerify"
        },
        {
            "server_url": "",
            "path": "/api/v4/runners/reset_authentication_token",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4RunnersResetAuthenticationToken",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "The current authentication token of the runner"
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Reset runner authentication token with current token"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Reset runner authentication token with current token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_ResetTokenResult"
                    }
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Reset runner authentication token with current token",
            "tags": [
                "runners"
            ],
            "operationId": "postApiV4RunnersResetAuthenticationToken"
        },
        {
            "server_url": "",
            "path": "/api/v4/runners/{id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a runner",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4RunnersId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "description": {
                                "type": "string",
                                "description": "The description of the runner"
                            },
                            "active": {
                                "type": "boolean",
                                "description": "Deprecated: Use `paused` instead. Flag indicating whether the runner is allowed to receive jobs"
                            },
                            "paused": {
                                "type": "boolean",
                                "description": "Specifies if the runner should ignore new jobs"
                            },
                            "tag_list": {
                                "type": "array",
                                "description": "The list of tags for a runner",
                                "example": "['macos', 'shell']",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "run_untagged": {
                                "type": "boolean",
                                "description": "Specifies if the runner can execute untagged jobs"
                            },
                            "locked": {
                                "type": "boolean",
                                "description": "Specifies if the runner is locked"
                            },
                            "access_level": {
                                "type": "string",
                                "description": "The access level of the runner",
                                "enum": [
                                    "not_protected",
                                    "ref_protected"
                                ]
                            },
                            "maximum_timeout": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum timeout that limits the amount of time (in seconds) that runners can run jobs"
                            },
                            "maintenance_note": {
                                "type": "string",
                                "description": "Free-form maintenance notes for the runner (1024 characters)"
                            }
                        },
                        "description": "Update runner's details"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update runner's details",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_RunnerDetails"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "No access granted"
                },
                "404": {
                    "description": "Runner not found"
                }
            },
            "request_body_parameters": {},
            "description": "Update runner's details",
            "tags": [
                "runners"
            ],
            "operationId": "putApiV4RunnersId"
        },
        {
            "server_url": "",
            "path": "/api/v4/runners/{id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a runner",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "401": {
                    "description": "Unauthorized"
                },
                "204": {
                    "description": "Remove a runner",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_Runner"
                    }
                },
                "403": {
                    "description": "No access granted"
                },
                "404": {
                    "description": "Runner not found"
                },
                "412": {
                    "description": "Precondition Failed"
                }
            },
            "request_body_parameters": {},
            "description": "Remove a runner",
            "tags": [
                "runners"
            ],
            "operationId": "deleteApiV4RunnersId"
        },
        {
            "server_url": "",
            "path": "/api/v4/runners/{id}/reset_authentication_token",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of the runner",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Reset runner authentication token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_ResetTokenResult"
                    }
                },
                "403": {
                    "description": "No access granted"
                },
                "404": {
                    "description": "Runner not found"
                }
            },
            "request_body_parameters": {},
            "description": "Reset runner authentication token",
            "tags": [
                "runners"
            ],
            "operationId": "postApiV4RunnersIdResetAuthenticationToken"
        },
        {
            "server_url": "",
            "path": "/api/v4/runners/reset_registration_token",
            "method": "post",
            "parameters": [],
            "responses": {
                "201": {
                    "description": "Reset runner registration token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_ResetTokenResult"
                    }
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Reset runner registration token",
            "tags": [
                "runners",
                "groups"
            ],
            "operationId": "postApiV4RunnersResetRegistrationToken"
        },
        {
            "server_url": "",
            "path": "/api/v4/jobs/request",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4JobsRequest",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "Runner's authentication token"
                            },
                            "system_id": {
                                "type": "string",
                                "description": "Runner's system identifier"
                            },
                            "last_update": {
                                "type": "string",
                                "description": "Runner's queue last_update token"
                            },
                            "info": {
                                "type": "object",
                                "description": "Runner's metadata",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Runner's name"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "Runner's version"
                                    },
                                    "revision": {
                                        "type": "string",
                                        "description": "Runner's revision"
                                    },
                                    "platform": {
                                        "type": "string",
                                        "description": "Runner's platform"
                                    },
                                    "architecture": {
                                        "type": "string",
                                        "description": "Runner's architecture"
                                    },
                                    "executor": {
                                        "type": "string",
                                        "description": "Runner's executor"
                                    },
                                    "features": {
                                        "type": "object",
                                        "description": "Runner's features"
                                    },
                                    "config": {
                                        "type": "object",
                                        "description": "Runner's config",
                                        "properties": {
                                            "gpus": {
                                                "type": "string",
                                                "description": "GPUs enabled"
                                            }
                                        }
                                    }
                                }
                            },
                            "session": {
                                "type": "object",
                                "description": "Runner's session data",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "Session's url"
                                    },
                                    "certificate": {
                                        "type": "string",
                                        "description": "Session's certificate"
                                    },
                                    "authorization": {
                                        "type": "string",
                                        "description": "Session's authorization"
                                    }
                                }
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Request a job"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Job was scheduled"
                },
                "204": {
                    "description": "No job for Runner"
                },
                "403": {
                    "description": "Forbidden"
                },
                "409": {
                    "description": "Conflict"
                },
                "422": {
                    "description": "Runner is orphaned"
                }
            },
            "request_body_parameters": {},
            "description": "Request a job",
            "tags": [
                "jobs"
            ],
            "operationId": "postApiV4JobsRequest"
        },
        {
            "server_url": "",
            "path": "/api/v4/jobs/{id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "Job's ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4JobsId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "Job token"
                            },
                            "state": {
                                "type": "string",
                                "description": "Job's status: success, failed"
                            },
                            "checksum": {
                                "type": "string",
                                "description": "Job's trace CRC32 checksum"
                            },
                            "failure_reason": {
                                "type": "string",
                                "description": "Job's failure_reason"
                            },
                            "output": {
                                "type": "object",
                                "description": "Build log state",
                                "properties": {
                                    "checksum": {
                                        "type": "string",
                                        "description": "Job's trace CRC32 checksum"
                                    },
                                    "bytesize": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Job's trace size in bytes"
                                    }
                                }
                            },
                            "exit_code": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Job's exit code"
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "description": "Update a job"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Job was updated"
                },
                "202": {
                    "description": "Update accepted"
                },
                "400": {
                    "description": "Unknown parameters"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Update a job",
            "tags": [
                "jobs"
            ],
            "operationId": "putApiV4JobsId"
        },
        {
            "server_url": "",
            "path": "/api/v4/jobs/{id}/trace",
            "method": "patch",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "Job's ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "patchApiV4JobsIdTrace",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "Job's authentication token"
                            },
                            "debug_trace": {
                                "type": "boolean",
                                "description": "Enable or Disable the debug trace"
                            }
                        },
                        "description": "Append a patch to the job trace"
                    }
                }
            ],
            "responses": {
                "202": {
                    "description": "Trace was patched"
                },
                "400": {
                    "description": "Missing Content-Range header"
                },
                "403": {
                    "description": "Forbidden"
                },
                "416": {
                    "description": "Range not satisfiable"
                }
            },
            "request_body_parameters": {},
            "description": "Append a patch to the job trace",
            "tags": [
                "jobs"
            ],
            "operationId": "patchApiV4JobsIdTrace"
        },
        {
            "server_url": "",
            "path": "/api/v4/jobs/{id}/artifacts/authorize",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "Job's ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4JobsIdArtifactsAuthorize",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "Job's authentication token"
                            },
                            "filesize": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Size of artifact file"
                            },
                            "artifact_type": {
                                "type": "string",
                                "description": "The type of artifact",
                                "enum": [
                                    "archive",
                                    "metadata",
                                    "trace",
                                    "junit",
                                    "sast",
                                    "dependency_scanning",
                                    "container_scanning",
                                    "dast",
                                    "codequality",
                                    "license_scanning",
                                    "performance",
                                    "metrics",
                                    "metrics_referee",
                                    "network_referee",
                                    "lsif",
                                    "dotenv",
                                    "cobertura",
                                    "terraform",
                                    "accessibility",
                                    "cluster_applications",
                                    "secret_detection",
                                    "requirements",
                                    "coverage_fuzzing",
                                    "browser_performance",
                                    "load_performance",
                                    "api_fuzzing",
                                    "cluster_image_scanning",
                                    "cyclonedx",
                                    "requirements_v2",
                                    "annotations",
                                    "repository_xray",
                                    "jacoco"
                                ],
                                "default": "archive"
                            }
                        },
                        "description": "Authorize uploading job artifact"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Upload allowed"
                },
                "403": {
                    "description": "Forbidden"
                },
                "405": {
                    "description": "Artifacts support not enabled"
                },
                "413": {
                    "description": "File too large"
                }
            },
            "request_body_parameters": {},
            "description": "Authorize uploading job artifact",
            "tags": [
                "jobs"
            ],
            "operationId": "postApiV4JobsIdArtifactsAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/jobs/{id}/artifacts",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "Job's ID",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4JobsIdArtifacts",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "file": {
                                "type": "file",
                                "description": "The artifact file to store (generated by Multipart middleware)"
                            },
                            "token": {
                                "type": "string",
                                "description": "Job's authentication token"
                            },
                            "expire_in": {
                                "type": "string",
                                "description": "Specify when artifact should expire"
                            },
                            "artifact_type": {
                                "type": "string",
                                "description": "The type of artifact",
                                "enum": [
                                    "archive",
                                    "metadata",
                                    "trace",
                                    "junit",
                                    "sast",
                                    "dependency_scanning",
                                    "container_scanning",
                                    "dast",
                                    "codequality",
                                    "license_scanning",
                                    "performance",
                                    "metrics",
                                    "metrics_referee",
                                    "network_referee",
                                    "lsif",
                                    "dotenv",
                                    "cobertura",
                                    "terraform",
                                    "accessibility",
                                    "cluster_applications",
                                    "secret_detection",
                                    "requirements",
                                    "coverage_fuzzing",
                                    "browser_performance",
                                    "load_performance",
                                    "api_fuzzing",
                                    "cluster_image_scanning",
                                    "cyclonedx",
                                    "requirements_v2",
                                    "annotations",
                                    "repository_xray",
                                    "jacoco"
                                ],
                                "default": "archive"
                            },
                            "artifact_format": {
                                "type": "string",
                                "description": "The format of artifact",
                                "enum": [
                                    "raw",
                                    "zip",
                                    "gzip"
                                ],
                                "default": "zip"
                            },
                            "metadata": {
                                "type": "file",
                                "description": "The artifact metadata to store (generated by Multipart middleware)"
                            },
                            "accessibility": {
                                "type": "string",
                                "description": "Specify accessibility level of artifact private/public"
                            }
                        },
                        "required": [
                            "file"
                        ],
                        "description": "Upload a job artifact"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Artifact uploaded"
                },
                "400": {
                    "description": "Bad request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "405": {
                    "description": "Artifacts support not enabled"
                },
                "413": {
                    "description": "File too large"
                }
            },
            "request_body_parameters": {},
            "description": "Upload a job artifact",
            "tags": [
                "jobs"
            ],
            "operationId": "postApiV4JobsIdArtifacts"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete Package"
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.5",
            "tags": [
                "conan_packages"
            ],
            "operationId": "deleteApiV4PackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannel"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/packages/{conan_package_reference}/upload_urls",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Conan package ID",
                    "type": "string",
                    "required": true,
                    "example": "103f6067a947f366ef91fc1b7da351c588d1827f"
                }
            ],
            "responses": {
                "200": {
                    "description": "Package Upload Urls",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_UploadUrls"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.4",
            "tags": [
                "conan_packages"
            ],
            "operationId": "postApiV4PackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelPackagesConanPackageReferenceUploadUrls"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/upload_urls",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                }
            ],
            "responses": {
                "200": {
                    "description": "Recipe Upload Urls",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Packages_Conan_UploadUrls"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.4",
            "tags": [
                "conan_packages"
            ],
            "operationId": "postApiV4PackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelUploadUrls"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/export/{file_name}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Conan Recipe Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conanfile.py"
                },
                {
                    "name": "putApiV4PackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionExportFileName",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "file": {
                                "type": "file",
                                "description": "The package file to be published (generated by Multipart middleware)"
                            }
                        },
                        "required": [
                            "file"
                        ],
                        "description": "Upload recipe package files"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Upload recipe package files"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.6",
            "tags": [
                "conan_packages"
            ],
            "operationId": "putApiV4PackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionExportFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/export/{file_name}/authorize",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Conan Recipe Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conanfile.py"
                }
            ],
            "responses": {
                "200": {
                    "description": "Workhorse authorize the conan recipe file"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.6",
            "tags": [
                "conan_packages"
            ],
            "operationId": "putApiV4PackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionExportFileNameAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/package/{conan_package_reference}/{package_revision}/{file_name}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Conan Recipe Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Conan Package ID",
                    "type": "string",
                    "required": true,
                    "example": "103f6067a947f366ef91fc1b7da351c588d1827f"
                },
                {
                    "in": "path",
                    "name": "package_revision",
                    "description": "Conan Package Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conaninfo.txt"
                },
                {
                    "name": "putApiV4PackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionPackageConanPackageReferencePackageRevisionFileName",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "file": {
                                "type": "file",
                                "description": "The package file to be published (generated by Multipart middleware)"
                            }
                        },
                        "required": [
                            "file"
                        ],
                        "description": "Upload package files"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Upload package files"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.6",
            "tags": [
                "conan_packages"
            ],
            "operationId": "putApiV4PackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionPackageConanPackageReferencePackageRevisionFileName"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/package/{conan_package_reference}/{package_revision}/{file_name}/authorize",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true,
                    "example": "my-package"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "description": "Package version",
                    "type": "string",
                    "required": true,
                    "example": "1.0"
                },
                {
                    "in": "path",
                    "name": "package_username",
                    "description": "Package username",
                    "type": "string",
                    "required": true,
                    "example": "my-group+my-project"
                },
                {
                    "in": "path",
                    "name": "package_channel",
                    "description": "Package channel",
                    "type": "string",
                    "required": true,
                    "example": "stable"
                },
                {
                    "in": "path",
                    "name": "recipe_revision",
                    "description": "Conan Recipe Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "conan_package_reference",
                    "description": "Conan Package ID",
                    "type": "string",
                    "required": true,
                    "example": "103f6067a947f366ef91fc1b7da351c588d1827f"
                },
                {
                    "in": "path",
                    "name": "package_revision",
                    "description": "Conan Package Revision",
                    "type": "string",
                    "required": true,
                    "example": "0"
                },
                {
                    "in": "path",
                    "name": "file_name",
                    "description": "Package file name",
                    "type": "string",
                    "enum": [
                        "conanfile.py",
                        "conanmanifest.txt",
                        "conan_sources.tgz",
                        "conan_export.tgz",
                        "conaninfo.txt",
                        "conan_package.tgz"
                    ],
                    "required": true,
                    "example": "conaninfo.txt"
                }
            ],
            "responses": {
                "200": {
                    "description": "Workhorse authorize the conan package file"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.6",
            "tags": [
                "conan_packages"
            ],
            "operationId": "putApiV4PackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionPackageConanPackageReferencePackageRevisionFileNameAuthorize"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/npm/-/package/*package_name/dist-tags/{tag}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "tag",
                    "description": "Package dist-tag",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4PackagesNpmPackage*packageNameDistTagsTag",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "package_name": {
                                "type": "string",
                                "description": "Package name"
                            }
                        },
                        "required": [
                            "package_name"
                        ],
                        "description": "Create or Update the given tag for the given NPM package and version"
                    }
                }
            ],
            "responses": {
                "204": {
                    "description": "Create or Update the given tag for the given NPM package and version"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.7",
            "tags": [
                "npm_packages"
            ],
            "operationId": "putApiV4PackagesNpmPackage*packageNameDistTagsTag"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/npm/-/package/*package_name/dist-tags/{tag}",
            "method": "delete",
            "parameters": [
                {
                    "in": "query",
                    "name": "package_name",
                    "description": "Package name",
                    "type": "string",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "tag",
                    "description": "Package dist-tag",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Deletes the given tag"
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.7",
            "tags": [
                "npm_packages"
            ],
            "operationId": "deleteApiV4PackagesNpmPackage*packageNameDistTagsTag"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/npm/-/npm/v1/security/advisories/bulk",
            "method": "post",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Ok"
                },
                "307": {
                    "description": "Temporary Redirect"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.6",
            "tags": [
                "npm_packages"
            ],
            "operationId": "postApiV4PackagesNpmNpmV1SecurityAdvisoriesBulk"
        },
        {
            "server_url": "",
            "path": "/api/v4/packages/npm/-/npm/v1/security/audits/quick",
            "method": "post",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Ok"
                },
                "307": {
                    "description": "Temporary Redirect"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.6",
            "tags": [
                "npm_packages"
            ],
            "operationId": "postApiV4PackagesNpmNpmV1SecurityAuditsQuick"
        },
        {
            "server_url": "",
            "path": "/api/v4/container_registry_event/events",
            "method": "post",
            "parameters": [],
            "responses": {
                "200": {
                    "description": "Success"
                },
                "401": {
                    "description": "Invalid Token"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 12.10",
            "tags": [
                "container_registry_event"
            ],
            "operationId": "postApiV4ContainerRegistryEventEvents"
        },
        {
            "server_url": "",
            "path": "/api/v4/features/{name}",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "name",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4FeaturesName",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "`true` or `false` to enable/disable, or an integer for percentage of time"
                            },
                            "key": {
                                "type": "string",
                                "description": "`percentage_of_actors` or `percentage_of_time` (default)"
                            },
                            "feature_group": {
                                "type": "string",
                                "description": "A Feature group name"
                            },
                            "user": {
                                "type": "string",
                                "description": "A GitLab username or comma-separated multiple usernames"
                            },
                            "group": {
                                "type": "string",
                                "description": "A GitLab group's path, for example `gitlab-org`, or comma-separated multiple group paths"
                            },
                            "namespace": {
                                "type": "string",
                                "description": "A GitLab group or user namespace's path, for example `john-doe`, or comma-separated multiple namespace paths. Introduced in GitLab 15.0."
                            },
                            "project": {
                                "type": "string",
                                "description": "A projects path, for example `gitlab-org/gitlab-foss`, or comma-separated multiple project paths"
                            },
                            "repository": {
                                "type": "string",
                                "description": "A repository path, for example `gitlab-org/gitlab-test.git`, `gitlab-org/gitlab-test.wiki.git`, `snippets/21.git`, to name a few. Use comma to separate multiple repository paths"
                            },
                            "force": {
                                "type": "boolean",
                                "description": "Skip feature flag validation checks, such as a YAML definition"
                            }
                        },
                        "required": [
                            "value"
                        ],
                        "description": "Set or create a feature"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Set or create a feature",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Feature"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Set a feature's gate value. If a feature with the given name doesn't exist yet, it's created. The value can be a boolean, or an integer to indicate percentage of time.",
            "tags": [
                "features"
            ],
            "operationId": "postApiV4FeaturesName"
        },
        {
            "server_url": "",
            "path": "/api/v4/features/{name}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "name",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a feature"
                }
            },
            "request_body_parameters": {},
            "description": "Removes a feature gate. Response is equal when the gate exists, or doesn't.",
            "tags": [
                "features"
            ],
            "operationId": "deleteApiV4FeaturesName"
        },
        {
            "server_url": "",
            "path": "/api/v4/geo/status",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4GeoStatus",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "data": {
                                "type": "object",
                                "properties": {
                                    "geo_node_id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Geo Node ID to look up its status"
                                    },
                                    "db_replication_lag_seconds": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "DB replication lag in seconds"
                                    },
                                    "last_event_id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Last event ID"
                                    },
                                    "last_event_date": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "Last event date"
                                    },
                                    "cursor_last_event_id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Cursor last event ID"
                                    },
                                    "cursor_last_event_date": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "Cursor last event date"
                                    },
                                    "last_successful_status_check_at": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "Last successful status check date"
                                    },
                                    "status_message": {
                                        "type": "string",
                                        "description": "Status message"
                                    },
                                    "replication_slots_count": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Replication slots count"
                                    },
                                    "replication_slots_used_count": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Replication slots used count"
                                    },
                                    "replication_slots_max_retained_wal_bytes": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Maximum number of bytes retained in the WAL on the primary"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "Gitlab version"
                                    },
                                    "revision": {
                                        "type": "string",
                                        "description": "Gitlab revision"
                                    },
                                    "status": {
                                        "type": "object",
                                        "properties": {
                                            "projects_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Projects count"
                                            },
                                            "container_repositories_replication_enabled": {
                                                "type": "boolean",
                                                "description": "Container repositories replication enabled"
                                            },
                                            "lfs_objects_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "LFS objects count"
                                            },
                                            "lfs_objects_checksum_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "LFS objects checksum total count"
                                            },
                                            "lfs_objects_checksummed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "LFS objects checksummed count"
                                            },
                                            "lfs_objects_checksum_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "LFS objects checksum failed count"
                                            },
                                            "lfs_objects_synced_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "LFS objects synced count"
                                            },
                                            "lfs_objects_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "LFS objects failed count"
                                            },
                                            "lfs_objects_registry_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "LFS objects registry count"
                                            },
                                            "lfs_objects_verification_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "LFS objects verification total count"
                                            },
                                            "lfs_objects_verified_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "LFS objects verified count"
                                            },
                                            "lfs_objects_verification_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "LFS objects verification failed count"
                                            },
                                            "merge_request_diffs_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Merge request diffs count"
                                            },
                                            "merge_request_diffs_checksum_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Merge request diffs checksum total count"
                                            },
                                            "merge_request_diffs_checksummed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Merge request diffs checksummed count"
                                            },
                                            "merge_request_diffs_checksum_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Merge request diffs checksum failed count"
                                            },
                                            "merge_request_diffs_synced_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Merge request diffs synced count"
                                            },
                                            "merge_request_diffs_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Merge request diffs failed count"
                                            },
                                            "merge_request_diffs_registry_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Merge request diffs registry count"
                                            },
                                            "merge_request_diffs_verification_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Merge request diffs verification total count"
                                            },
                                            "merge_request_diffs_verified_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Merge request diffs verified count"
                                            },
                                            "merge_request_diffs_verification_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Merge request diffs verified count"
                                            },
                                            "package_files_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Packages files count"
                                            },
                                            "package_files_checksum_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Packages files checksum total count"
                                            },
                                            "package_files_checksummed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Packages files checksummed count"
                                            },
                                            "package_files_checksum_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Packages files checksum failed count"
                                            },
                                            "package_files_synced_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Packages files synced count"
                                            },
                                            "package_files_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Packages files failed count"
                                            },
                                            "package_files_registry_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Packages files registry count"
                                            },
                                            "package_files_verification_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Packages files verification total count"
                                            },
                                            "package_files_verified_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Packages files verified count"
                                            },
                                            "package_files_verification_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Packages files verification failed count"
                                            },
                                            "terraform_state_versions_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Terraform state versions count"
                                            },
                                            "terraform_state_versions_checksum_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Terraform state versions checksum total count"
                                            },
                                            "terraform_state_versions_checksummed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Terraform state versions checksummed count"
                                            },
                                            "terraform_state_versions_checksum_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Terraform state versions checksum failed count"
                                            },
                                            "terraform_state_versions_synced_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Terraform state versions synced count"
                                            },
                                            "terraform_state_versions_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Terraform state versions failed count"
                                            },
                                            "terraform_state_versions_registry_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Terraform state versions registry count"
                                            },
                                            "terraform_state_versions_verification_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Terraform state versions verification total count"
                                            },
                                            "terraform_state_versions_verified_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Terraform state versions verified count"
                                            },
                                            "terraform_state_versions_verification_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Terraform state versions verification failed count"
                                            },
                                            "snippet_repositories_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Snippet repositories count"
                                            },
                                            "snippet_repositories_checksum_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Snippet repositories checksum total count"
                                            },
                                            "snippet_repositories_checksummed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Snippet repositories checksummed count"
                                            },
                                            "snippet_repositories_checksum_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Snippet repositories checksum failed count"
                                            },
                                            "snippet_repositories_synced_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Snippet repositories synced count"
                                            },
                                            "snippet_repositories_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Snippet repositories failed count"
                                            },
                                            "snippet_repositories_registry_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Snippet repositories registry count"
                                            },
                                            "snippet_repositories_verification_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Snippet repositories verification total count"
                                            },
                                            "snippet_repositories_verified_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Snippet repositories verified count"
                                            },
                                            "snippet_repositories_verification_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Snippet repositories verification failed count"
                                            },
                                            "group_wiki_repositories_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Group wiki repositories count"
                                            },
                                            "group_wiki_repositories_checksum_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Group wiki repositories checksum total count"
                                            },
                                            "group_wiki_repositories_checksummed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Group wiki repositories checksummed count"
                                            },
                                            "group_wiki_repositories_checksum_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Group wiki repositories checksum failed count"
                                            },
                                            "group_wiki_repositories_synced_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Group wiki repositories synced count"
                                            },
                                            "group_wiki_repositories_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Group wiki repositories failed count"
                                            },
                                            "group_wiki_repositories_registry_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Group wiki repositories registry count"
                                            },
                                            "group_wiki_repositories_verification_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Group wiki repositories verification total count"
                                            },
                                            "group_wiki_repositories_verified_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Group wiki repositories verified count"
                                            },
                                            "group_wiki_repositories_verification_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Group wiki repositories verification failed count"
                                            },
                                            "pipeline_artifacts_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pipeline artifacts count"
                                            },
                                            "pipeline_artifacts_checksum_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pipeline artifacts checksum total count"
                                            },
                                            "pipeline_artifacts_checksummed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pipeline artifacts checksummed count"
                                            },
                                            "pipeline_artifacts_checksum_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pipeline artifacts checksum failed count"
                                            },
                                            "pipeline_artifacts_synced_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pipeline artifacts synced count"
                                            },
                                            "pipeline_artifacts_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pipeline artifacts failed count"
                                            },
                                            "pipeline_artifacts_registry_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pipeline artifacts registry count"
                                            },
                                            "pipeline_artifacts_verification_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pipeline artifacts verification total count"
                                            },
                                            "pipeline_artifacts_verified_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pipeline artifacts verified count"
                                            },
                                            "pipeline_artifacts_verification_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pipeline artifacts verification failed count"
                                            },
                                            "pages_deployments_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pages deployments count"
                                            },
                                            "pages_deployments_checksum_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pages deployments checksum total count"
                                            },
                                            "pages_deployments_checksummed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pages deployments checksummed count"
                                            },
                                            "pages_deployments_checksum_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pages deployments checksum failed count"
                                            },
                                            "pages_deployments_synced_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pages deployments synced count"
                                            },
                                            "pages_deployments_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pages deployments failed count"
                                            },
                                            "pages_deployments_registry_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pages deployments registry count"
                                            },
                                            "pages_deployments_verification_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pages deployments verification total count"
                                            },
                                            "pages_deployments_verified_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pages deployments verified count"
                                            },
                                            "pages_deployments_verification_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Pages deployments verification failed count"
                                            },
                                            "uploads_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Uploads count"
                                            },
                                            "uploads_checksum_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Uploads checksum total count"
                                            },
                                            "uploads_checksummed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Uploads checksummed count"
                                            },
                                            "uploads_checksum_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Uploads checksum failed count"
                                            },
                                            "uploads_synced_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Uploads synced count"
                                            },
                                            "uploads_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Uploads failed count"
                                            },
                                            "uploads_registry_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Uploads registry count"
                                            },
                                            "uploads_verification_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Uploads verification total count"
                                            },
                                            "uploads_verified_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Uploads verified count"
                                            },
                                            "uploads_verification_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Uploads verification failed count"
                                            },
                                            "job_artifacts_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Job artifacts count"
                                            },
                                            "job_artifacts_checksum_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Job artifacts checksum total count"
                                            },
                                            "job_artifacts_checksummed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Job artifacts checksummed count"
                                            },
                                            "job_artifacts_checksum_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Job artifacts checksum failed count"
                                            },
                                            "job_artifacts_synced_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Job artifacts synced count"
                                            },
                                            "job_artifacts_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Job artifacts failed count"
                                            },
                                            "job_artifacts_registry_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Job artifacts registry count"
                                            },
                                            "job_artifacts_verification_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Job artifacts verification total count"
                                            },
                                            "job_artifacts_verified_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Job artifacts verified count"
                                            },
                                            "job_artifacts_verification_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Job artifacts verification failed count"
                                            },
                                            "ci_secure_files_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "CI secure files count"
                                            },
                                            "ci_secure_files_checksum_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "CI secure files checksum total count"
                                            },
                                            "ci_secure_files_checksummed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "CI secure files checksummed count"
                                            },
                                            "ci_secure_files_checksum_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "CI secure files checksum failed count"
                                            },
                                            "ci_secure_files_synced_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "CI secure files synced count"
                                            },
                                            "ci_secure_files_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "CI secure files failed count"
                                            },
                                            "ci_secure_files_registry_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "CI secure files registry count"
                                            },
                                            "ci_secure_files_verification_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "CI secure files verification total count"
                                            },
                                            "ci_secure_files_verified_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "CI secure files verified count"
                                            },
                                            "ci_secure_files_verification_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "CI secure files verification failed count"
                                            },
                                            "container_repositories_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Container repositories count"
                                            },
                                            "container_repositories_checksum_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Container repositories checksum total count"
                                            },
                                            "container_repositories_checksummed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Container repositories checksummed count"
                                            },
                                            "container_repositories_checksum_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Container repositories checksum failed count"
                                            },
                                            "container_repositories_synced_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Container repositories synced count"
                                            },
                                            "container_repositories_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Container repositories failed count"
                                            },
                                            "container_repositories_registry_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Container repositories registry count"
                                            },
                                            "container_repositories_verification_total_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Container repositories verification total count"
                                            },
                                            "container_repositories_verified_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Container repositories verified count"
                                            },
                                            "container_repositories_verification_failed_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Container repositories verification failed count"
                                            },
                                            "git_fetch_event_count_weekly": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Git fetch event count weekly"
                                            },
                                            "git_push_event_count_weekly": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Git push event count weekly"
                                            },
                                            "proxy_remote_requests_event_count_weekly": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Proxy remote requests event count weekly"
                                            },
                                            "proxy_local_requests_event_count_weekly": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Proxy local requests event count weekly"
                                            }
                                        }
                                    }
                                },
                                "required": [
                                    "geo_node_id"
                                ]
                            }
                        },
                        "description": "Posts the current node status to the primary site"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Posts the current node status to the primary site",
                    "schema": {
                        "$ref": "#/definitions/EE_API_Entities_GeoNodeStatus"
                    }
                },
                "400": {
                    "description": "400 Bad Request"
                },
                "401": {
                    "description": "401 Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Posts the current node status to the primary site",
            "tags": [
                "geo"
            ],
            "operationId": "postApiV4GeoStatus"
        },
        {
            "server_url": "",
            "path": "/api/v4/geo/proxy_git_ssh/info_refs_upload_pack",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4GeoProxyGitSshInfoRefsUploadPack",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "secret_token": {
                                "type": "string",
                                "description": "Secret token to authenticate by gitlab shell"
                            },
                            "data": {
                                "type": "object",
                                "properties": {
                                    "gl_id": {
                                        "type": "string",
                                        "description": "GitLab identifier of user that initiated the clone/pull"
                                    },
                                    "primary_repo": {
                                        "type": "string",
                                        "description": "Primary repository to clone/pull"
                                    }
                                },
                                "required": [
                                    "gl_id",
                                    "primary_repo"
                                ]
                            }
                        },
                        "required": [
                            "secret_token",
                            "data"
                        ],
                        "description": "Responsible for making HTTP GET /repo.git/info/refs?service=git-upload-pack\n                  request from secondary gitlab-shell to primary"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Responsible for making HTTP GET /repo.git/info/refs?service=git-upload-pack\n                  request from secondary gitlab-shell to primary"
                },
                "401": {
                    "description": "401 Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Responsible for making HTTP GET /repo.git/info/refs?service=git-upload-pack\n                  request from secondary gitlab-shell to primary",
            "tags": [
                "geo"
            ],
            "operationId": "postApiV4GeoProxyGitSshInfoRefsUploadPack"
        },
        {
            "server_url": "",
            "path": "/api/v4/geo/proxy_git_ssh/upload_pack",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4GeoProxyGitSshUploadPack",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "secret_token": {
                                "type": "string"
                            },
                            "data": {
                                "type": "object",
                                "properties": {
                                    "gl_id": {
                                        "type": "string"
                                    },
                                    "primary_repo": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "gl_id",
                                    "primary_repo"
                                ]
                            },
                            "output": {
                                "type": "string",
                                "description": "Output from git-upload-pack"
                            }
                        },
                        "required": [
                            "secret_token",
                            "data",
                            "output"
                        ],
                        "description": "Responsible for making HTTP POST /repo.git/git-upload-pack\n                  request from secondary gitlab-shell to primary"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Responsible for making HTTP POST /repo.git/git-upload-pack\n                  request from secondary gitlab-shell to primary"
                },
                "401": {
                    "description": "401 Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Responsible for making HTTP POST /repo.git/git-upload-pack\n                  request from secondary gitlab-shell to primary",
            "tags": [
                "geo"
            ],
            "operationId": "postApiV4GeoProxyGitSshUploadPack"
        },
        {
            "server_url": "",
            "path": "/api/v4/geo/proxy_git_ssh/info_refs_receive_pack",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4GeoProxyGitSshInfoRefsReceivePack",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "secret_token": {
                                "type": "string"
                            },
                            "data": {
                                "type": "object",
                                "properties": {
                                    "gl_id": {
                                        "type": "string"
                                    },
                                    "primary_repo": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "gl_id",
                                    "primary_repo"
                                ]
                            }
                        },
                        "required": [
                            "secret_token",
                            "data"
                        ],
                        "description": "Responsible for making HTTP GET /repo.git/info/refs?service=git-receive-pack\n                  request from secondary gitlab-shell to primary"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Responsible for making HTTP GET /repo.git/info/refs?service=git-receive-pack\n                  request from secondary gitlab-shell to primary"
                },
                "401": {
                    "description": "401 Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Responsible for making HTTP GET /repo.git/info/refs?service=git-receive-pack\n                  request from secondary gitlab-shell to primary",
            "tags": [
                "geo"
            ],
            "operationId": "postApiV4GeoProxyGitSshInfoRefsReceivePack"
        },
        {
            "server_url": "",
            "path": "/api/v4/geo/proxy_git_ssh/receive_pack",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4GeoProxyGitSshReceivePack",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "secret_token": {
                                "type": "string"
                            },
                            "data": {
                                "type": "object",
                                "properties": {
                                    "gl_id": {
                                        "type": "string"
                                    },
                                    "primary_repo": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "gl_id",
                                    "primary_repo"
                                ]
                            },
                            "output": {
                                "type": "string",
                                "description": "Output from git-receive-pack"
                            }
                        },
                        "required": [
                            "secret_token",
                            "data",
                            "output"
                        ],
                        "description": "Responsible for making HTTP POST /repo.git/info/refs?service=git-receive-pack\n                  request from secondary gitlab-shell to primary"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Responsible for making HTTP POST /repo.git/info/refs?service=git-receive-pack\n                  request from secondary gitlab-shell to primary"
                },
                "401": {
                    "description": "401 Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Responsible for making HTTP POST /repo.git/info/refs?service=git-receive-pack\n                  request from secondary gitlab-shell to primary",
            "tags": [
                "geo"
            ],
            "operationId": "postApiV4GeoProxyGitSshReceivePack"
        },
        {
            "server_url": "",
            "path": "/api/v4/geo/node_proxy/{id}/graphql",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of the Geo node",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Query the GraphQL endpoint of an existing Geo node"
                },
                "404": {
                    "description": "404 GeoNode Not Found"
                },
                "500": {
                    "description": "500 Internal Server Error"
                }
            },
            "request_body_parameters": {},
            "description": "Query the GraphQL endpoint of an existing Geo node",
            "tags": [
                "geo"
            ],
            "operationId": "postApiV4GeoNodeProxyIdGraphql"
        },
        {
            "server_url": "",
            "path": "/api/v4/integrations/slack/events",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4IntegrationsSlackEvents",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "token": {
                                "type": "string",
                                "description": "(Deprecated by Slack) The request token, unused by GitLab"
                            },
                            "team_id": {
                                "type": "string",
                                "description": "The Slack workspace ID of where the event occurred"
                            },
                            "api_app_id": {
                                "type": "string",
                                "description": "The Slack app ID"
                            },
                            "event": {
                                "type": "object",
                                "description": "The event object with variable properties"
                            },
                            "type": {
                                "type": "string",
                                "description": "The kind of event this is, usually `event_callback`"
                            },
                            "event_id": {
                                "type": "string",
                                "description": "A unique identifier for this specific event"
                            },
                            "event_time": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The epoch timestamp in seconds when this event was dispatched"
                            },
                            "authed_users": {
                                "type": "array",
                                "description": "(Deprecated by Slack) An array of Slack user IDs",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Receive Slack events"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Successfully processed event"
                },
                "204": {
                    "description": "Failed to process event"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Receive Slack events",
            "tags": [
                "integrations"
            ],
            "operationId": "postApiV4IntegrationsSlackEvents"
        },
        {
            "server_url": "",
            "path": "/api/v4/integrations/slack/interactions",
            "method": "post",
            "parameters": [],
            "responses": {
                "201": {
                    "description": "created Interaction"
                }
            },
            "request_body_parameters": {},
            "description": "",
            "tags": [
                "integrations"
            ],
            "operationId": "postApiV4IntegrationsSlackInteractions"
        },
        {
            "server_url": "",
            "path": "/api/v4/integrations/slack/options",
            "method": "post",
            "parameters": [],
            "responses": {
                "201": {
                    "description": "created Option"
                }
            },
            "request_body_parameters": {},
            "description": "",
            "tags": [
                "integrations"
            ],
            "operationId": "postApiV4IntegrationsSlackOptions"
        },
        {
            "server_url": "",
            "path": "/api/v4/integrations/jira_connect/subscriptions",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4IntegrationsJiraConnectSubscriptions",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "jwt": {
                                "type": "string",
                                "description": "JWT token for authorization with the Jira Connect installation"
                            },
                            "namespace_path": {
                                "type": "string",
                                "description": "Path for the namespace that should be subscribed"
                            }
                        },
                        "required": [
                            "jwt",
                            "namespace_path"
                        ],
                        "description": "Subscribe a namespace to a JiraConnectInstallation"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Subscribe a namespace to a JiraConnectInstallation",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_BasicSuccess"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Subscribes the namespace to the JiraConnectInstallation",
            "tags": [
                "jira_connect_subscriptions"
            ],
            "operationId": "postApiV4IntegrationsJiraConnectSubscriptions"
        },
        {
            "server_url": "",
            "path": "/api/v4/markdown",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4Markdown",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "text": {
                                "type": "string",
                                "description": "The Markdown text to render"
                            },
                            "gfm": {
                                "type": "boolean",
                                "description": "Render text using GitLab Flavored Markdown. Default is false"
                            },
                            "project": {
                                "type": "string",
                                "description": "Use project as a context when creating references using GitLab Flavored Markdown"
                            }
                        },
                        "required": [
                            "text"
                        ],
                        "description": "Render an arbitrary Markdown document"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Render an arbitrary Markdown document",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Markdown"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.0.",
            "tags": [
                "markdown"
            ],
            "operationId": "postApiV4Markdown"
        },
        {
            "server_url": "",
            "path": "/api/v4/namespaces/{id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4NamespacesId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "shared_runners_minutes_limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Compute minutes quota for this namespace"
                            },
                            "extra_shared_runners_minutes_limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Extra compute minutes for this namespace"
                            },
                            "additional_purchased_storage_size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Additional storage size for this namespace"
                            },
                            "additional_purchased_storage_ends_on": {
                                "type": "string",
                                "format": "date",
                                "description": "End of subscription of the additional purchased storage"
                            },
                            "gitlab_subscription_attributes": {
                                "type": "object",
                                "properties": {
                                    "start_date": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "Start date of subscription"
                                    },
                                    "seats": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Number of seats in subscription"
                                    },
                                    "max_seats_used": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Highest number of active users in the last month"
                                    },
                                    "plan_code": {
                                        "type": "string",
                                        "description": "Subscription tier code"
                                    },
                                    "end_date": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "End date of subscription"
                                    },
                                    "auto_renew": {
                                        "type": "boolean",
                                        "description": "Whether subscription will auto renew on end date"
                                    },
                                    "trial": {
                                        "type": "boolean",
                                        "description": "Whether the subscription is a trial"
                                    },
                                    "trial_ends_on": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "End date of trial"
                                    },
                                    "trial_starts_on": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "Start date of trial"
                                    },
                                    "trial_extension_type": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Whether subscription is an extended or reactivated trial"
                                    }
                                }
                            }
                        },
                        "description": "[DEPRECATED] Update a namespace"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "[DEPRECATED] Update a namespace",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Namespace"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "[DEPRECATED] Update a namespace",
            "tags": [
                "namespaces"
            ],
            "operationId": "putApiV4NamespacesId"
        },
        {
            "server_url": "",
            "path": "/api/v4/namespaces/{id}/storage/limit_exclusion",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4NamespacesIdStorageLimitExclusion",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "reason": {
                                "type": "string",
                                "description": "The reason the Namespace is being excluded"
                            }
                        },
                        "required": [
                            "reason"
                        ],
                        "description": "Creates a storage limit exclusion for a Namespace"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Creates a storage limit exclusion for a Namespace",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Namespaces_Storage_LimitExclusion"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Creates a Namespaces::Storage::LimitExclusion",
            "tags": [
                "namespaces"
            ],
            "operationId": "postApiV4NamespacesIdStorageLimitExclusion"
        },
        {
            "server_url": "",
            "path": "/api/v4/namespaces/{id}/storage/limit_exclusion",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Removes a storage limit exclusion for a Namespace"
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Removes a Namespaces::Storage::LimitExclusion",
            "tags": [
                "namespaces"
            ],
            "operationId": "deleteApiV4NamespacesIdStorageLimitExclusion"
        },
        {
            "server_url": "",
            "path": "/api/v4/organizations",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4Organizations",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the organization"
                            },
                            "path": {
                                "type": "string",
                                "description": "The path of the organization"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the organization"
                            },
                            "avatar": {
                                "type": "file",
                                "description": "The avatar image for the organization"
                            }
                        },
                        "required": [
                            "name",
                            "path"
                        ],
                        "description": "Create an organization"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create an organization",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Organizations_Organization"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.5. \\\n                    This feature is currently in an experimental state. \\\n                    This feature is behind the `allow_organization_creation` feature flag.",
            "tags": [
                "organizations"
            ],
            "operationId": "postApiV4Organizations"
        },
        {
            "server_url": "",
            "path": "/api/v4/personal_access_tokens/self",
            "method": "delete",
            "parameters": [],
            "responses": {
                "204": {
                    "description": "Revoke a personal access token"
                },
                "400": {
                    "description": "Bad Request"
                }
            },
            "request_body_parameters": {},
            "description": "Revoke a personal access token by passing it to the API in a header",
            "tags": [
                "personal_access_tokens"
            ],
            "operationId": "deleteApiV4PersonalAccessTokensSelf"
        },
        {
            "server_url": "",
            "path": "/api/v4/personal_access_tokens/self/rotate",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4PersonalAccessTokensSelfRotate",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "expires_at": {
                                "type": "string",
                                "format": "date",
                                "description": "The expiration date of the token",
                                "example": "2021-01-31"
                            }
                        },
                        "description": "Rotate a personal access token"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Rotate a personal access token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_PersonalAccessTokenWithToken"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "405": {
                    "description": "Method not allowed"
                }
            },
            "request_body_parameters": {},
            "description": "Rotates a personal access token by passing it to the API in a header",
            "tags": [
                "personal_access_tokens"
            ],
            "operationId": "postApiV4PersonalAccessTokensSelfRotate"
        },
        {
            "server_url": "",
            "path": "/api/v4/personal_access_tokens/{id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Revoke a personal access token"
                },
                "400": {
                    "description": "Bad Request"
                }
            },
            "request_body_parameters": {},
            "description": "Revoke a personal access token by using the ID of the personal access token.",
            "tags": [
                "personal_access_tokens"
            ],
            "operationId": "deleteApiV4PersonalAccessTokensId"
        },
        {
            "server_url": "",
            "path": "/api/v4/personal_access_tokens/{id}/rotate",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "postApiV4PersonalAccessTokensIdRotate",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "expires_at": {
                                "type": "string",
                                "format": "date",
                                "description": "The expiration date of the token",
                                "example": "2021-01-31"
                            }
                        },
                        "description": "Rotate personal access token"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Rotate personal access token",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_PersonalAccessTokenWithToken"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Roates a personal access token.",
            "tags": [
                "personal_access_tokens"
            ],
            "operationId": "postApiV4PersonalAccessTokensIdRotate"
        },
        {
            "server_url": "",
            "path": "/api/v4/snippets",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4Snippets",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string",
                                "description": "The title of a snippet"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of a snippet"
                            },
                            "visibility": {
                                "type": "string",
                                "description": "The visibility of the snippet",
                                "enum": [
                                    "private",
                                    "internal",
                                    "public"
                                ],
                                "default": "internal"
                            },
                            "files": {
                                "type": "array",
                                "description": "An array of files",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "file_path": {
                                            "type": "string",
                                            "description": "The path of a snippet file"
                                        },
                                        "content": {
                                            "type": "string",
                                            "description": "The content of a snippet file"
                                        }
                                    },
                                    "required": [
                                        "file_path",
                                        "content"
                                    ]
                                }
                            },
                            "content": {
                                "type": "string",
                                "description": "The content of a snippet"
                            },
                            "file_name": {
                                "type": "string",
                                "description": "The name of a snippet file"
                            }
                        },
                        "required": [
                            "title",
                            "file_name"
                        ],
                        "description": "Create new snippet"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create new snippet",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_PersonalSnippet"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.15.",
            "tags": [
                "snippets"
            ],
            "operationId": "postApiV4Snippets"
        },
        {
            "server_url": "",
            "path": "/api/v4/snippets/{id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a snippet",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4SnippetsId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "string",
                                "description": "The content of a snippet"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of a snippet"
                            },
                            "file_name": {
                                "type": "string",
                                "description": "The name of a snippet file"
                            },
                            "title": {
                                "type": "string",
                                "description": "The title of a snippet"
                            },
                            "visibility": {
                                "type": "string",
                                "description": "The visibility of the snippet",
                                "enum": [
                                    "private",
                                    "internal",
                                    "public"
                                ]
                            },
                            "files": {
                                "type": "array",
                                "description": "An array of files to update",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "action": {
                                            "type": "string",
                                            "description": "The type of action to perform on the file, must be one of: create, update, delete, move",
                                            "enum": [
                                                "create",
                                                "update",
                                                "delete",
                                                "move"
                                            ]
                                        },
                                        "content": {
                                            "type": "string",
                                            "description": "The content of a snippet"
                                        },
                                        "file_path": {
                                            "type": "string",
                                            "description": "The file path of a snippet file"
                                        },
                                        "previous_path": {
                                            "type": "string",
                                            "description": "The previous path of a snippet file"
                                        }
                                    },
                                    "required": [
                                        "action"
                                    ]
                                }
                            }
                        },
                        "description": "Update an existing snippet"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update an existing snippet",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_PersonalSnippet"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.15.",
            "tags": [
                "snippets"
            ],
            "operationId": "putApiV4SnippetsId"
        },
        {
            "server_url": "",
            "path": "/api/v4/snippets/{id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of a snippet",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "400": {
                    "description": "Validation error"
                },
                "204": {
                    "description": "Remove snippet",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_PersonalSnippet"
                    }
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 8.15.",
            "tags": [
                "snippets"
            ],
            "operationId": "deleteApiV4SnippetsId"
        },
        {
            "server_url": "",
            "path": "/api/v4/suggestions/{id}/apply",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "The ID of the suggestion",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4SuggestionsIdApply",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "commit_message": {
                                "type": "string",
                                "description": "A custom commit message to use instead of the default generated message or the project's default message"
                            }
                        },
                        "description": "Apply suggestion patch in the Merge Request it was created"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Apply suggestion patch in the Merge Request it was created",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Suggestion"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Apply suggestion patch in the Merge Request it was created",
            "tags": [
                "suggestions"
            ],
            "operationId": "putApiV4SuggestionsIdApply"
        },
        {
            "server_url": "",
            "path": "/api/v4/suggestions/batch_apply",
            "method": "put",
            "parameters": [
                {
                    "name": "putApiV4SuggestionsBatchApply",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "ids": {
                                "type": "array",
                                "description": "An array of the suggestion IDs",
                                "items": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "commit_message": {
                                "type": "string",
                                "description": "A custom commit message to use instead of the default generated message or the project's default message"
                            }
                        },
                        "required": [
                            "ids"
                        ],
                        "description": "Apply multiple suggestion patches in the Merge Request where they were created"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Apply multiple suggestion patches in the Merge Request where they were created",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Suggestion"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Apply multiple suggestion patches in the Merge Request where they were created",
            "tags": [
                "suggestions"
            ],
            "operationId": "putApiV4SuggestionsBatchApply"
        },
        {
            "server_url": "",
            "path": "/api/v4/hooks/{hook_id}/url_variables/{key}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of the hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the variable",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4HooksHookIdUrlVariablesKey",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "The value of the variable"
                            }
                        },
                        "required": [
                            "value"
                        ],
                        "description": "Set a url variable"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Set a url variable"
                }
            },
            "request_body_parameters": {},
            "description": "Set a url variable",
            "tags": [
                "hooks"
            ],
            "operationId": "putApiV4HooksHookIdUrlVariablesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/hooks/{hook_id}/url_variables/{key}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of the hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the variable",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Un-Set a url variable"
                }
            },
            "request_body_parameters": {},
            "description": "Un-Set a url variable",
            "tags": [
                "hooks"
            ],
            "operationId": "deleteApiV4HooksHookIdUrlVariablesKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/hooks/{hook_id}/custom_headers/{key}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of the hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the custom header",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "putApiV4HooksHookIdCustomHeadersKey",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "The value of the custom header"
                            }
                        },
                        "required": [
                            "value"
                        ],
                        "description": "Set a custom header"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Set a custom header"
                }
            },
            "request_body_parameters": {},
            "description": "Set a custom header",
            "tags": [
                "hooks"
            ],
            "operationId": "putApiV4HooksHookIdCustomHeadersKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/hooks/{hook_id}/custom_headers/{key}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of the hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "in": "path",
                    "name": "key",
                    "description": "The key of the custom header",
                    "type": "string",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Un-Set a custom header"
                }
            },
            "request_body_parameters": {},
            "description": "Un-Set a custom header",
            "tags": [
                "hooks"
            ],
            "operationId": "deleteApiV4HooksHookIdCustomHeadersKey"
        },
        {
            "server_url": "",
            "path": "/api/v4/hooks",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4Hooks",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "The URL to send the request to",
                                "example": "http://example.com/hook"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name of the hook"
                            },
                            "description": {
                                "type": "string",
                                "description": "Description of the hook"
                            },
                            "token": {
                                "type": "string",
                                "description": "Secret token to validate received payloads; this isn't returned in the response"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "When true, the hook fires on push events"
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "When true, the hook fires on new tags being pushed"
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger hook on merge requests events"
                            },
                            "repository_update_events": {
                                "type": "boolean",
                                "description": "Trigger hook on repository update events"
                            },
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Do SSL verification when triggering the hook"
                            },
                            "push_events_branch_filter": {
                                "type": "string",
                                "description": "Trigger hook on specified branch only"
                            },
                            "branch_filter_strategy": {
                                "type": "string",
                                "description": "Filter push events by branch. Possible values are `wildcard` (default), `regex`, and `all_branches`",
                                "enum": [
                                    "wildcard",
                                    "regex",
                                    "all_branches"
                                ]
                            },
                            "url_variables": {
                                "type": "array",
                                "description": "URL variables for interpolation",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "description": "Name of the variable",
                                            "example": "token"
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "Value of the variable",
                                            "example": "123"
                                        }
                                    },
                                    "required": [
                                        "key",
                                        "value"
                                    ]
                                }
                            },
                            "custom_headers": {
                                "type": "array",
                                "description": "Custom headers",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "description": "Name of the header",
                                            "example": "X-Custom-Header"
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "Value of the header",
                                            "example": "value"
                                        }
                                    },
                                    "required": [
                                        "key",
                                        "value"
                                    ]
                                }
                            }
                        },
                        "required": [
                            "url"
                        ],
                        "description": "Add new system hook"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Add new system hook",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Hook"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Add a new system hook",
            "tags": [
                "system_hooks"
            ],
            "operationId": "postApiV4Hooks"
        },
        {
            "server_url": "",
            "path": "/api/v4/hooks/{hook_id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of the system hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4HooksHookId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "The URL to send the request to"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name of the hook"
                            },
                            "description": {
                                "type": "string",
                                "description": "Description of the hook"
                            },
                            "token": {
                                "type": "string",
                                "description": "Secret token to validate received payloads; this isn't returned in the response"
                            },
                            "push_events": {
                                "type": "boolean",
                                "description": "When true, the hook fires on push events"
                            },
                            "tag_push_events": {
                                "type": "boolean",
                                "description": "When true, the hook fires on new tags being pushed"
                            },
                            "merge_requests_events": {
                                "type": "boolean",
                                "description": "Trigger hook on merge requests events"
                            },
                            "repository_update_events": {
                                "type": "boolean",
                                "description": "Trigger hook on repository update events"
                            },
                            "enable_ssl_verification": {
                                "type": "boolean",
                                "description": "Do SSL verification when triggering the hook"
                            },
                            "push_events_branch_filter": {
                                "type": "string",
                                "description": "Trigger hook on specified branch only"
                            },
                            "branch_filter_strategy": {
                                "type": "string",
                                "description": "Filter push events by branch. Possible values are `wildcard` (default), `regex`, and `all_branches`",
                                "enum": [
                                    "wildcard",
                                    "regex",
                                    "all_branches"
                                ]
                            },
                            "url_variables": {
                                "type": "array",
                                "description": "URL variables for interpolation",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "description": "Name of the variable",
                                            "example": "token"
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "Value of the variable",
                                            "example": "123"
                                        }
                                    },
                                    "required": [
                                        "key",
                                        "value"
                                    ]
                                }
                            },
                            "custom_headers": {
                                "type": "array",
                                "description": "Custom headers",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "description": "Name of the header",
                                            "example": "X-Custom-Header"
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "Value of the header",
                                            "example": "value"
                                        }
                                    },
                                    "required": [
                                        "key",
                                        "value"
                                    ]
                                }
                            }
                        },
                        "description": "Edit system hook"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Edit system hook",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Hook"
                    }
                },
                "400": {
                    "description": "Validation error"
                },
                "404": {
                    "description": "Not found"
                },
                "422": {
                    "description": "Unprocessable entity"
                }
            },
            "request_body_parameters": {},
            "description": "Edits a system hook",
            "tags": [
                "system_hooks"
            ],
            "operationId": "putApiV4HooksHookId"
        },
        {
            "server_url": "",
            "path": "/api/v4/hooks/{hook_id}",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of the hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "created Hook"
                }
            },
            "request_body_parameters": {},
            "description": "",
            "tags": [
                "hooks"
            ],
            "operationId": "postApiV4HooksHookId"
        },
        {
            "server_url": "",
            "path": "/api/v4/hooks/{hook_id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "hook_id",
                    "description": "The ID of the system hook",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "404": {
                    "description": "Not found"
                },
                "204": {
                    "description": "Delete system hook",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Hook"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Deletes a system hook",
            "tags": [
                "system_hooks"
            ],
            "operationId": "deleteApiV4HooksHookId"
        },
        {
            "server_url": "",
            "path": "/api/v4/feature_flags/unleash/{project_id}/client/register",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "project_id",
                    "description": "The ID of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4FeatureFlagsUnleashProjectIdClientRegister",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "instance_id": {
                                "type": "string",
                                "description": "The instance ID of Unleash Client"
                            },
                            "app_name": {
                                "type": "string",
                                "description": "The application name of Unleash Client"
                            }
                        }
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "created Register"
                }
            },
            "request_body_parameters": {},
            "description": "",
            "tags": [
                "feature_flags"
            ],
            "operationId": "postApiV4FeatureFlagsUnleashProjectIdClientRegister"
        },
        {
            "server_url": "",
            "path": "/api/v4/feature_flags/unleash/{project_id}/client/metrics",
            "method": "post",
            "parameters": [
                {
                    "in": "path",
                    "name": "project_id",
                    "description": "The ID of a project",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "postApiV4FeatureFlagsUnleashProjectIdClientMetrics",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "instance_id": {
                                "type": "string",
                                "description": "The instance ID of Unleash Client"
                            },
                            "app_name": {
                                "type": "string",
                                "description": "The application name of Unleash Client"
                            }
                        }
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "created Metric"
                }
            },
            "request_body_parameters": {},
            "description": "",
            "tags": [
                "feature_flags"
            ],
            "operationId": "postApiV4FeatureFlagsUnleashProjectIdClientMetrics"
        },
        {
            "server_url": "",
            "path": "/api/v4/usage_data/increment_counter",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4UsageDataIncrementCounter",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "event": {
                                "type": "string",
                                "description": "The event name that should be tracked",
                                "example": "i_quickactions_page"
                            }
                        },
                        "required": [
                            "event"
                        ],
                        "description": "Track usage data event"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Track usage data event"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.4.",
            "tags": [
                "usage_data"
            ],
            "operationId": "postApiV4UsageDataIncrementCounter"
        },
        {
            "server_url": "",
            "path": "/api/v4/usage_data/increment_unique_users",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4UsageDataIncrementUniqueUsers",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "event": {
                                "type": "string",
                                "description": "The event name that should be tracked",
                                "example": "i_quickactions_page"
                            }
                        },
                        "required": [
                            "event"
                        ],
                        "description": "Track usage data event for the current user"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Track usage data event for the current user"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "Track usage data event for the current user",
            "tags": [
                "usage_data"
            ],
            "operationId": "postApiV4UsageDataIncrementUniqueUsers"
        },
        {
            "server_url": "",
            "path": "/api/v4/usage_data/track_events",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4UsageDataTrackEvents",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "events": {
                                "type": "array",
                                "description": "An array of internal events. Maximum 50 events allowed.",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "event": {
                                            "type": "string",
                                            "description": "The event name that should be tracked",
                                            "example": "i_quickactions_page"
                                        },
                                        "namespace_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "description": "Namespace ID",
                                            "example": 1234
                                        },
                                        "project_id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "description": "Project ID",
                                            "example": 1234
                                        },
                                        "additional_properties": {
                                            "type": "object",
                                            "description": "Additional properties to be tracked",
                                            "example": {
                                                "label": "login_button",
                                                "value": 1
                                            }
                                        },
                                        "send_to_snowplow": {
                                            "type": "boolean",
                                            "description": "Send the tracked event to Snowplow",
                                            "default": false,
                                            "example": true
                                        }
                                    },
                                    "required": [
                                        "event"
                                    ]
                                }
                            }
                        },
                        "required": [
                            "events"
                        ],
                        "description": "Track multiple gitlab internal events"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Track multiple gitlab internal events"
                },
                "400": {
                    "description": "Validation error"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.3.",
            "tags": [
                "usage_data"
            ],
            "operationId": "postApiV4UsageDataTrackEvents"
        },
        {
            "server_url": "",
            "path": "/api/v4/usage_data/track_event",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4UsageDataTrackEvent",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "event": {
                                "type": "string",
                                "description": "The event name that should be tracked",
                                "example": "i_quickactions_page"
                            },
                            "namespace_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Namespace ID",
                                "example": 1234
                            },
                            "project_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Project ID",
                                "example": 1234
                            },
                            "additional_properties": {
                                "type": "object",
                                "description": "Additional properties to be tracked",
                                "example": {
                                    "label": "login_button",
                                    "value": 1
                                }
                            },
                            "send_to_snowplow": {
                                "type": "boolean",
                                "description": "Send the tracked event to Snowplow",
                                "default": false,
                                "example": true
                            }
                        },
                        "required": [
                            "event"
                        ],
                        "description": "Track gitlab internal events"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Track gitlab internal events"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Not found"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 16.2.",
            "tags": [
                "usage_data"
            ],
            "operationId": "postApiV4UsageDataTrackEvent"
        },
        {
            "server_url": "",
            "path": "/api/v4/user/runners",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4UserRunners",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "runner_type": {
                                "type": "string",
                                "description": "Specifies the scope of the runner",
                                "enum": [
                                    "instance_type",
                                    "group_type",
                                    "project_type"
                                ]
                            },
                            "group_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the group that the runner is created in",
                                "example": 1
                            },
                            "project_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the project that the runner is created in",
                                "example": 1
                            },
                            "description": {
                                "type": "string",
                                "description": "Description of the runner"
                            },
                            "maintenance_note": {
                                "type": "string",
                                "description": "Free-form maintenance notes for the runner (1024 characters)"
                            },
                            "paused": {
                                "type": "boolean",
                                "description": "Specifies if the runner should ignore new jobs (defaults to false)"
                            },
                            "locked": {
                                "type": "boolean",
                                "description": "Specifies if the runner should be locked for the current project (defaults to false)"
                            },
                            "access_level": {
                                "type": "string",
                                "description": "The access level of the runner",
                                "enum": [
                                    "not_protected",
                                    "ref_protected"
                                ]
                            },
                            "run_untagged": {
                                "type": "boolean",
                                "description": "Specifies if the runner should handle untagged jobs  (defaults to true)"
                            },
                            "tag_list": {
                                "type": "array",
                                "description": "A list of runner tags",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "maximum_timeout": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum timeout that limits the amount of time (in seconds) that runners can run jobs"
                            }
                        },
                        "required": [
                            "runner_type",
                            "group_id",
                            "project_id"
                        ],
                        "description": "Create a runner owned by currently authenticated user"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a runner owned by currently authenticated user",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Ci_RunnerRegistrationDetails"
                    }
                },
                "400": {
                    "description": "Bad Request"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Create a new runner",
            "tags": [
                "user",
                "runners"
            ],
            "operationId": "postApiV4UserRunners"
        },
        {
            "server_url": "",
            "path": "/api/v4/application/plan_limits",
            "method": "put",
            "parameters": [
                {
                    "name": "putApiV4ApplicationPlanLimits",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "plan_name": {
                                "type": "string",
                                "description": "Name of the plan to update",
                                "enum": [
                                    "default",
                                    "free",
                                    "bronze",
                                    "silver",
                                    "premium",
                                    "gold",
                                    "ultimate",
                                    "ultimate_trial",
                                    "ultimate_trial_paid_customer",
                                    "premium_trial",
                                    "opensource"
                                ]
                            },
                            "ci_instance_level_variables": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of Instance-level CI/CD variables that can be defined"
                            },
                            "ci_pipeline_size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of jobs in a single pipeline"
                            },
                            "ci_active_jobs": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Total number of jobs in currently active pipelines"
                            },
                            "ci_project_subscriptions": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of pipeline subscriptions to and from a project"
                            },
                            "ci_pipeline_schedules": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of pipeline schedules"
                            },
                            "ci_needs_size_limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of needs dependencies that a job can have"
                            },
                            "ci_registered_group_runners": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of runners created or active in a group during the past seven days"
                            },
                            "ci_registered_project_runners": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of runners created or active in a project during the past seven days"
                            },
                            "conan_max_file_size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum Conan package file size in bytes"
                            },
                            "dotenv_size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum size of a dotenv artifact in bytes"
                            },
                            "dotenv_variables": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of variables in a dotenv artifact"
                            },
                            "enforcement_limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum storage size for the root namespace enforcement in MiB"
                            },
                            "generic_packages_max_file_size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum generic package file size in bytes"
                            },
                            "helm_max_file_size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum Helm chart file size in bytes"
                            },
                            "maven_max_file_size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum Maven package file size in bytes"
                            },
                            "notification_limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum storage size for the root namespace notifications in MiB"
                            },
                            "npm_max_file_size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum NPM package file size in bytes"
                            },
                            "nuget_max_file_size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum NuGet package file size in bytes"
                            },
                            "pypi_max_file_size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum PyPI package file size in bytes"
                            },
                            "terraform_module_max_file_size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum Terraform Module package file size in bytes"
                            },
                            "storage_size_limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum storage size for the root namespace in MiB"
                            },
                            "pipeline_hierarchy_size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of downstream pipelines in a pipeline's hierarchy tree"
                            }
                        },
                        "required": [
                            "plan_name"
                        ],
                        "description": "Change plan limits"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Change plan limits",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_PlanLimit"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Modify the limits of a plan on the GitLab instance.",
            "tags": [
                "plan_limits"
            ],
            "operationId": "putApiV4ApplicationPlanLimits"
        },
        {
            "server_url": "",
            "path": "/api/v4/application/appearance",
            "method": "put",
            "parameters": [
                {
                    "in": "formData",
                    "name": "title",
                    "description": "Instance title on the sign in / sign up page",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "description",
                    "description": "Markdown text shown on the sign in / sign up page",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "pwa_name",
                    "description": "Name of the Progressive Web App",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "pwa_short_name",
                    "description": "Optional, short name for Progressive Web App",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "pwa_description",
                    "description": "An explanation of what the Progressive Web App does",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "logo",
                    "description": "Instance image used on the sign in / sign up page",
                    "type": "file",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "pwa_icon",
                    "description": "Icon used for Progressive Web App",
                    "type": "file",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "header_logo",
                    "description": "Instance image used for the main navigation bar",
                    "type": "file",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "favicon",
                    "description": "Instance favicon in .ico/.png format",
                    "type": "file",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "member_guidelines",
                    "description": "Markdown text shown on the members page of a group or project",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "new_project_guidelines",
                    "description": "Markdown text shown on the new project page",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "profile_image_guidelines",
                    "description": "Markdown text shown on the profile page below Public Avatar",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "header_message",
                    "description": "Message within the system header bar",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "footer_message",
                    "description": "Message within the system footer bar",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "message_background_color",
                    "description": "Background color for the system header / footer bar",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "message_font_color",
                    "description": "Font color for the system header / footer bar",
                    "type": "string",
                    "required": false
                },
                {
                    "in": "formData",
                    "name": "email_header_and_footer_enabled",
                    "description": "Add header and footer to all outgoing emails if enabled",
                    "type": "boolean",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "Modify appearance",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Appearance"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "Modify appearance",
            "tags": [
                "application"
            ],
            "operationId": "putApiV4ApplicationAppearance"
        },
        {
            "server_url": "",
            "path": "/api/v4/deploy_keys",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4DeployKeys",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string",
                                "description": "New deploy key"
                            },
                            "title": {
                                "type": "string",
                                "description": "New deploy key's title"
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)"
                            }
                        },
                        "required": [
                            "key",
                            "title"
                        ],
                        "description": "Create a deploy key"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a deploy key",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_DeployKey"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                }
            },
            "request_body_parameters": {},
            "description": "Create a deploy key for the GitLab instance. This endpoint requires administrator access.",
            "tags": [
                "deploy_keys"
            ],
            "operationId": "postApiV4DeployKeys"
        },
        {
            "server_url": "",
            "path": "/api/v4/import/bitbucket",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4ImportBitbucket",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "bitbucket_username": {
                                "type": "string",
                                "description": "BitBucket username"
                            },
                            "bitbucket_app_password": {
                                "type": "string",
                                "description": "BitBucket app password"
                            },
                            "repo_path": {
                                "type": "string",
                                "description": "Repository path"
                            },
                            "target_namespace": {
                                "type": "string",
                                "description": "Target namespace"
                            },
                            "new_name": {
                                "type": "string",
                                "description": "New repository name"
                            }
                        },
                        "required": [
                            "bitbucket_username",
                            "bitbucket_app_password",
                            "repo_path",
                            "target_namespace"
                        ],
                        "description": "Import a BitBucket Cloud repository"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Import a BitBucket Cloud repository",
                    "schema": {
                        "$ref": "#/definitions/ProjectImportEntity"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "422": {
                    "description": "Unprocessable entity"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 17.0.",
            "tags": [
                "project_import_bitbucket"
            ],
            "operationId": "postApiV4ImportBitbucket"
        },
        {
            "server_url": "",
            "path": "/api/v4/import/bitbucket_server",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4ImportBitbucketServer",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "bitbucket_server_url": {
                                "type": "string",
                                "description": "Bitbucket Server URL"
                            },
                            "bitbucket_server_username": {
                                "type": "string",
                                "description": "BitBucket Server Username"
                            },
                            "personal_access_token": {
                                "type": "string",
                                "description": "BitBucket Server personal access token/password"
                            },
                            "bitbucket_server_project": {
                                "type": "string",
                                "description": "BitBucket Server Project Key"
                            },
                            "bitbucket_server_repo": {
                                "type": "string",
                                "description": "BitBucket Server Repository Name"
                            },
                            "new_name": {
                                "type": "string",
                                "description": "New repo name"
                            },
                            "new_namespace": {
                                "type": "string",
                                "description": "Namespace to import repo into"
                            },
                            "timeout_strategy": {
                                "type": "string",
                                "description": "Strategy for behavior on timeouts",
                                "enum": [
                                    "optimistic",
                                    "pessimistic"
                                ]
                            }
                        },
                        "required": [
                            "bitbucket_server_url",
                            "bitbucket_server_username",
                            "personal_access_token",
                            "bitbucket_server_project",
                            "bitbucket_server_repo"
                        ],
                        "description": "Import a BitBucket Server repository"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Import a BitBucket Server repository",
                    "schema": {
                        "$ref": "#/definitions/ProjectEntity"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "422": {
                    "description": "Unprocessable entity"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 13.2.",
            "tags": [
                "project_import_bitbucket"
            ],
            "operationId": "postApiV4ImportBitbucketServer"
        },
        {
            "server_url": "",
            "path": "/api/v4/import/github",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4ImportGithub",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "personal_access_token": {
                                "type": "string",
                                "description": "GitHub personal access token"
                            },
                            "repo_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "GitHub repository ID"
                            },
                            "new_name": {
                                "type": "string",
                                "description": "New repo name"
                            },
                            "target_namespace": {
                                "type": "string",
                                "description": "Namespace or group to import repository into"
                            },
                            "github_hostname": {
                                "type": "string",
                                "description": "Custom GitHub enterprise hostname. For example: https://github.example.com. From GitLab 16.5 to GitLab 17.1, you must include the path `/api/v3`."
                            },
                            "optional_stages": {
                                "type": "object",
                                "description": "Optional stages of import to be performed"
                            },
                            "timeout_strategy": {
                                "type": "string",
                                "description": "Strategy for behavior on timeouts",
                                "enum": [
                                    "optimistic",
                                    "pessimistic"
                                ]
                            },
                            "pagination_limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Pagination limit"
                            }
                        },
                        "required": [
                            "personal_access_token",
                            "repo_id",
                            "target_namespace"
                        ],
                        "description": "Import a GitHub project"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Import a GitHub project",
                    "schema": {
                        "$ref": "#/definitions/ProjectEntity"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "422": {
                    "description": "Unprocessable entity"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 11.3.4.",
            "tags": [
                "project_import_github"
            ],
            "operationId": "postApiV4ImportGithub"
        },
        {
            "server_url": "",
            "path": "/api/v4/import/github/cancel",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4ImportGithubCancel",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "project_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "ID of importing project to be canceled"
                            }
                        },
                        "required": [
                            "project_id"
                        ],
                        "description": "Cancel GitHub project import"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Cancel GitHub project import",
                    "schema": {
                        "$ref": "#/definitions/ProjectImportEntity"
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "403": {
                    "description": "Forbidden"
                },
                "404": {
                    "description": "Not found"
                },
                "503": {
                    "description": "Service unavailable"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.5",
            "tags": [
                "project_import_github"
            ],
            "operationId": "postApiV4ImportGithubCancel"
        },
        {
            "server_url": "",
            "path": "/api/v4/import/github/gists",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4ImportGithubGists",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "personal_access_token": {
                                "type": "string",
                                "description": "GitHub personal access token"
                            }
                        },
                        "required": [
                            "personal_access_token"
                        ],
                        "description": "Import User Gists"
                    }
                }
            ],
            "responses": {
                "202": {
                    "description": "Import User Gists"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "422": {
                    "description": "Unprocessable Entity"
                },
                "429": {
                    "description": "Too Many Requests"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.8",
            "tags": [
                "import"
            ],
            "operationId": "postApiV4ImportGithubGists"
        },
        {
            "server_url": "",
            "path": "/api/v4/slack/trigger",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4SlackTrigger",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "text": {
                                "type": "string",
                                "description": "Text of the slack command"
                            }
                        },
                        "required": [
                            "text"
                        ],
                        "description": "Trigger a global slack command"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Trigger a global slack command"
                },
                "401": {
                    "description": "Unauthorized"
                }
            },
            "request_body_parameters": {},
            "description": "Added in GitLab 9.4",
            "tags": [
                "slack"
            ],
            "operationId": "postApiV4SlackTrigger"
        },
        {
            "server_url": "",
            "path": "/api/v4/topics",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4Topics",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Slug (name)"
                            },
                            "title": {
                                "type": "string",
                                "description": "Title"
                            },
                            "description": {
                                "type": "string",
                                "description": "Description"
                            },
                            "avatar": {
                                "type": "file",
                                "description": "Avatar image for topic"
                            },
                            "organization_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The organization id for the topic",
                                "default": {}
                            }
                        },
                        "required": [
                            "name",
                            "title"
                        ],
                        "description": "Create a topic"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Create a topic",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Projects_Topic"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.5.",
            "tags": [
                "topics"
            ],
            "operationId": "postApiV4Topics"
        },
        {
            "server_url": "",
            "path": "/api/v4/topics/{id}",
            "method": "put",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "ID of project topic",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                },
                {
                    "name": "putApiV4TopicsId",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Slug (name)"
                            },
                            "title": {
                                "type": "string",
                                "description": "Title"
                            },
                            "description": {
                                "type": "string",
                                "description": "Description"
                            },
                            "avatar": {
                                "type": "file",
                                "description": "Avatar image for topic"
                            }
                        },
                        "description": "Update a topic"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Update a topic",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Projects_Topic"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.5.",
            "tags": [
                "topics"
            ],
            "operationId": "putApiV4TopicsId"
        },
        {
            "server_url": "",
            "path": "/api/v4/topics/{id}",
            "method": "delete",
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "description": "ID of project topic",
                    "type": "integer",
                    "format": "int32",
                    "required": true
                }
            ],
            "responses": {
                "204": {
                    "description": "Delete a topic"
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 14.9.",
            "tags": [
                "topics"
            ],
            "operationId": "deleteApiV4TopicsId"
        },
        {
            "server_url": "",
            "path": "/api/v4/topics/merge",
            "method": "post",
            "parameters": [
                {
                    "name": "postApiV4TopicsMerge",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "source_topic_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "ID of source project topic"
                            },
                            "target_topic_id": {
                                "type": "integer",
                                "format": "int32",
                                "description": "ID of target project topic"
                            }
                        },
                        "required": [
                            "source_topic_id",
                            "target_topic_id"
                        ],
                        "description": "Merge topics"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "Merge topics",
                    "schema": {
                        "$ref": "#/definitions/API_Entities_Projects_Topic"
                    }
                }
            },
            "request_body_parameters": {},
            "description": "This feature was introduced in GitLab 15.4.",
            "tags": [
                "topics"
            ],
            "operationId": "postApiV4TopicsMerge"
        }
    ]
}